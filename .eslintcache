[{"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\index.tsx":"1","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\serviceWorker.ts":"2","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\App.tsx":"3","F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\index.tsx":"4","F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\serviceWorker.ts":"5","F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\App.tsx":"6","F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\store\\types\\enums\\TacticType.enum.ts":"7","F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\store\\types\\enums\\MapBaseNumber.enum.ts":"8","F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\theme.ts":"9","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\types\\enums\\MapBaseNumber.enum.ts":"10","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\types\\enums\\TacticType.enum.ts":"11","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\localStorage.ts":"12","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\login.ts":"13","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\config.ts":"14","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\store\\index.ts":"15","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\teamSlice.ts":"16","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\store.ts":"17","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\index.ts":"18","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\counterSlice.ts":"19","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\filterSlice.ts":"20","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\clanSlice.ts":"21","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\utils\\url\\urlUtils.ts":"22","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\tournamentSlice.ts":"23","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\events.ts":"24","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\client.ts":"25","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\AddTournament.tsx":"26","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\Clan.tsx":"27","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\TournamentSection.tsx":"28","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\TeamForm.tsx":"29","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\Teams.tsx":"30","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\AddTactic.tsx":"31","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\ClanMember.tsx":"32","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\TournamentList.tsx":"33","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\PlayerList.tsx":"34","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\AddPlayer.tsx":"35","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\TeamCard.tsx":"36","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-metadata\\TacticMetadataForm.tsx":"37","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-role\\TacticRoleForm.tsx":"38","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-role\\TacticRoles.tsx":"39","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\Tournament.tsx":"40","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\Player.tsx":"41","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-role\\TacticRole.tsx":"42","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\store\\tacticsSlice.ts":"43","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\Tactics.tsx":"44","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\TacticCard.tsx":"45","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\decorators\\PropertyChanged.ts":"46","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\InteractiveMap.tsx":"47","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\MapTools.tsx":"48","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\WebSocketContext.tsx":"49","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\mapInteractionSlice.ts":"50","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\MapCanvas.tsx":"51","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\useCanvas.ts":"52","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\vehicles\\types.ts":"53","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\useLiveMapInteraction.ts":"54","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\mapsApiSlice.ts":"55","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\useAnimationFrame.ts":"56","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\provinces\\Provinces.tsx":"57","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\globalMapSlice.ts":"58","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\provinces\\ProvinceComponent.tsx":"59","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\utils\\generic-table\\genericTableUtils.ts":"60","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\components\\GenericTableToolbar.tsx":"61","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\components\\GenericTableHead.tsx":"62","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\provinces\\CompetitorsTooltip.tsx":"63","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\tanksSlice.ts":"64","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\tankStastisticsSlice.ts":"65","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\PlayerVehicleStatistics.tsx":"66","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\VehicleStatisticsTable.tsx":"67","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\components\\GenericTableBody.tsx":"68","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\components\\GenericTable.tsx":"69","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\PlayerTankStatisticsTabView.tsx":"70","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\useTabPanels.tsx":"71","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\authenticationSlice.ts":"72"},{"size":863,"mtime":1615377099774,"results":"73","hashOfConfig":"74"},{"size":5424,"mtime":499162500000,"results":"75","hashOfConfig":"74"},{"size":3729,"mtime":1621941632570,"results":"76","hashOfConfig":"74"},{"size":851,"mtime":1611960443960,"results":"77","hashOfConfig":"78"},{"size":5424,"mtime":499162500000,"results":"79","hashOfConfig":"78"},{"size":908,"mtime":1611969812927,"results":"80","hashOfConfig":"78"},{"size":76,"mtime":1611965897351,"results":"81","hashOfConfig":"78"},{"size":111,"mtime":1611970115925,"results":"82","hashOfConfig":"78"},{"size":477,"mtime":1611960506938,"results":"83","hashOfConfig":"78"},{"size":111,"mtime":1611970115925,"results":"84","hashOfConfig":"74"},{"size":96,"mtime":1612624492675,"results":"85","hashOfConfig":"74"},{"size":576,"mtime":1612044344927,"results":"86","hashOfConfig":"74"},{"size":1859,"mtime":1612033391160,"results":"87","hashOfConfig":"74"},{"size":131,"mtime":1612035499142,"results":"88","hashOfConfig":"74"},{"size":981,"mtime":1611956888278,"results":"89","hashOfConfig":"74"},{"size":9713,"mtime":1613868399581,"results":"90","hashOfConfig":"74"},{"size":587,"mtime":1613730282566,"results":"91","hashOfConfig":"74"},{"size":1343,"mtime":1621932522936,"results":"92","hashOfConfig":"74"},{"size":1996,"mtime":1612045495518,"results":"93","hashOfConfig":"74"},{"size":1032,"mtime":1612054042177,"results":"94","hashOfConfig":"74"},{"size":6670,"mtime":1615750242453,"results":"95","hashOfConfig":"74"},{"size":297,"mtime":1616159212096,"results":"96","hashOfConfig":"74"},{"size":5618,"mtime":1613868407339,"results":"97","hashOfConfig":"74"},{"size":954,"mtime":1612528389384,"results":"98","hashOfConfig":"74"},{"size":1114,"mtime":1612629127235,"results":"99","hashOfConfig":"74"},{"size":7677,"mtime":1612625580590,"results":"100","hashOfConfig":"74"},{"size":2831,"mtime":1615726743393,"results":"101","hashOfConfig":"74"},{"size":899,"mtime":1612533236286,"results":"102","hashOfConfig":"74"},{"size":3130,"mtime":1613868404839,"results":"103","hashOfConfig":"74"},{"size":1819,"mtime":1613660568768,"results":"104","hashOfConfig":"74"},{"size":2476,"mtime":1615408684729,"results":"105","hashOfConfig":"74"},{"size":2380,"mtime":1615686287574,"results":"106","hashOfConfig":"74"},{"size":1660,"mtime":1612535027671,"results":"107","hashOfConfig":"74"},{"size":1121,"mtime":1613868385278,"results":"108","hashOfConfig":"74"},{"size":3981,"mtime":1615507456659,"results":"109","hashOfConfig":"74"},{"size":2445,"mtime":1613138028931,"results":"110","hashOfConfig":"74"},{"size":5042,"mtime":1615416170584,"results":"111","hashOfConfig":"74"},{"size":5858,"mtime":1615679924522,"results":"112","hashOfConfig":"74"},{"size":1558,"mtime":1613868371847,"results":"113","hashOfConfig":"74"},{"size":2980,"mtime":1612534821817,"results":"114","hashOfConfig":"74"},{"size":1397,"mtime":1613089640528,"results":"115","hashOfConfig":"74"},{"size":5399,"mtime":1615679968596,"results":"116","hashOfConfig":"74"},{"size":17110,"mtime":1615417723816,"results":"117","hashOfConfig":"74"},{"size":1833,"mtime":1613873010533,"results":"118","hashOfConfig":"74"},{"size":2793,"mtime":1613178098049,"results":"119","hashOfConfig":"74"},{"size":2750,"mtime":1615560381122,"results":"120","hashOfConfig":"74"},{"size":6213,"mtime":1615480238462,"results":"121","hashOfConfig":"74"},{"size":5838,"mtime":1615481267975,"results":"122","hashOfConfig":"74"},{"size":4060,"mtime":1621941624031,"results":"123","hashOfConfig":"74"},{"size":3254,"mtime":1615750250463,"results":"124","hashOfConfig":"74"},{"size":790,"mtime":1615411104783,"results":"125","hashOfConfig":"74"},{"size":5170,"mtime":1615484376466,"results":"126","hashOfConfig":"74"},{"size":24373,"mtime":1615751131278,"results":"127","hashOfConfig":"74"},{"size":2060,"mtime":1615309108942,"results":"128","hashOfConfig":"74"},{"size":3318,"mtime":1615460669083,"results":"129","hashOfConfig":"74"},{"size":897,"mtime":1615477350998,"results":"130","hashOfConfig":"74"},{"size":9961,"mtime":1615997848493,"results":"131","hashOfConfig":"74"},{"size":5314,"mtime":1615562117045,"results":"132","hashOfConfig":"74"},{"size":2525,"mtime":1615507539110,"results":"133","hashOfConfig":"74"},{"size":1201,"mtime":1615750223474,"results":"134","hashOfConfig":"74"},{"size":1991,"mtime":1615997798367,"results":"135","hashOfConfig":"74"},{"size":2919,"mtime":1616172667599,"results":"136","hashOfConfig":"74"},{"size":3040,"mtime":1615671509605,"results":"137","hashOfConfig":"74"},{"size":2496,"mtime":1615750231267,"results":"138","hashOfConfig":"74"},{"size":3966,"mtime":1615750227232,"results":"139","hashOfConfig":"74"},{"size":3100,"mtime":1616171807678,"results":"140","hashOfConfig":"74"},{"size":4975,"mtime":1615824805760,"results":"141","hashOfConfig":"74"},{"size":1599,"mtime":1615819979468,"results":"142","hashOfConfig":"74"},{"size":2444,"mtime":1615997656094,"results":"143","hashOfConfig":"74"},{"size":8473,"mtime":1616173235748,"results":"144","hashOfConfig":"74"},{"size":4532,"mtime":1616173540982,"results":"145","hashOfConfig":"74"},{"size":1991,"mtime":1621940588027,"results":"146","hashOfConfig":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},"r9njs4",{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"157"},"1dbhl6l",{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"149"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":9,"source":"197","usedDeprecatedRules":"149"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"149"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"149"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"149"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"149"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"149"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"149"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"149"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"149"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"149"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"149"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"149"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"149"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"149"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"149"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"149"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"149"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"149"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"259","usedDeprecatedRules":"149"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"149"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"149"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"149"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"149"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"281"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"149"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"289","messages":"290","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"291","usedDeprecatedRules":"149"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"294","messages":"295","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"149"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"299","usedDeprecatedRules":"149"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"302"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"149"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"149"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"315","usedDeprecatedRules":"149"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"318","usedDeprecatedRules":"149"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"149"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"149"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"149"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"149"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"149"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\index.tsx",[],["338","339"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\serviceWorker.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\App.tsx",["340","341","342","343"],"F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\index.tsx",["344","345","346"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './store/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\r\nimport theme from './theme';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <ThemeProvider theme={theme}> */}\r\n\r\n    {/* <CssBaseline /> */}\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n\r\n    {/* </ThemeProvider> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n",["347","348"],"F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\serviceWorker.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\App.tsx",[],"F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\store\\types\\enums\\TacticType.enum.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\store\\types\\enums\\MapBaseNumber.enum.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\theme.ts",[],["349","350"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\types\\enums\\MapBaseNumber.enum.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\types\\enums\\TacticType.enum.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\localStorage.ts",[],["351","352"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\login.ts",["353"],"export interface LoginData {\r\n    application_id: string;\r\n    display: LoginDisplayType;\r\n    nofollow: 0 | 1\r\n    expires_at: number;\r\n    redirect_uri: string\r\n}\r\n\r\nexport enum LoginDisplayType {\r\n    PAGE = \"page\",\r\n    POPUP = \"popup\"\r\n}\r\n\r\nconst login = () => {\r\n    const loginData: LoginData = {\r\n        application_id: \"cb96a1fa695145b03a603132c093b238\",\r\n        display: LoginDisplayType.PAGE,\r\n        nofollow: 0,\r\n        expires_at: 0,\r\n        // redirect_uri: \"localhost:3000\"\r\n        redirect_uri: \"https%3A%2F%2Fdevelopers.wargaming.net%2Freference%2Fall%2Fwot%2Fauth%2Flogin%2F\"\r\n    }\r\n\r\n    // const loginUrl = \"https://api.worldoftanks.eu/wot/auth/login?\";\r\n    // Object.keys(loginData).map((key: string) => `${key=loginData[key]}`)\r\n\r\n    fetch(\"https://api.worldoftanks.eu/wot/auth/login/?application_id=cb96a1fa695145b03a603132c093b238&display=popup&redirect_uri=https%3A%2F%2Fdevelopers.wargaming.net%2Freference%2Fall%2Fwot%2Fauth%2Flogin%2F\")\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                console.log(result)\r\n                // setIsLoaded(true);\r\n                // setItems(result);\r\n            },\r\n            // Note: it's important to handle errors here\r\n            // instead of a catch() block so that we don't swallow\r\n            // exceptions from actual bugs in components.\r\n            (error) => {\r\n                // setIsLoaded(true);\r\n                // setError(error);\r\n            }\r\n        )\r\n}\r\n\r\nexport default login;\r\n\r\n// https://api.worldoftanks.eu/wot/auth/login/?\r\n// status=ok&\r\n// access_token=26a6cafbdd0d520572988afaf934d18b3a34b13e&\r\n// nickname=ExcisonX&\r\n// account_id=503047828&\r\n// expires_at=1613235656&\r\n// application_id=cb96a1fa695145b03a603132c093b238\r\n\r\n// redirect url: https://developers.wargaming.net/reference/all/wot/auth/login/",["354","355"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\config.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\store\\index.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\teamSlice.ts",["356","357"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '.';\r\nimport { User } from '../screens/vehicles/types';\r\nimport { applyChanges, Change, Changeable, ChangeType } from '../store/decorators/PropertyChanged';\r\nimport { redirectTo } from '../utils/url/urlUtils';\r\n\r\nexport const DEFAULT_NEW_TEAM_ID = '0';\r\nexport const DEFAULT_NEW_TEAM_NAME = '';\r\nexport const TEAM_STATE_STORAGE_KEY = 'teamState';\r\nexport const TEAMS_PAGE = '/teams'; // TODO - extract\r\n\r\ninterface TeamState {\r\n    teams: Team[],\r\n    selectedTeamId?: string;\r\n}\r\n\r\nexport interface Team extends Changeable<Team> {\r\n    teamId: string,\r\n    teamName: string,\r\n    players: User[];\r\n}\r\n\r\nexport const createDefaultTeam = () => {\r\n    return {\r\n        teamId: DEFAULT_NEW_TEAM_ID,\r\n        teamName: DEFAULT_NEW_TEAM_NAME,\r\n        players: [],\r\n        changes: [],\r\n    }\r\n}\r\nconst createDefaultTeamState = () => {\r\n    return {\r\n        teams: [createDefaultTeam()],\r\n        selectedTeamId: DEFAULT_NEW_TEAM_ID\r\n    };\r\n}\r\n\r\nexport const createDefaultUser = () => {\r\n    return {\r\n        role: \"\",\r\n        role_i18n: \"\",\r\n        joined_at: 0,\r\n        account_id: \"\",\r\n        account_name: \"\",\r\n    } as User\r\n}\r\n\r\nexport type SelectedTeamIdAction = {\r\n    teamId: string;\r\n}\r\nexport type ChangeTeamNameAction = SelectedTeamIdAction & {\r\n    teamName: string;\r\n}\r\nexport type UserType = { user: User }\r\nexport type UserAction = UserType & SelectedTeamIdAction\r\nexport type AddPlayerToTeamAction = UserAction\r\nexport type RemovePlayerFromTeamAction = UserAction\r\n\r\nconst loadState = () => {\r\n    const storage = localStorage.getItem(TEAM_STATE_STORAGE_KEY)\r\n    if (storage !== null) {\r\n        return JSON.parse(storage) as TeamState;\r\n    }\r\n}\r\n\r\nexport const saveTeamState = (state: TeamState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(TEAM_STATE_STORAGE_KEY, serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\nexport function getProperty<T, K extends keyof T>(obj: T, key: K) {\r\n    return obj[key]; // Inferred type is T[K]\r\n}\r\n\r\nconst initialState: TeamState = loadState() || createDefaultTeamState();\r\n\r\nexport const teamSlice = createSlice({\r\n    name: 'team',\r\n    initialState,\r\n    reducers: {\r\n        saveTeam: (state: TeamState, action: PayloadAction<Team>) => {\r\n            const updatedTeam = action.payload;\r\n            const teamsNumber = state.teams.length;\r\n            const defaultTeamIndex = state.teams.findIndex(team => team.teamId === DEFAULT_NEW_TEAM_ID);\r\n\r\n            if (updatedTeam.teamId === DEFAULT_NEW_TEAM_ID) {\r\n                // ADD team\r\n                const newTeamWithId: Team = { ...updatedTeam, teamId: teamsNumber.toString() }\r\n                state.teams.push(newTeamWithId);\r\n                state.teams[defaultTeamIndex] = createDefaultTeam();\r\n            } else {\r\n                // UPDATE team\r\n                const teamIndex = state.teams.findIndex(team => team.teamId === updatedTeam.teamId);\r\n                if (teamIndex !== -1) {\r\n                    const changesAppliedTeam = applyChanges<Team>(updatedTeam, ChangeType.APPLY)\r\n                    state.teams[teamIndex] = changesAppliedTeam;\r\n                } else {\r\n                    state.teams.push({ ...updatedTeam, changes: [] });\r\n                    state.teams[defaultTeamIndex] = createDefaultTeam();\r\n                }\r\n            }\r\n            state.selectedTeamId = DEFAULT_NEW_TEAM_ID;\r\n            saveTeamState(state);\r\n            redirectTo(TEAMS_PAGE)\r\n        },\r\n        deleteTeam: (state: TeamState, action: PayloadAction<SelectedTeamIdAction>) => {\r\n            const deletableTeamId = action.payload.teamId;\r\n            const teamIndex = state.teams.findIndex(team => team.teamId === deletableTeamId);\r\n            if (teamIndex !== -1) {\r\n                state.teams.splice(teamIndex, 1);\r\n                if (deletableTeamId === state.selectedTeamId) {\r\n                    state.selectedTeamId = DEFAULT_NEW_TEAM_ID;\r\n                }\r\n            }\r\n            saveTeamState(state);\r\n        },\r\n        addPlayer: (state: TeamState, action: PayloadAction<AddPlayerToTeamAction>) => {\r\n            const teamId = action.payload.teamId;\r\n            const newPlayer = action.payload.user;\r\n\r\n            const selectedTeamIndex = state.teams.findIndex(team => team.teamId === teamId);\r\n            if (selectedTeamIndex !== -1) {\r\n                const selectedTeam = state.teams[selectedTeamIndex];\r\n                const playerIndex = selectedTeam.players.findIndex(player => player.account_id === newPlayer.account_id);\r\n\r\n                if (playerIndex === -1) {\r\n                    const initial = [...selectedTeam.players]\r\n                    selectedTeam.players.push(newPlayer)\r\n                    const final = [...selectedTeam.players]\r\n                    if (teamId !== DEFAULT_NEW_TEAM_ID) {\r\n                        selectedTeam.changes.push({\r\n                            key: 'players',\r\n                            initialValue: initial,\r\n                            newValue: final\r\n                        } as Change<Team>)\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        removePlayer: (state: TeamState, action: PayloadAction<RemovePlayerFromTeamAction>) => {\r\n            const teamId = action.payload.teamId;\r\n            const newPlayer = action.payload.user;\r\n\r\n            const selectedTeamIndex = state.teams.findIndex(team => team.teamId === teamId);\r\n            if (selectedTeamIndex !== -1) {\r\n                const selectedTeam = state.teams[selectedTeamIndex];\r\n                const playerIndex = selectedTeam.players.findIndex(player => player.account_id === newPlayer.account_id);\r\n\r\n                if (playerIndex !== -1) {\r\n                    const initial = [...selectedTeam.players];\r\n                    selectedTeam.players.splice(playerIndex, 1);\r\n                    const final = [...selectedTeam.players];\r\n                    if (teamId !== DEFAULT_NEW_TEAM_ID) {\r\n                        selectedTeam.changes.push({\r\n                            key: 'players',\r\n                            initialValue: initial,\r\n                            newValue: final\r\n                        } as Change<Team>)\r\n                    }\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        changeTeamName(state: TeamState, action: PayloadAction<ChangeTeamNameAction>) {\r\n            const teamId = action.payload.teamId;\r\n            const newTeamName = action.payload.teamName;\r\n\r\n            const selectedTeamIndex = state.teams.findIndex(team => team.teamId === teamId);\r\n            if (selectedTeamIndex !== -1) {\r\n                const selectedTeam = state.teams[selectedTeamIndex];\r\n                const initial = new String(selectedTeam.teamName).toString();\r\n                selectedTeam.teamName = newTeamName;\r\n                const final = new String(selectedTeam.teamName).toString();\r\n                if (teamId !== DEFAULT_NEW_TEAM_ID) {\r\n                    selectedTeam.changes.push({\r\n                        key: 'teamName',\r\n                        initialValue: initial,\r\n                        newValue: final\r\n                    } as Change<Team>)\r\n                }\r\n            }\r\n        },\r\n        cancelTeamChanges: (state: TeamState, action: PayloadAction<Team>) => {\r\n            // TODO - is this really needed? if you go to /teams or other page which will GET the old state in case of cancel\r\n            const team = action.payload;\r\n            if (team.teamId === DEFAULT_NEW_TEAM_ID) {\r\n                redirectTo(TEAMS_PAGE);\r\n            }\r\n\r\n            const updatedTeam = applyChanges(team, ChangeType.REVERT);\r\n\r\n            const defaultTeamIndex = state.teams.findIndex(team => team.teamId === DEFAULT_NEW_TEAM_ID);\r\n            const teamIndex = state.teams.findIndex(team => team.teamId === updatedTeam.teamId);\r\n            if (teamIndex !== -1) {\r\n                state.teams[teamIndex] = { ...updatedTeam };\r\n            } else {\r\n                state.teams.push({ ...updatedTeam, changes: [] });\r\n                state.teams[defaultTeamIndex] = createDefaultTeam();\r\n            }\r\n            state.selectedTeamId = DEFAULT_NEW_TEAM_ID;\r\n            saveTeamState(state);\r\n            redirectTo(TEAMS_PAGE)\r\n        },\r\n        changeSelectedTeam: (state: TeamState, action: PayloadAction<string>) => {\r\n            const newSelectedTeamId = action.payload;\r\n            const teamIndex = state.teams.findIndex(team => team.teamId === newSelectedTeamId)\r\n            if (teamIndex !== -1) {\r\n                state.selectedTeamId = newSelectedTeamId;\r\n                const defaultTeamIndex = state.teams.findIndex(team => team.teamId === DEFAULT_NEW_TEAM_ID);\r\n                state.teams[defaultTeamIndex] = createDefaultTeam()\r\n            }\r\n            saveTeamState(state);\r\n        },\r\n\r\n    }\r\n});\r\n\r\n// EXPORT ACTIONS\r\nexport const { addPlayer, removePlayer, deleteTeam, changeTeamName, cancelTeamChanges, changeSelectedTeam, saveTeam } = teamSlice.actions;\r\n\r\n// EXPORT SELECTORS - TODO replace duplicate selections across features\r\nexport const selectedTeamIdSelector = (state: RootState) => {\r\n    return state.teamState.selectedTeamId ?? DEFAULT_NEW_TEAM_ID\r\n}\r\nexport const selectedTeamSelector = (state: RootState) => {\r\n    return state.teamState.teams.find(team => team.teamId === state.teamState.selectedTeamId) ?? createDefaultTeam();\r\n}\r\n\r\nexport const teamsSelector = (state: RootState) => {\r\n    return state.teamState.teams ?? [] as Team[];\r\n}\r\n\r\n// EXPORT REDUCER\r\nexport default teamSlice.reducer;\r\n\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\store.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\index.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\counterSlice.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\filterSlice.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\clanSlice.ts",["358","359","360","361","362","363","364","365","366","367"],"import {\r\n    createAsyncThunk,\r\n    createSelector,\r\n    createSlice,\r\n    PayloadAction\r\n} from '@reduxjs/toolkit';\r\nimport { FetchStatus, RootState } from '.';\r\nimport APPLICATION_ID from '../api/config';\r\nimport { ClanDetails, User, Vehicle } from '../screens/vehicles/types';\r\nimport { buildParamStr } from '../utils/url/urlUtils';\r\n\r\nconst CLAN_DETAILS_API = \"https://api.worldoftanks.eu/wot/clans/info/\"\r\nconst CLAN_LIST_API = \"https://api.worldoftanks.eu/wot/clans/list/\"\r\nconst PHONENIX_CLAN_ID = 500061648;\r\n\r\nexport interface ClanInSearch {\r\n    clanId: number,\r\n    provinceIds: string[],\r\n    clanDetails: ClanDetails,\r\n    clanDetailsFetchErrors: boolean,\r\n    clanDetailsFetchStatus: FetchStatus,\r\n}\r\n\r\ninterface ClanState {\r\n    clanDetailsFetchStatus: FetchStatus,\r\n    clanDetailsFetchErrors: boolean,\r\n    clanDetails: ClanDetails,\r\n    clansInSearch: ClanInSearch[]\r\n    clanList: any[],\r\n    clanListFetchErrors: boolean,\r\n    clanListFetchStatus: FetchStatus\r\n}\r\n\r\n\r\nconst initialState: ClanState = {\r\n    clanDetailsFetchStatus: 'idle',\r\n    clanDetailsFetchErrors: false,\r\n    clanDetails: ({} as any) as ClanDetails,\r\n    clansInSearch: [],\r\n    clanList: [],\r\n    clanListFetchErrors: false,\r\n    clanListFetchStatus: 'idle'\r\n}\r\n\r\nconst buildClansQueryUrl: (url: string, params: any) => string = (url, params: any) => {\r\n    const queryParamStr = buildParamStr(params);\r\n    return `${url}?application_id=${APPLICATION_ID}&${queryParamStr}`;\r\n}\r\n\r\nconst phoenixUrl = buildClansQueryUrl(CLAN_DETAILS_API, { clan_id: PHONENIX_CLAN_ID })\r\nconst clanListUrl = buildClansQueryUrl(CLAN_LIST_API, {})\r\n\r\nexport const fetchPhoenixClanDetailsThunk = createAsyncThunk('clanDetails/fetchClanDetails', async () => {\r\n    const response: Response = await fetch(phoenixUrl);\r\n    const json = await response.json();\r\n    return json.data[PHONENIX_CLAN_ID];\r\n})\r\n\r\nexport const fetchClanListThunk = createAsyncThunk('clanList/fetchClanList', async () => {\r\n    const response: Response = await fetch(clanListUrl);\r\n    const json = await response.json();\r\n    return json.data[PHONENIX_CLAN_ID];\r\n})\r\n\r\nexport const fetchClanDetailsThunk = createAsyncThunk(\r\n    'clanDetails/fetchClanDetailsById',\r\n    async (clanId: number) => {\r\n        const response: Response = await fetch(buildClansQueryUrl(CLAN_DETAILS_API, { clan_id: clanId }));\r\n        const json = await response.json();\r\n        return json.data[clanId];\r\n    }\r\n)\r\n\r\nexport const clanSlice = createSlice({\r\n    name: 'clan',\r\n    initialState,\r\n    reducers: {\r\n        addClanInSearch: (state, action: PayloadAction<ClanInSearch>) => {\r\n            const clanInSearch = action.payload;\r\n            state.clansInSearch.push({ ...clanInSearch })\r\n        },\r\n        addProvinceToClanInSearch: (state, action: PayloadAction<{ provinceId: string, clanId: number }>) => {\r\n            const { provinceId, clanId } = action.payload\r\n            const clanIndex = state.clansInSearch.findIndex(clanInSearch => clanInSearch.clanId === clanId)\r\n            state.clansInSearch[clanIndex].provinceIds.push(provinceId)\r\n        }\r\n    },\r\n    extraReducers: {\r\n        ['clanDetails/fetchClanDetails/fulfilled']: (state, action: PayloadAction<ClanDetails>) => {\r\n            state.clanDetails = action.payload;\r\n            state.clanDetailsFetchStatus = 'succeeded';\r\n            state.clanDetailsFetchErrors = false;\r\n        },\r\n        ['clanDetails/fetchClanDetails/rejected']: (state, action) => {\r\n            state.clanDetailsFetchStatus = 'failed'\r\n            state.clanDetailsFetchErrors = true\r\n        },\r\n        ['clanDetails/fetchClanDetails/pending']: (state, action) => {\r\n            state.clanDetailsFetchStatus = 'loading';\r\n        },\r\n        ['clanDetails/fetchClanDetailsById/rejected']: (state, action) => {\r\n            const clanInSearchIndex = state.clansInSearch.findIndex(clanInSearch => clanInSearch.clanId === action.payload.clan_id)\r\n            state.clansInSearch[clanInSearchIndex].clanDetailsFetchStatus = 'failed'\r\n            state.clansInSearch[clanInSearchIndex].clanDetailsFetchErrors = true\r\n        },\r\n        ['clanDetails/fetchClanDetailsById/pending']: (state, action) => {\r\n            const clanInSearchIndex = state.clansInSearch.findIndex(clanInSearch => clanInSearch.clanId === action.payload.clan_id)\r\n            state.clansInSearch[clanInSearchIndex].clanDetailsFetchStatus = 'loading'\r\n        },\r\n        ['clanDetails/fetchClanDetailsById/fulfilled']: (state, action: PayloadAction<ClanDetails>) => {\r\n            const clanInSearchIndex = state.clansInSearch.findIndex(clanInSearch => clanInSearch.clanId === action.payload.clan_id)\r\n            state.clansInSearch[clanInSearchIndex].clanDetailsFetchStatus = 'succeeded'\r\n            state.clansInSearch[clanInSearchIndex].clanDetailsFetchErrors = false\r\n            state.clansInSearch[clanInSearchIndex].clanDetails = { ...action.payload }\r\n        },\r\n        ['clanList/fetchClanList/fulfilled']: (state, action) => {\r\n            state.clanListFetchStatus = 'succeeded'\r\n            const payload = action.payload;\r\n            state.clanList = payload;\r\n        },\r\n        ['clanList/fetchClanList/rejected']: (state, action) => {\r\n            state.clanListFetchStatus = 'failed'\r\n            state.clanListFetchErrors = true;\r\n        },\r\n        ['clanList/fetchClanList/pending']: (state, action) => {\r\n            state.clanListFetchStatus = 'loading'\r\n        },\r\n    }\r\n});\r\n\r\nexport const clanStateSelector = (state: RootState) => state.clanState;\r\nexport const clanDetailsSelector = (state: RootState) => state.clanState.clanDetails;\r\n\r\nexport const clanDetailsFetchSelector = createSelector(\r\n    [clanStateSelector],\r\n    (clanState) => {\r\n        return {\r\n            clanDetailsFetchStatus: clanState.clanDetailsFetchStatus,\r\n            clanDetailsFetchErrors: clanState.clanDetailsFetchErrors,\r\n            clanDetails: clanState.clanDetails\r\n        }\r\n    }\r\n)\r\n\r\nexport const clanListFetchSelector = createSelector(\r\n    [clanStateSelector],\r\n    (clanState) => {\r\n        return {\r\n            clanListFetchStatus: clanState.clanListFetchStatus,\r\n            clanListFetchErrors: clanState.clanListFetchErrors,\r\n            clanList: clanState.clanList,\r\n            clansInSearch: clanState.clansInSearch,\r\n        }\r\n    }\r\n)\r\n\r\nexport const clanMembersSelector = createSelector(\r\n    [clanStateSelector],\r\n    (clanState) => {\r\n        return {\r\n            clanMembers: clanState.clanDetails.members ?? [] as User[]\r\n        }\r\n    }\r\n\r\n)\r\n\r\nexport const { addClanInSearch, addProvinceToClanInSearch } = clanSlice.actions\r\n\r\nexport default clanSlice.reducer;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\utils\\url\\urlUtils.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\tournamentSlice.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\events.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\client.ts",["368"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\AddTournament.tsx",["369","370","371","372"],"import { Button } from '@material-ui/core';\r\nimport React, { useCallback, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n    addTournament,\r\n    changeTournamentBattleFormat,\r\n    changeTournamentDescription,\r\n    changeTournamentNumberOfPlayers,\r\n    changeTournamentTotalPrize,\r\n    createDefaultTournament,\r\n    Tournament,\r\n} from '../../slices/tournamentSlice';\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { EventEmitter, Events } from '../../slices/events';\r\nimport { RootState } from '../../slices';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst AddTournament = () => {\r\n    const dispatch = useDispatch()\r\n    const { tournamentState, tournamentListLength } = useSelector(\r\n        (state: RootState) => {\r\n            return {\r\n                tournamentState: state.tournamentState,\r\n                tournamentListLength: state.tournamentState.tournamentList.length\r\n            }\r\n        }\r\n    )\r\n    const defaultTournament = createDefaultTournament(tournamentListLength)\r\n    const [tournament, setTournament] = useState(defaultTournament);\r\n    const history = useHistory();\r\n\r\n    const onPlayersNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const intValue = +event.currentTarget.value;\r\n        const value = isNaN(intValue) ? 0 : intValue;\r\n        const updatedTournament = { ...tournament, numberOfPlayers: isNaN(value) ? 0 : value }\r\n        setTournament(updatedTournament)\r\n        dispatch(\r\n            changeTournamentNumberOfPlayers({ id: tournament.id, numberOfPlayers: value })\r\n        )\r\n    }\r\n\r\n    const onTotalPrizeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const intValue = +event.currentTarget.value;\r\n        const value = isNaN(intValue) ? 0 : intValue;\r\n        const updatedTournament = { ...tournament, totalPrize: value }\r\n        setTournament(updatedTournament);\r\n        // next should be only for edit flow or not at all?\r\n        dispatch(\r\n            changeTournamentTotalPrize({ id: tournament.id, totalPrize: value })\r\n        )\r\n    }\r\n\r\n    const onDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.currentTarget.value;\r\n        const updatedTournament = { ...tournament, description: value }\r\n        setTournament(updatedTournament);\r\n        // next should be only for edit flow or not at all?\r\n        dispatch(\r\n            changeTournamentDescription({ id: tournament.id, description: value })\r\n        )\r\n    }\r\n\r\n    const onBattleFormatChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.currentTarget.value;\r\n        const updatedTournament = { ...tournament, battleFormat: value }\r\n        setTournament(updatedTournament);\r\n        // next should be only for edit flow or not at all?\r\n        dispatch(\r\n            changeTournamentBattleFormat({ id: tournament.id, battleFormat: value })\r\n        )\r\n    }\r\n\r\n    // EventEmitter.subscribe(\r\n    //     Events.DESCRIPTION_CHANGED,\r\n    //     (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    //         const value = event.currentTarget.value;\r\n    //         const updatedTournament = { ...tournament, description: value }\r\n    //         setTournament(updatedTournament);\r\n    //         dispatch(\r\n    //             changeTournamentDescription({ id: tournament.id, description: value })\r\n    //         )\r\n    //     }\r\n    // )\r\n    // EventEmitter.subscribe(\r\n    //     Events.BATTLE_FORMAT_CHANGED,\r\n    //     (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    //         const value = event.currentTarget.value;\r\n    //         const updatedTournament = { ...tournament, battleFormat: value }\r\n    //         setTournament(updatedTournament);\r\n    //         dispatch(\r\n    //             changeTournamentBattleFormat({ id: tournament.id, battleFormat: value })\r\n    //         )\r\n    //     }\r\n    // )\r\n    // EventEmitter.subscribe(\r\n    //     Events.TOTAL_PRIZE_CHANGED,\r\n    //     (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    //         const intValue = +event.currentTarget.value;\r\n    //         const value = isNaN(intValue) ? 0 : intValue;\r\n    //         const updatedTournament = { ...tournament, totalPrize: value }\r\n    //         setTournament(updatedTournament);\r\n    //         dispatch(\r\n    //             changeTournamentTotalPrize({ id: tournament.id, totalPrize: value })\r\n    //         )\r\n    //     }\r\n    // )\r\n    // EventEmitter.subscribe(\r\n    //     Events.NUMBER_OF_PLAYERS_CHANGED,\r\n    //     (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    //         const intValue = +event.currentTarget.value;\r\n    //         const value = isNaN(intValue) ? 0 : intValue;\r\n    //         const updatedTournament = { ...tournament, numberOfPlayers: isNaN(value) ? 0 : value }\r\n    //         setTournament(updatedTournament)\r\n    //         dispatch(\r\n    //             changeTournamentNumberOfPlayers({ id: tournament.id, numberOfPlayers: value })\r\n    //         )\r\n    //     }\r\n    // )\r\n\r\n    const isFormValid: () => boolean = () => {\r\n        return Boolean(tournament.battleFormat) &&\r\n            Boolean(tournament.description) &&\r\n            tournament.numberOfPlayers > 0 &&\r\n            tournament.totalPrize > 0;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={\r\n                useCallback(() => history.push('/tournaments'), [history])\r\n            }>\r\n                Go to Tournament List\r\n            </Button>\r\n            <form onSubmit={ev => {\r\n                ev.preventDefault();\r\n            }}\r\n            >\r\n                <input\r\n                    style={{ width: 450 }}\r\n                    type=\"text\"\r\n                    placeholder=\"description\"\r\n                    value={tournament.description}\r\n                    onChange={(event) => onDescriptionChange(event)}\r\n                />\r\n                <input\r\n                    style={{ width: 450 }}\r\n                    type=\"text\"\r\n                    placeholder=\"Enter new item\"\r\n                    value={tournament.battleFormat}\r\n                    onChange={(event) => onBattleFormatChange(event)}\r\n                />\r\n                <input\r\n                    style={{ width: 450 }}\r\n                    type=\"text\"\r\n                    placeholder=\"Enter new item\"\r\n                    value={tournament.totalPrize}\r\n                    onChange={(event) => onTotalPrizeChange(event)}\r\n                />\r\n                <input\r\n                    style={{ width: 450 }}\r\n                    type=\"text\"\r\n                    placeholder=\"Enter new item\"\r\n                    value={tournament.numberOfPlayers}\r\n                    onChange={(event) => onPlayersNumberChange(event)\r\n                        // EventEmitter.dispatch(Events.NUMBER_OF_PLAYERS_CHANGED, event)\r\n                    }\r\n                />\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={(event) => {\r\n                        try {\r\n                            dispatch(addTournament(tournament))\r\n                            // setTournament(createDefaultTournament())\r\n                            history.push('/tournaments');\r\n                        } catch (e) {\r\n                            console.error(e)\r\n                        }\r\n                    }}\r\n                    disabled={!isFormValid()}\r\n                >\r\n                    <AddIcon />\r\n                </Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AddTournament;\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\Clan.tsx",["373","374","375"],"import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport React, { memo, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { clanDetailsFetchSelector, fetchClanDetailsThunk, fetchPhoenixClanDetailsThunk } from '../../slices/clanSlice';\r\nimport { addPlayerTankStatistics, fetchTankStatisticsByPlayerThunk, PlayerTankStatistics, playerTankStatisticsSelector } from '../../slices/tankStastisticsSlice';\r\nimport { TankStatistics, User } from '../vehicles/types';\r\nimport ClanMember from './ClanMember';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        content: {\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            flexWrap: \"wrap\",\r\n            justifyContent: \"space-around\"\r\n        }\r\n    })\r\n);\r\n\r\nconst Clan = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const { clanDetails, clanDetailsFetchErrors, clanDetailsFetchStatus } = useSelector(clanDetailsFetchSelector);\r\n    const playerTankStatistics = useSelector(playerTankStatisticsSelector)\r\n    const clanMembers: User[] = clanDetails.members;\r\n\r\n    useEffect(() => {\r\n        if (clanDetailsFetchStatus === 'idle') {\r\n            dispatch(fetchPhoenixClanDetailsThunk())\r\n        }\r\n    }, [dispatch, clanDetailsFetchStatus])\r\n\r\n\r\n    useEffect(() => {\r\n        const playersAlreadyInSearch = playerTankStatistics.map(playerTankStatistic => playerTankStatistic.player.account_id)\r\n        clanMembers?.forEach(clanMember => {\r\n            const existingPlayerIndex = playersAlreadyInSearch.findIndex(player => player === clanMember.account_id)\r\n\r\n            if (existingPlayerIndex !== -1) {\r\n                return;\r\n            }\r\n\r\n            dispatch(addPlayerTankStatistics({\r\n                player: clanMember,\r\n                tankStatisticsFetchStatus: 'idle',\r\n                tankStatisticsFetchError: false,\r\n            } as PlayerTankStatistics))\r\n        })\r\n    }, [dispatch, playerTankStatistics, clanMembers])\r\n\r\n    const renderClanMembers = () => {\r\n        switch (clanDetailsFetchStatus) {\r\n            case \"idle\":\r\n                return <div></div>;\r\n            case \"loading\":\r\n                return <p>Loading clan members ...</p>;\r\n            case \"succeeded\":\r\n                return clanMembers.map(clanMember => <ClanMember key={clanMember.account_id} {...clanMember} />);\r\n            case \"failed\":\r\n                console.error({ clanDetailsFetchErrors })\r\n                return <p>Could not connect server to get info</p>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h1>Clan Details</h1>\r\n            <div className={classes.content}>\r\n                {renderClanMembers()}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default memo(Clan);","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\TournamentSection.tsx",["376","377","378"],"import { Button } from '@material-ui/core';\r\nimport * as React from 'react';\r\nimport { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\nimport TournamentList from './TournamentList';\r\n\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const handleOnClick = useCallback(() => history.push('/add-tournament'), [history]);\r\n    // const handleOnClick = () => history.push('/sample');\r\n    return (\r\n        <section>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleOnClick}>\r\n                {/* <Redirect to={{\r\n                    pathname: '/history',\r\n                    state: { id: '123' }\r\n                }} />*/}\r\n                Add tournaments\r\n            </Button>\r\n            <TournamentList />\r\n        </section >\r\n    )\r\n};\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\TeamForm.tsx",["379","380"],"import { FormGroup, FormControl, TextField, createStyles, makeStyles, Theme, Button } from '@material-ui/core';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { cancelTeamChanges, changeSelectedTeam, changeTeamName, DEFAULT_NEW_TEAM_ID, saveTeam, selectedTeamSelector, Team } from '../../slices/teamSlice';\r\nimport AddPlayer from './components/AddPlayer';\r\nimport PlayerList from './components/PlayerList';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        teamName: {\r\n\r\n        }\r\n    }),\r\n);\r\n\r\n\r\nconst TeamForm = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const params = useParams<{ teamId: string }>();\r\n    const teamId = params.teamId === \"add\" ? DEFAULT_NEW_TEAM_ID : params.teamId; // TODO - to be refactored in the future\r\n    const editMode = teamId !== DEFAULT_NEW_TEAM_ID;\r\n    const team: Team = useSelector(selectedTeamSelector);\r\n    const [teamName, setTeamName] = useState(team.teamName);\r\n\r\n    const onChangeTeamName = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        const teamName = event.target.value;\r\n        dispatch(changeTeamName({ teamId: teamId, teamName }))\r\n    }\r\n\r\n    const onClickCancelEdit = useCallback(() => {\r\n        dispatch(cancelTeamChanges(team))\r\n        dispatch(changeSelectedTeam(DEFAULT_NEW_TEAM_ID));\r\n        history.push('/teams');\r\n    }, [history, team])\r\n\r\n    useEffect(() => {\r\n        if (team == null) {\r\n            setTeamName(\"\")\r\n        } else {\r\n            setTeamName(team.teamName);\r\n        }\r\n    }, [team])\r\n\r\n    const onSaveTeam = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        dispatch(saveTeam(team))\r\n        history.push('/teams');\r\n    }\r\n\r\n    const isSaveTeamButtonEnabled = () => {\r\n        const editMode = team.teamId !== DEFAULT_NEW_TEAM_ID\r\n        const teamIsValid = team.players.length === 3 && !!team.teamName;\r\n        return editMode ? (teamIsValid && team.changes.length > 0) : teamIsValid;\r\n    }\r\n\r\n    return <div>\r\n        <FormGroup>\r\n            <FormControl className={classes.teamName}>\r\n                <TextField\r\n                    required\r\n                    label=\"Team Name\"\r\n                    value={teamName}\r\n                    onChange={(event) => onChangeTeamName(event)}\r\n                />\r\n            </FormControl>\r\n        </FormGroup>\r\n        <p>Add players</p>\r\n        <AddPlayer />\r\n        <hr />\r\n        <p>Player List</p>\r\n        <PlayerList />\r\n        <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={event => onSaveTeam(event)}\r\n            disabled={!isSaveTeamButtonEnabled()}\r\n        >\r\n            SAVE TEAM\r\n        </Button>\r\n        <Button\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            onClick={onClickCancelEdit}\r\n        >\r\n            Cancel\r\n        </Button>\r\n    </div>\r\n}\r\n\r\nexport default TeamForm;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\Teams.tsx",["381","382","383","384","385","386","387","388","389"],"import { makeStyles, Theme, createStyles, Button } from '@material-ui/core';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BrowserRouter, Route, Switch, useHistory, useParams, useRouteMatch } from 'react-router-dom';\r\nimport { changeSelectedTeam, DEFAULT_NEW_TEAM_ID, teamsSelector } from '../../../slices/teamSlice';\r\nimport TeamForm from '../TeamForm';\r\nimport TeamCard from './TeamCard';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        mainSection: {\r\n            padding: '1rem',\r\n            display: 'flex',\r\n            alignItems: 'flex-start',\r\n            justifyContent: 'space-between'\r\n        },\r\n        teams: {\r\n            display: 'flex'\r\n        }\r\n    }),\r\n);\r\n\r\nconst Teams = () => {\r\n    const dispatch = useDispatch();\r\n    const teams = useSelector(teamsSelector);\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const onAddTeam = useCallback(() => {\r\n        dispatch(changeSelectedTeam(DEFAULT_NEW_TEAM_ID))\r\n        history.push('/teams/add')\r\n    }, [history])\r\n\r\n\r\n    const renderTeams = useCallback(() => {\r\n        if (teams.length > 1) {\r\n            return teams.map(team => {\r\n                if (team.teamId === DEFAULT_NEW_TEAM_ID) {\r\n                    return;\r\n                }\r\n                return <TeamCard key={team.teamId} {...team} />\r\n            })\r\n        }\r\n    }, [teams])\r\n\r\n    return <section className={classes.mainSection}>\r\n        <div className={classes.teams}>\r\n            {renderTeams()}\r\n        </div>\r\n        <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={onAddTeam}\r\n        >\r\n            Add Team\r\n            </Button>\r\n    </section>\r\n}\r\n\r\nexport default Teams; \r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\AddTactic.tsx",["390","391","392","393","394"],"import { Button, createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport React, { useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { cancelTacticChanges, DEFAULT_NEW_TACTIC_ID, saveTactic, selectedTacticSelector } from '../store/tacticsSlice';\r\nimport { Tactic } from '../../../store/types/interfaces/TacticMetadata.interface';\r\nimport TacticMetadataForm from './tactic-metadata/TacticMetadataForm';\r\nimport TacticRoleForm from './tactic-role/TacticRoleForm';\r\nimport TacticRoles from './tactic-role/TacticRoles';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport InteractiveMap from './interactive-map/InteractiveMap';\r\n\r\nconst AddTactic = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const params = useParams<{ tacticId: string }>();\r\n    const tactic: Tactic = useSelector(selectedTacticSelector);\r\n\r\n    // TODO - use tacticId to dispactch change of the selected tactic\r\n    const tacticId = params.tacticId === \"add\" ? DEFAULT_NEW_TACTIC_ID : params.tacticId; // TODO - to be refactored in the future\r\n    \r\n\r\n    const onClickAddTactic = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        dispatch(saveTactic(tactic))\r\n    }, [dispatch, tactic])\r\n\r\n    const onClickCancelEdit = useCallback(() => {\r\n        dispatch(cancelTacticChanges(tactic))\r\n        history.push('/tactics');\r\n    }, [dispatch, history, tactic])\r\n\r\n    const isFormValid: () => boolean = () => {\r\n        return true\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* <InteractiveMap /> */}\r\n            <TacticMetadataForm />\r\n            <TacticRoleForm />\r\n            <hr />\r\n            <DndProvider backend={HTML5Backend}>\r\n                <TacticRoles />\r\n            </DndProvider>\r\n            <hr />\r\n\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={onClickAddTactic}\r\n                disabled={!isFormValid()}\r\n            >\r\n                Save Tactic\r\n            </Button>\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                onClick={onClickCancelEdit}\r\n                disabled={!isFormValid()}\r\n            >\r\n                Cancel\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddTactic;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\ClanMember.tsx",["395"],"import {\r\n    makeStyles,\r\n    Theme,\r\n    createStyles,\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    CardActions,\r\n} from '@material-ui/core';\r\nimport React, { useCallback } from 'react';\r\nimport { User } from '../vehicles/types';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { fetchTankStatisticsByPlayerThunk } from '../../slices/tankStastisticsSlice';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        card: {\r\n            // maxWidth: \"max-content\",\r\n            margin: \"8px\"\r\n        },\r\n        expand: {\r\n            transform: 'rotate(0deg)',\r\n            marginLeft: 'auto',\r\n            transition: theme.transitions.create('transform', {\r\n                duration: theme.transitions.duration.shortest,\r\n            }),\r\n        },\r\n        expandOpen: {\r\n            transform: 'rotate(180deg)',\r\n        },\r\n    })\r\n);\r\n\r\nconst ClanMember = (user: User) => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const onDetailsClick = useCallback(() => {\r\n        // TODO - check FetchStatus before doing a re-call maybe\r\n        dispatch(fetchTankStatisticsByPlayerThunk({ account_id: +user.account_id }))\r\n        history.push(`/tank-statistics/${user.account_id}`)\r\n    }, [dispatch, history, user]);\r\n\r\n    return (\r\n        <Card className={classes.card} onClick={onDetailsClick}>\r\n            <CardContent>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    id: {user.account_id}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    name: {user.account_name}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    role: {user.role}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <IconButton\r\n                    onClick={onDetailsClick}\r\n                >\r\n                    <ExpandMoreIcon />\r\n                </IconButton>\r\n            </CardActions>\r\n        </Card >\r\n    )\r\n}\r\n\r\nexport default ClanMember;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\TournamentList.tsx",["396","397"],"import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RootState } from \"../../slices\";\r\nimport { removeTournament, selectTournaments } from '../../slices/tournamentSlice';\r\nimport Tournament from './Tournament';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        tournaments: {\r\n\r\n        },\r\n        tournamentsContainer: {\r\n            border: '1px solid green',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            marginTop: '5%',\r\n        },\r\n    }),\r\n);\r\n\r\nconst TournamentList = () => {\r\n    const { tournamentList } = useSelector(\r\n        (state: RootState) => state.tournamentState\r\n    )\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const editTournament = useCallback(\r\n        (tournament) => history.push('/edit-tournament', { state: tournament }),\r\n        [history]\r\n    )\r\n\r\n    return (\r\n        <div className={classes.tournaments}>\r\n            {/* <span>{tournamentList.length} Tournaments</span> */}\r\n            <div className={classes.tournamentsContainer}>\r\n                {tournamentList.map((tournament, key) => (\r\n                    <Tournament key={key}\r\n                        {...tournament}\r\n                        onRemoveClick={() => removeTournament(tournament)}\r\n                        onEditClick={() => editTournament(tournament)}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TournamentList;\r\n\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\PlayerList.tsx",["398","399","400","401","402","403","404"],"import React from 'react';\r\nimport Player from './Player';\r\nimport { RootState } from '../../../slices';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { makeStyles, Theme, createStyles, Button } from '@material-ui/core';\r\nimport { DEFAULT_NEW_TEAM_NAME, saveTeam, selectedTeamIdSelector, selectedTeamSelector } from '../../../slices/teamSlice';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        playerList: {\r\n            display: 'flex',\r\n            flexDirection: 'column'\r\n        },\r\n    }),\r\n);\r\n\r\nconst PlayerList = () => {\r\n    const classes = useStyles();\r\n    \r\n    const selectedTeamId = useSelector(selectedTeamIdSelector)\r\n    const team = useSelector(selectedTeamSelector)\r\n    \r\n    const players = team?.players ?? []; // ?\r\n\r\n    return <div className={classes.playerList}>\r\n        <span>{players.length} players selected</span>\r\n        {players.map(player => (\r\n            <Player key={player.account_id} teamId={team.teamId} user={player} />\r\n        ))}\r\n    </div>\r\n}\r\n\r\nexport default PlayerList;\r\n\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\AddPlayer.tsx",["405","406"],"import {\r\n    Button,\r\n    createStyles,\r\n    FormControl,\r\n    InputLabel,\r\n    makeStyles,\r\n    MenuItem,\r\n    Select,\r\n    Theme\r\n} from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { FormGroup } from '@material-ui/core';\r\nimport { clanDetailsFetchSelector, fetchClanDetailsThunk, fetchPhoenixClanDetailsThunk } from '../../../slices/clanSlice';\r\nimport { User } from '../../vehicles/types';\r\nimport {\r\n    createDefaultUser,\r\n    addPlayer,\r\n    AddPlayerToTeamAction,\r\n    selectedTeamIdSelector\r\n} from '../../../slices/teamSlice';\r\n\r\n\r\n// TODO - this is duplicate with AddTactic.tsx styles, extract\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n);\r\n\r\nconst AddPlayer = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const defaultUser = createDefaultUser()\r\n    const [player, setPlayer] = useState(defaultUser);\r\n\r\n    const { clanDetails, clanDetailsFetchErrors, clanDetailsFetchStatus } = useSelector(clanDetailsFetchSelector);\r\n    const selectedTeamId = useSelector(selectedTeamIdSelector);\r\n\r\n    const onChangePlayer = (event: any) => {\r\n        const playerId = event.target.value;\r\n        const playerIndex = clanDetails.members.findIndex(clanMember => clanMember.account_id === playerId)\r\n        const updatedPlayer = clanDetails.members[playerIndex];\r\n        setPlayer(updatedPlayer);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (clanDetailsFetchStatus === 'idle') {\r\n            dispatch(fetchPhoenixClanDetailsThunk())\r\n        }\r\n    }, [clanDetailsFetchStatus])\r\n\r\n    const onAddPlayer = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        dispatch(addPlayer({ teamId: selectedTeamId, user: player } as AddPlayerToTeamAction));\r\n        setPlayer(defaultUser);\r\n    }\r\n\r\n    const buildPlayerList = () => {\r\n        switch (clanDetailsFetchStatus) {\r\n            case \"idle\":\r\n                return <MenuItem key=''></MenuItem>;\r\n            case \"loading\":\r\n                return <MenuItem key=''></MenuItem>;\r\n            case \"succeeded\":\r\n                const members = clanDetails.members;\r\n                return members.map((clanMember: User) => {\r\n                    return <MenuItem key={clanMember.account_id} value={clanMember.account_id}>\r\n                        {clanMember.account_name}\r\n                    </MenuItem>\r\n                });\r\n            case \"failed\":\r\n                console.error({ clanDetailsFetchErrors })\r\n                return <p>Could not connect server to get info</p>\r\n        }\r\n    }\r\n\r\n    const buildFormControls = () => {\r\n        return (\r\n            <FormGroup>\r\n                <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"player-form-control\">Player</InputLabel>\r\n                    <Select\r\n                        labelId=\"player-form-control\"\r\n                        id=\"player-select\"\r\n                        value={player.account_id}\r\n                        onChange={event => onChangePlayer(event)}\r\n                    >\r\n                        {buildPlayerList()}\r\n                    </Select>\r\n                </FormControl>\r\n            </FormGroup>\r\n\r\n        )\r\n    }\r\n\r\n    const isAddPlayerButtonEnabled = () => {\r\n        return !!player.account_id\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {buildFormControls()}\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={onAddPlayer}\r\n                disabled={!isAddPlayerButtonEnabled()}\r\n            >\r\n                <AddIcon />\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AddPlayer;\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\TeamCard.tsx",["407","408"],"import {\r\n    makeStyles,\r\n    Theme,\r\n    createStyles,\r\n    Card,\r\n    CardHeader,\r\n    Avatar,\r\n    CardMedia,\r\n    CardContent,\r\n    Typography,\r\n    CardActions,\r\n    Button\r\n} from '@material-ui/core';\r\nimport { red } from '@material-ui/core/colors';\r\nimport React, { useCallback } from 'react';\r\nimport { changeSelectedTeam, deleteTeam, Team } from '../../../slices/teamSlice';\r\n\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            maxWidth: 345,\r\n        },\r\n        media: {\r\n            height: 0,\r\n            paddingTop: \"56.25%\" // 16:9\r\n        },\r\n        avatar: {\r\n            backgroundColor: red[500]\r\n        }\r\n    })\r\n);\r\n\r\nconst TeamCard = (team: Team) => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const onRemoveClick = useCallback(() => {\r\n        dispatch(deleteTeam(team))\r\n    }, [team]);\r\n\r\n    const onEditClick = useCallback(() => {\r\n        dispatch(changeSelectedTeam(team.teamId))\r\n        history.push(`/teams/${team.teamId}`)\r\n    }, [team]);\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                avatar={<Avatar aria-label=\"creator\" className={classes.avatar} />}\r\n                title={team.teamName}\r\n                subheader=\"\"\r\n            />\r\n            <CardMedia\r\n                className={classes.media}\r\n                image=\"/static/images/cards/paella.jpg\"\r\n                title=\"Paella dish\"\r\n            />\r\n            <CardContent>\r\n                {team.players.length > 0 && team.players.map(player =>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {player.account_name}\r\n                    </Typography>)}\r\n            </CardContent>\r\n            <CardActions disableSpacing>\r\n                <Button variant=\"outlined\" color=\"secondary\" onClick={onEditClick}>\r\n                    <EditIcon />\r\n                </Button>\r\n                <Button variant=\"outlined\" color=\"secondary\" onClick={onRemoveClick}>\r\n                    <RemoveIcon />\r\n                </Button>\r\n            </CardActions>\r\n        </Card >\r\n    );\r\n}\r\n\r\n\r\nexport default TeamCard;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-metadata\\TacticMetadataForm.tsx",["409","410","411","412"],"import {\r\n    makeStyles,\r\n    Theme,\r\n    createStyles,\r\n    FormGroup,\r\n    FormControl,\r\n    TextField,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    Button\r\n} from '@material-ui/core';\r\nimport React, { useCallback, useContext, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    allMapsSelector,\r\n    changeTacticBaseNumber,\r\n    changeTacticMapName,\r\n    changeTacticReference,\r\n    ChangeTacticReferenceAction,\r\n    saveTacticMetadata,\r\n    selectedTacticIdSelector,\r\n    selectedTacticMetadataSelector\r\n} from '../../store/tacticsSlice';\r\nimport { MapBaseNumber } from '../../../../store/types/enums/MapBaseNumber.enum';\r\nimport { WoTMap } from '../../../../store/types/interfaces/WoTMap.interface';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formGroup: {\r\n            // display: \"flex\",\r\n            flexDirection: \"row\"\r\n        },\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n    }),\r\n);\r\n\r\n\r\nconst TacticMetadataForm = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const maps = useSelector(allMapsSelector);\r\n    const selectedTacticId = useSelector(selectedTacticIdSelector);\r\n    const tacticMetadata = useSelector(selectedTacticMetadataSelector);\r\n\r\n    const buildBaseNumberOptions = () => {\r\n        return Object.keys(MapBaseNumber).map(baseNumberKey =>\r\n            <MenuItem key={baseNumberKey} value={baseNumberKey}>\r\n                {MapBaseNumber[baseNumberKey as MapBaseNumber]}\r\n            </MenuItem>\r\n        )\r\n    }\r\n\r\n    const buildMapList = () => {\r\n        return maps.map((map: WoTMap) => {\r\n            return <MenuItem key={map.arena_id} value={map.name_i18n}>\r\n                {map.name_i18n}\r\n            </MenuItem>\r\n        })\r\n    }\r\n\r\n    const isFormValid = () => {\r\n        return Boolean(tacticMetadata.baseNumber) && Boolean(tacticMetadata.tacticReference) && Boolean(tacticMetadata.mapName)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!!selectedTacticId) {\r\n        }\r\n        if (!!tacticMetadata) {\r\n        }\r\n    }, [tacticMetadata, selectedTacticId])\r\n\r\n\r\n    const onChangeMapName = useCallback((event: React.ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        const mapName = event.target.value as string;\r\n        dispatch(changeTacticMapName({ mapName }))\r\n    }, [dispatch, tacticMetadata])\r\n\r\n    const onChangeTacticReference = useCallback((event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const tacticReference = event.target.value as string;\r\n        dispatch(changeTacticReference({ tacticReference } as ChangeTacticReferenceAction))\r\n    }, [dispatch, tacticMetadata])\r\n\r\n    const onChangeBaseNumber = useCallback((event: React.ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        const baseNumber = MapBaseNumber[event.target.value as MapBaseNumber];\r\n        dispatch(changeTacticBaseNumber({ baseNumber }))\r\n    }, [dispatch, tacticMetadata])\r\n\r\n    const onClickSaveForm = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        dispatch(saveTacticMetadata(tacticMetadata))\r\n    }, [dispatch, tacticMetadata])\r\n\r\n\r\n\r\n\r\n    const buildTacticMetadataFormGroup = () => {\r\n        return <FormGroup className={classes.formGroup}>\r\n            <FormControl className={classes.formControl}>\r\n                <TextField\r\n                    required\r\n                    label=\"Tactic Name\"\r\n                    value={tacticMetadata.tacticReference}\r\n                    onChange={onChangeTacticReference}\r\n                />\r\n            </FormControl>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"map-form-control\">Map</InputLabel>\r\n                <Select\r\n                    labelId=\"map-form-control\"\r\n                    id=\"map-select\"\r\n                    value={tacticMetadata.mapName}\r\n                    onChange={onChangeMapName}\r\n                >\r\n                    {buildMapList()}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"base-number-form-control\">Base Number</InputLabel>\r\n                <Select\r\n                    labelId=\"base-number-form-control\"\r\n                    id=\"base-number-select\"\r\n                    value={tacticMetadata.baseNumber}\r\n                    onChange={onChangeBaseNumber}\r\n                >\r\n                    {buildBaseNumberOptions()}\r\n                </Select>\r\n            </FormControl>\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={onClickSaveForm}\r\n                disabled={!isFormValid()}\r\n            >\r\n                Save Metadata\r\n            </Button>\r\n        </FormGroup>\r\n    }\r\n\r\n    return <div>\r\n        {buildTacticMetadataFormGroup()}\r\n    </div>\r\n}\r\n\r\nexport default TacticMetadataForm;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-role\\TacticRoleForm.tsx",["413","414","415","416","417","418","419","420"],"import {\r\n    Button,\r\n    createStyles,\r\n    FormControl,\r\n    FormGroup,\r\n    InputLabel,\r\n    makeStyles,\r\n    MenuItem,\r\n    Select,\r\n    Theme\r\n} from '@material-ui/core';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { clanDetailsFetchSelector, fetchClanDetailsThunk, fetchPhoenixClanDetailsThunk } from '../../../../slices/clanSlice';\r\nimport { mapFetchDetailsSelector, selectedTacticIdSelector, fetchMapsThunk, addTacticRole } from '../../store/tacticsSlice';\r\nimport { PlayerTacticRole } from '../../../../store/types/interfaces/TacticMetadata.interface';\r\nimport { User, Vehicle } from '../../../vehicles/types';\r\nimport { fetchTanksThunk, tanksFetchSelector } from '../../../../slices/tanksSlice';\r\n\r\nconst createDefaultTacticRole = () => {\r\n    return {\r\n        playerId: \"\",\r\n        tankId: \"\"\r\n    } as PlayerTacticRole;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formGroup: {\r\n            // display: \"flex\",\r\n            flexDirection: \"row\"\r\n        },\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n    }),\r\n);\r\n\r\nconst TacticRoleForm = () => {\r\n    const dispatch = useDispatch();\r\n    const { mapFetchError, mapFetchStatus, maps } = useSelector(mapFetchDetailsSelector)\r\n    const { tanksFetchErrors, tanksFetchStatus, tanks } = useSelector(tanksFetchSelector)\r\n    const { clanDetailsFetchErrors, clanDetailsFetchStatus, clanDetails } = useSelector(clanDetailsFetchSelector);\r\n    const [tacticRole, setTacticRole] = useState(createDefaultTacticRole())\r\n    const tacticId = useSelector(selectedTacticIdSelector);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (mapFetchStatus === 'idle') {\r\n            dispatch(fetchMapsThunk())\r\n        }\r\n    }, [mapFetchStatus])\r\n\r\n    useEffect(() => {\r\n        if (clanDetailsFetchStatus === 'idle') {\r\n            dispatch(fetchPhoenixClanDetailsThunk())\r\n        }\r\n    }, [clanDetailsFetchStatus])\r\n\r\n    useEffect(() => {\r\n        if (tanksFetchStatus === 'idle') {\r\n            dispatch(fetchTanksThunk())\r\n        }\r\n    }, [tanksFetchStatus])\r\n\r\n    const onChangePlayer = useCallback((event: any) => {\r\n        const playerId = event.target.value;\r\n        setTacticRole({ ...tacticRole, playerId });\r\n    }, [tacticRole])\r\n\r\n    const onChangeTank = useCallback((event: any) => {\r\n        const tankId = event.target.value as string;\r\n        setTacticRole({ ...tacticRole, tankId })\r\n    }, [tacticRole])\r\n\r\n    const onClickAddTacticRole = useCallback(() => {\r\n        dispatch(addTacticRole(tacticRole))\r\n        setTacticRole(createDefaultTacticRole())\r\n    }, [tacticRole])\r\n\r\n    const isTacticRoleValid: () => boolean = () => {\r\n        return !!tacticRole.playerId && !!tacticRole.tankId\r\n    }\r\n\r\n    const buildPlayerList = () => {\r\n        switch (clanDetailsFetchStatus) {\r\n            case \"idle\":\r\n                return <MenuItem></MenuItem>;\r\n            case \"loading\":\r\n                return <MenuItem></MenuItem>;\r\n            case \"succeeded\":\r\n                const members = clanDetails.members;\r\n                return members.map((clanMember: User) => {\r\n                    return <MenuItem key={clanMember.account_id} value={clanMember.account_id}>\r\n                        {clanMember.account_name}\r\n                    </MenuItem>\r\n                });\r\n            case \"failed\":\r\n                console.error({ clanDetailsFetchErrors })\r\n                return <p>Could not connect server to get info</p>\r\n        }\r\n    }\r\n\r\n    const buildTankList = () => {\r\n        switch (tanksFetchStatus) {\r\n            case \"idle\":\r\n                return <MenuItem></MenuItem>\r\n            case \"loading\":\r\n                return <MenuItem></MenuItem>\r\n            case \"succeeded\":\r\n                return Object.keys(tanks).map((key: string) => {\r\n                    return <MenuItem key={key} value={key}>{(tanks[+key] as Vehicle).name}</MenuItem>\r\n                });\r\n            case \"failed\":\r\n                console.error({ tanksFetchErrors })\r\n                return <p> could not connect server to get info</p>\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const buildTacticRolesFormGroup = () => {\r\n        return (\r\n            <FormGroup className={classes.formGroup}>\r\n                <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"player-form-control\">Player</InputLabel>\r\n                    <Select\r\n                        labelId=\"player-form-control\"\r\n                        id=\"player-select\"\r\n                        value={tacticRole.playerId}\r\n                        onChange={onChangePlayer}\r\n                    >\r\n                        {buildPlayerList()}\r\n                    </Select>\r\n                </FormControl>\r\n                <FormControl className={classes[\"formControl\"]}>\r\n                    <InputLabel id=\"player-form-control\">Tank</InputLabel>\r\n                    <Select\r\n                        labelId=\"player-form-control\"\r\n                        id=\"player-select\"\r\n                        value={tacticRole.tankId}\r\n                        onChange={onChangeTank}\r\n                    >\r\n                        {buildTankList()}\r\n                    </Select>\r\n                </FormControl>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={onClickAddTacticRole}\r\n                    disabled={!isTacticRoleValid()}\r\n                >\r\n                    <AddIcon />\r\n                </Button>\r\n            </FormGroup >\r\n\r\n        )\r\n    }\r\n\r\n    return <div>\r\n        {buildTacticRolesFormGroup()}\r\n    </div>\r\n}\r\n\r\nexport default TacticRoleForm;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-role\\TacticRoles.tsx",["421","422"],"import React from 'react';\r\nimport { DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from 'react-dnd';\r\nimport { useSelector } from 'react-redux';\r\nimport { PlayerTacticRole } from '../../../../store/types/interfaces/TacticMetadata.interface';\r\nimport { tacticRolesSelector } from '../../store/tacticsSlice';\r\nimport TacticRole from './TacticRole';\r\n\r\n\r\nconst TacticRoles = (props: ReturnType<typeof collect>) => {\r\n    const tacticRoles = useSelector(tacticRolesSelector);\r\n    const { canDrop, isOver, connectDropTarget } = props;\r\n    const renderTacticRoles = (tacticRole: PlayerTacticRole, index: number) => <TacticRole key={tacticRole.playerId} {...tacticRole} />\r\n\r\n    return connectDropTarget(\r\n        <div className=\"tactic-roles\">\r\n            {tacticRoles.map(renderTacticRoles)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst dropTargetSpec: DropTargetSpec<PlayerTacticRole> = {\r\n    drop(props: PlayerTacticRole, monitor: DropTargetMonitor) {\r\n        console.log(\"dropping\", { props })\r\n        return props\r\n    },\r\n    canDrop(props: PlayerTacticRole) {\r\n        // You can disallow drag based on props\r\n        // return props.isReady\r\n        console.log(\"can drop: \", true)\r\n        return true;\r\n    }\r\n}\r\n\r\nlet collect = (connect: DropTargetConnector, monitor: DropTargetMonitor, props: unknown) => {\r\n    return {\r\n        connectDropTarget: connect.dropTarget(),\r\n        isOver: monitor.isOver(),\r\n        canDrop: monitor.canDrop()\r\n    };\r\n}\r\nexport default DropTarget(\"tacticRole\", dropTargetSpec, collect)(TacticRoles);","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\Tournament.tsx",["423","424","425"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardActionArea,\r\n    CardActions,\r\n    CardContent,\r\n    CardMedia,\r\n    createStyles,\r\n    Icon,\r\n    makeStyles,\r\n    Theme,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport AccessibleIcon from \"@material-ui/icons/Accessible\"\r\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\"\r\n\r\ninterface TournamentProps {\r\n    id: string;\r\n    description: string;\r\n    numberOfPlayers: number; // number of players/teams depending on format\r\n    battleFormat: string; // replace with a type\r\n    totalPrize: number;\r\n\r\n    onRemoveClick: () => void;\r\n    onEditClick: () => void;\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        tournament: {\r\n            border: '1px solid beige',\r\n            // color: 'darkred',\r\n            float: 'right',\r\n            cursor: 'pointer',\r\n            fill: '#f7c6pc',\r\n        },\r\n        button: {\r\n            overflowX: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n        },\r\n        media: {\r\n            height: 140,\r\n        },\r\n        gold: {\r\n            fill: '#f7c6pc'\r\n        }\r\n    }),\r\n);\r\n\r\nconst Tournament = ({\r\n    id,\r\n    description,\r\n    numberOfPlayers,\r\n    battleFormat,\r\n    totalPrize,\r\n    onRemoveClick,\r\n    onEditClick,\r\n}: TournamentProps) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.tournament}>\r\n            <CardActionArea>\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image=\"/static/images/cards/contemplative-reptile.jpg\"\r\n                    title=\"Contemplative Reptile\"\r\n                />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {battleFormat} with a total prize of {totalPrize} gold\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {numberOfPlayers} <AccessibleIcon /> registered\r\n                    </Typography>\r\n                    {/* <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {description}\r\n                    </Typography> */}\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button size=\"small\" variant=\"outlined\" color=\"primary\" onClick={onEditClick}>\r\n                    <EditIcon />\r\n                </Button>\r\n                <Button size=\"small\" variant=\"outlined\" color=\"secondary\" onClick={onRemoveClick}>\r\n                    <RemoveIcon />\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n\r\nTournament.propTypes = {\r\n    // name: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Tournament;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\Player.tsx",["426","427","428"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Button, createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { removePlayer, RemovePlayerFromTeamAction, SelectedTeamIdAction, UserAction } from '../../../slices/teamSlice';\r\nimport { User } from '../../vehicles/types';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        player: {\r\n            overflowX: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            // margin: '1rem 2rem'\r\n        },\r\n    }),\r\n);\r\n\r\nconst Player = ({ user, teamId }: UserAction) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const onRemoveClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (user) {\r\n            dispatch(removePlayer({ teamId, user } as RemovePlayerFromTeamAction));\r\n        }\r\n    };\r\n    return <div className={classes.player}>\r\n        <span>{user?.account_name}</span>\r\n        {/* style={{ color: 'darkred', float: 'right', cursor: 'pointer' } */}\r\n        <Button variant=\"outlined\" color=\"secondary\" onClick={event => onRemoveClick(event)}>\r\n            <RemoveIcon />\r\n        </Button>\r\n    </div >\r\n\r\n}\r\n\r\nexport default Player;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-role\\TacticRole.tsx",["429","430","431","432","433","434","435","436","437","438"],"import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { Button, createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport { clanDetailsFetchSelector, clanMembersSelector, fetchPhoenixClanDetailsThunk } from '../../../../slices/clanSlice';\r\nimport { PlayerTacticRole } from '../../../../store/types/interfaces/TacticMetadata.interface';\r\nimport { getProperty } from '../../../../slices/teamSlice';\r\nimport { DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec, useDrag, useDrop } from 'react-dnd';\r\nimport { removeTacticRole } from '../../store/tacticsSlice';\r\nimport { tanksFetchSelector } from '../../../../slices/tanksSlice';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        tacticRole: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\"\r\n        },\r\n        actions: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\"\r\n        }\r\n    })\r\n);\r\n\r\ntype TacticRoleProps = PlayerTacticRole & ReturnType<typeof collect>\r\nconst TacticRole = (props: TacticRoleProps) => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const tacticRole = {\r\n        tankId: props.tankId,\r\n        playerId: props.playerId,\r\n        index: props.index\r\n    } as PlayerTacticRole\r\n    const { isDragging, connectDragSource } = props;\r\n    const { clanDetailsFetchErrors, clanDetailsFetchStatus, clanDetails } = useSelector(clanDetailsFetchSelector);\r\n    const { tanksFetchErrors, tanksFetchStatus, tanks } = useSelector(tanksFetchSelector);\r\n    const { clanMembers } = useSelector(clanMembersSelector)\r\n\r\n\r\n\r\n    const [name, setName] = useState(\"\")\r\n    const [tank, setTank] = useState(\"\")\r\n\r\n    const onEditClick = useCallback(() => { }, [tacticRole, tank, name]);\r\n\r\n    const onRemoveClick = useCallback(() => {\r\n        dispatch(removeTacticRole(tacticRole))\r\n    }, [tacticRole, tank, name])\r\n\r\n    useEffect(() => {\r\n        if (clanDetailsFetchStatus === 'idle') {\r\n            dispatch(fetchPhoenixClanDetailsThunk())\r\n        }\r\n\r\n        if (clanDetailsFetchStatus === \"succeeded\" && clanMembers.length > 0) {\r\n            const playerId = tacticRole.playerId\r\n            const newPlayer = clanMembers.find(member => member.account_id === playerId);\r\n            if (newPlayer != null) {\r\n                setName(newPlayer.account_name)\r\n            }\r\n        }\r\n\r\n        if (tanksFetchStatus === \"succeeded\") {\r\n            const tankId = tacticRole.tankId\r\n            const newTank = getProperty(tanks, +tankId)\r\n            setTank(newTank.name)\r\n        }\r\n\r\n    }, [tacticRole, clanDetailsFetchStatus, tanksFetchStatus, clanMembers])\r\n\r\n    return connectDragSource(\r\n        <div className={classes.tacticRole}>\r\n            <p>{name}</p>\r\n            <p>{tank}</p>\r\n            {/* some button actions */}\r\n            <div className={classes.actions}>\r\n                <Button variant=\"outlined\" color=\"secondary\" onClick={onEditClick}>\r\n                    <EditIcon />\r\n                </Button>\r\n                <Button variant=\"outlined\" color=\"secondary\" onClick={onRemoveClick}>\r\n                    <RemoveIcon />\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst tacticRoleSpec: DragSourceSpec<PlayerTacticRole, any> = {\r\n    beginDrag(props, monitor: DragSourceMonitor) {\r\n        console.log(\"begin drag\", { props })\r\n        return props\r\n    },\r\n    endDrag(props: PlayerTacticRole, monitor, component) {\r\n        if (!monitor.didDrop()) {\r\n            return;\r\n        }\r\n        console.log(\"ending drag: \", { props })\r\n        // When dropped on a compatible target, do something.\r\n        // Read the original dragged item from getItem():\r\n        const dragItem = monitor.getItem()\r\n        console.log({ dragItem })\r\n\r\n        // You may also read the drop result from the drop target\r\n        // that handled the drop, if it returned an object from\r\n        // its drop() method.\r\n        const dropResult = monitor.getDropResult()\r\n        console.log({ dropResult })\r\n        // This is a good place to call some Flux action\r\n        // TODO - dispatch change index\r\n        // changeTacticRoleIndex(dragItem.index, dropResult.)\r\n    },\r\n    isDragging(props: PlayerTacticRole, monitor) {\r\n        console.log(\"dragging item\", monitor.getItem(), { props })\r\n        if (monitor.getItem().id !== props.index) {\r\n\r\n        }\r\n        return monitor.getItem().id === props.index\r\n    },\r\n    canDrag(props: PlayerTacticRole) {\r\n        // You can disallow drag based on props\r\n        // return props.isReady\r\n        console.log(\"can drag: \", true)\r\n        return true;\r\n    }\r\n}\r\n\r\nconst collect = (connect: DragSourceConnector, monitor: DragSourceMonitor, props: unknown) => {\r\n    return {\r\n        // Call this function inside render()\r\n        // to let React DnD handle the drag events:\r\n        connectDragSource: connect.dragSource(),\r\n        // You can ask the monitor about the current drag state:\r\n        isDragging: monitor.isDragging()\r\n    }\r\n}\r\nexport default DragSource(\"tacticRole\", tacticRoleSpec, collect)(TacticRole);","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\store\\tacticsSlice.ts",["439","440","441"],"\r\nimport { createAsyncThunk, createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { BaseId, FetchStatus, RootState } from '../../../slices';\r\nimport APPLICATION_ID from '../../../api/config';\r\nimport { MapBaseNumber } from '../../../store/types/enums/MapBaseNumber.enum';\r\nimport { TacticType } from '../../../store/types/enums/TacticType.enum';\r\nimport { PlayerTacticRole, Tactic, TacticMetadata } from '../../../store/types/interfaces/TacticMetadata.interface';\r\nimport { WoTMap } from '../../../store/types/interfaces/WoTMap.interface';\r\nimport { buildParamStr, redirectTo } from '../../../utils/url/urlUtils';\r\nimport { applyChanges, Change, ChangeType } from '../../../store/decorators/PropertyChanged';\r\nimport { MapMarker, MarkerType } from '../../../slices/mapInteractionSlice';\r\n\r\nconst MAP_API = 'https://api.worldoftanks.ru/wot/encyclopedia/arenas/'\r\nconst MAP_IMAGES_API = \"https://stratsketch.com/maps/wot/thumb/\"\r\n\r\nexport const DEFAULT_NEW_TACTIC_ID = '0';\r\nexport const TACTICS_STATE_STORAGE_KEY = 'tacticsState';\r\nexport const TACTICS_PAGE = '/tactics'; // TODO - extract\r\n\r\ninterface TacticsState {\r\n    tactics: Tactic[];\r\n    selectedTacticId: string;\r\n\r\n    mapFetchError: any,\r\n    mapFetchStatus: FetchStatus,\r\n    maps: WoTMap[];\r\n\r\n    selectedMap: WoTMap;\r\n}\r\n\r\nconst loadState = () => {\r\n    const storage = localStorage.getItem(TACTICS_STATE_STORAGE_KEY)\r\n    if (storage !== null) {\r\n        return JSON.parse(storage) as TacticsState;\r\n    }\r\n}\r\n\r\nconst saveTacticsState = (state: TacticsState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(TACTICS_STATE_STORAGE_KEY, serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\nexport const createDefaultTacticMetadata = () => {\r\n    return {\r\n        tacticReference: '',\r\n        mapName: '',\r\n        tacticType: TacticType.NONE,\r\n        baseNumber: MapBaseNumber.NONE\r\n    } as TacticMetadata\r\n}\r\nexport const createDefaultTactic = () => {\r\n    return {\r\n        id: DEFAULT_NEW_TACTIC_ID,\r\n        metadata: createDefaultTacticMetadata(),\r\n        playerTacticRoles: [],\r\n        activeTool: {\r\n            cursorTool: true\r\n        },\r\n        positionList: [],\r\n        cursorPosition: { x: 0, y: 0, markerType: MarkerType.MEDIUM_TANK } as MapMarker,\r\n        changes: []\r\n    } as Tactic\r\n}\r\nconst createDefaultTacticsState = () => {\r\n    return {\r\n        tactics: [createDefaultTactic()] as Tactic[],\r\n        selectedTacticId: DEFAULT_NEW_TACTIC_ID,\r\n        mapFetchStatus: 'idle',\r\n        mapFetchError: null,\r\n        maps: [] as WoTMap[],\r\n        selectedMap: null as any as WoTMap\r\n    } as TacticsState;\r\n}\r\nconst initialState: TacticsState = loadState() || createDefaultTacticsState();\r\n\r\n\r\nexport type ChangeTacticReferenceAction = {\r\n    tacticReference: string;\r\n}\r\nexport type ChangeTacticMapName = {\r\n    mapName: string;\r\n}\r\nexport type ChangeTacticBaseNumber = {\r\n    baseNumber: MapBaseNumber;\r\n}\r\n\r\nconst buildMapsQueryUrl: (url: string, params: any) => string = (url, params: any) => {\r\n    const queryParamStr = buildParamStr(params);\r\n    return `${url}?application_id=${APPLICATION_ID}&${queryParamStr}`;\r\n}\r\nconst url = buildMapsQueryUrl(MAP_API, { language: \"en\" })\r\n\r\nexport const createMapImageUrl = (mapName: string) => `${MAP_IMAGES_API}${mapName}.jpg`\r\nexport const fetchMapsThunk = createAsyncThunk('maps/fetchMaps', async () => {\r\n    const response: Response = await fetch(url);\r\n    const json = await response.json();\r\n    return json.data;\r\n})\r\n\r\n\r\n// TODO - remove any maps api logic from here (separate slice)\r\nexport const tacticsSlice = createSlice({\r\n    name: 'tactics',\r\n    initialState,\r\n    reducers: {\r\n        saveTactic: (state, action: PayloadAction<Tactic>) => {\r\n            const updatedTactic = action.payload;\r\n            const tacticsNumber = state.tactics.length;\r\n            const defaultTacticIndex = state.tactics.findIndex(tactic => tactic.id === DEFAULT_NEW_TACTIC_ID)\r\n\r\n            if (updatedTactic.id === DEFAULT_NEW_TACTIC_ID) {\r\n                // ADD tactic\r\n                const newTacticWithId: Tactic = { ...updatedTactic, id: `${tacticsNumber}`, changes: [] }\r\n                state.tactics.push(newTacticWithId);\r\n                state.tactics[defaultTacticIndex] = createDefaultTactic();\r\n            } else {\r\n                // UPDATE tactic\r\n                const teamIndex = state.tactics.findIndex(tactic => tactic.id === updatedTactic.id);\r\n                if (teamIndex !== -1) {\r\n                    const changesAppliedTactic = applyChanges<Tactic>(updatedTactic, ChangeType.APPLY);\r\n                    state.tactics[teamIndex] = changesAppliedTactic;\r\n                } else {\r\n                    state.tactics.push({ ...updatedTactic, changes: [] });\r\n                    state.tactics[defaultTacticIndex] = createDefaultTactic();\r\n                }\r\n            }\r\n            state.selectedTacticId = DEFAULT_NEW_TACTIC_ID;\r\n            saveTacticsState(state);\r\n            redirectTo(TACTICS_PAGE)\r\n        },\r\n        removeTactic: (state, action: PayloadAction<BaseId>) => {\r\n            const deletableTacticId = action.payload.id;\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === deletableTacticId)\r\n            if (tacticIndex !== -1) {\r\n                state.tactics.splice(tacticIndex, 1);\r\n                if (deletableTacticId === state.selectedTacticId) {\r\n                    state.selectedTacticId = DEFAULT_NEW_TACTIC_ID;\r\n                }\r\n            }\r\n            saveTacticsState(state);\r\n        },\r\n        cancelTacticChanges: (state, action: PayloadAction<Tactic>) => {\r\n            const tactic = action.payload;\r\n            if (tactic.id === DEFAULT_NEW_TACTIC_ID) {\r\n                redirectTo(TACTICS_PAGE);\r\n            }\r\n\r\n            const updatedTactic = applyChanges(tactic, ChangeType.REVERT);\r\n\r\n            const defaultTacticIndex = state.tactics.findIndex(tactic => tactic.id === DEFAULT_NEW_TACTIC_ID);\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === updatedTactic.id);\r\n            if (tacticIndex !== -1) {\r\n                state.tactics[tacticIndex] = { ...updatedTactic };\r\n            } else {\r\n                state.tactics.push({ ...updatedTactic, changes: [] });\r\n                state.tactics[defaultTacticIndex] = createDefaultTactic();\r\n            }\r\n            state.selectedTacticId = DEFAULT_NEW_TACTIC_ID;\r\n            saveTacticsState(state);\r\n            redirectTo(TACTICS_PAGE);\r\n        },\r\n        // moveCursor: (state, action: PayloadAction<Point>) => {\r\n        //     const point = action.payload;\r\n        //     // console.log({ point }, state.selectedTacticId)\r\n        //     const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId)\r\n        //     if (tacticIndex !== -1) {\r\n        //         state.tactics[tacticIndex].cursorPosition = point;\r\n        //     }\r\n        // },\r\n        // addTacticPosition: (state, action: PayloadAction<Point>) => {\r\n        //     const point = action.payload;\r\n        //     // console.log({ point })\r\n        //     const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId)\r\n        //     if (tacticIndex !== -1) {\r\n        //         const tactic = state.tactics[tacticIndex];\r\n        //         const updatedPositionList = [...tactic.positionList]\r\n        //         updatedPositionList.push(point);\r\n        //         if (updatedPositionList.length > 100) {\r\n        //             updatedPositionList.splice(0, 1)\r\n        //         }\r\n        //         tactic.positionList = [...updatedPositionList]\r\n        //     }\r\n        // },\r\n        // saveTacticPositions: (state, action: PayloadAction<Point[]>) => {\r\n        //     const positionList = action.payload;\r\n        //     const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId)\r\n        //     if (tacticIndex !== -1) {\r\n        //         state.tactics[tacticIndex].positionList = [...positionList]\r\n        //     }\r\n        // },\r\n        clearTacticPositions: (state) => {\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId)\r\n            if (tacticIndex !== -1) {\r\n                state.tactics[tacticIndex].positionList = []\r\n            }\r\n        },\r\n        changeSelectedTactic: (state, action: PayloadAction<BaseId>) => {\r\n            state.selectedTacticId = action.payload.id;\r\n            saveTacticsState(state); // TODO - why ?\r\n        },\r\n        saveTacticMetadata: (state: TacticsState, action: PayloadAction<TacticMetadata>) => {\r\n            const selectedTactic = state.tactics[state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId)]\r\n            selectedTactic.metadata = { ...action.payload }\r\n            // todo .. apply partial changes only ?? or better delete this as it doesnt bring too much value, section is small and doesnt need partial save\r\n            saveTacticsState(state);\r\n        },\r\n        changeTacticReference: (state: TacticsState, action: PayloadAction<ChangeTacticReferenceAction>) => {\r\n            const tacticReference = action.payload.tacticReference;\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId);\r\n            const isTacticInList = tacticIndex !== -1;\r\n\r\n            if (!isTacticInList) {\r\n                throw new Error();\r\n            }\r\n\r\n            const updatedTactic = { ...state.tactics[tacticIndex] };\r\n            const metadataBefore = { ...updatedTactic.metadata }\r\n            updatedTactic.metadata.tacticReference = tacticReference\r\n            const metadataAfter = { ...updatedTactic.metadata }\r\n\r\n            state.tactics[tacticIndex] = { ...updatedTactic };\r\n            state.tactics[tacticIndex].changes.push({\r\n                key: 'metadata',\r\n                initialValue: metadataBefore,\r\n                newValue: metadataAfter\r\n            } as Change<Tactic>)\r\n        },\r\n        changeTacticMapName: (state: TacticsState, action: PayloadAction<ChangeTacticMapName>) => {\r\n            const payload = action.payload;\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId);\r\n            const isTacticInList = tacticIndex !== -1;\r\n            if (isTacticInList) {\r\n                const map = state.maps.find(map => map.name_i18n === payload.mapName);\r\n                state.selectedMap = { ...map } as WoTMap;\r\n\r\n                const updatedTactic = { ...state.tactics[tacticIndex] };\r\n                updatedTactic.metadata.mapName = payload.mapName\r\n                state.tactics[tacticIndex] = { ...updatedTactic };\r\n            }\r\n        },\r\n        changeTacticBaseNumber: (state: TacticsState, action: PayloadAction<ChangeTacticBaseNumber>) => {\r\n            const payload = action.payload;\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId);\r\n            const isTacticInList = tacticIndex !== -1;\r\n            if (isTacticInList) {\r\n                const updatedTactic = { ...state.tactics[tacticIndex] };\r\n                const beforeMetadata = { ...updatedTactic.metadata }\r\n                updatedTactic.metadata.baseNumber = payload.baseNumber\r\n                const afterMetadata = { ...updatedTactic.metadata }\r\n                state.tactics[tacticIndex] = { ...updatedTactic };\r\n                state.tactics[tacticIndex].changes.push({\r\n                    key: 'metadata',\r\n                    initialValue: beforeMetadata,\r\n                    newValue: afterMetadata\r\n                } as Change<Tactic>)\r\n            }\r\n        },\r\n        changeTacticType: (state: TacticsState, action: PayloadAction<any>) => {\r\n        },\r\n        addTacticRole: (state: TacticsState, action: PayloadAction<PlayerTacticRole>) => {\r\n            const tacticRole = action.payload;\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId);\r\n            const tactic = state.tactics[tacticIndex];\r\n            const tacticRoles = tactic.playerTacticRoles;\r\n            const existingRoleIndex = tacticRoles.findIndex(role => role.playerId === tacticRole.playerId)\r\n            const beforeTacticRoles = [...tactic.playerTacticRoles]\r\n            if (existingRoleIndex !== -1) {\r\n                tacticRoles[existingRoleIndex].tankId = tacticRole.tankId\r\n            } else {\r\n                tacticRoles.push({ ...tacticRole, index: tacticRoles.length })\r\n            }\r\n            const afterTacticRoles = [...tactic.playerTacticRoles]\r\n            tactic.changes.push({\r\n                key: 'playerTacticRoles',\r\n                initialValue: beforeTacticRoles,\r\n                newValue: afterTacticRoles\r\n            } as Change<Tactic>)\r\n        },\r\n        removeTacticRole: (state: TacticsState, action: PayloadAction<PlayerTacticRole>) => {\r\n            const tacticRole = action.payload;\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId);\r\n            const tactic = state.tactics[tacticIndex];\r\n            const tacticRoles = tactic.playerTacticRoles;\r\n            const existingRoleIndex = tacticRoles.findIndex(role => role.playerId === tacticRole.playerId)\r\n            const beforeTacticRoles = [...tactic.playerTacticRoles]\r\n            if (existingRoleIndex !== -1) {\r\n                tacticRoles.splice(existingRoleIndex, 1);\r\n            }\r\n            const afterTacticRoles = [...tactic.playerTacticRoles]\r\n            tactic.changes.push({\r\n                key: 'playerTacticRoles',\r\n                initialValue: beforeTacticRoles,\r\n                newValue: afterTacticRoles\r\n            } as Change<Tactic>)\r\n        },\r\n        changeTacticRoleIndex: (state: TacticsState, action: PayloadAction<{ previousIndex: number, currentIndex: number }>) => {\r\n        }\r\n    },\r\n    extraReducers: {\r\n        ['maps/fetchMaps/pending']: (state: TacticsState, action) => {\r\n            state.mapFetchStatus = 'loading'\r\n        },\r\n        ['maps/fetchMaps/rejected']: (state: TacticsState, action) => {\r\n            state.mapFetchStatus = 'failed'\r\n            state.mapFetchError = action.error.message\r\n        },\r\n        ['maps/fetchMaps/fulfilled']: (state: TacticsState, action) => {\r\n            state.mapFetchStatus = 'succeeded'\r\n            const payload = action.payload;\r\n            Object.keys(payload).forEach(key => state.maps.push(payload[key]));\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    saveTactic,\r\n    removeTactic,\r\n    cancelTacticChanges,\r\n    // moveCursor,\r\n    // addTacticPosition,\r\n    // saveTacticPositions,\r\n    clearTacticPositions,\r\n    changeTacticRoleIndex,\r\n    changeSelectedTactic,\r\n    saveTacticMetadata,\r\n    changeTacticReference,\r\n    changeTacticMapName,\r\n    changeTacticBaseNumber,\r\n    changeTacticType,\r\n    addTacticRole,\r\n    removeTacticRole\r\n} = tacticsSlice.actions;\r\n\r\nexport const tacticsStateSelector = (state: RootState) => state.tacticsState;\r\nexport const selectedTacticIdSelector = (state: RootState) => state.tacticsState.selectedTacticId as string;\r\nexport const allTacticsSelector = (state: RootState) => state.tacticsState.tactics as Tactic[];\r\n\r\nexport const allMapsSelector = (state: RootState) => state.tacticsState.maps as WoTMap[];\r\nexport const selectedMapSelector = (state: RootState) => state.tacticsState.selectedMap as WoTMap;\r\nexport const mapFetchDetailsSelector = createSelector(\r\n    [tacticsStateSelector, allMapsSelector],\r\n    (tacticsState, allMaps) => {\r\n        return {\r\n            mapFetchStatus: tacticsState.mapFetchStatus,\r\n            mapFetchError: tacticsState.mapFetchError,\r\n            maps: allMaps\r\n        }\r\n    }\r\n)\r\n\r\nexport const selectedTacticSelector = createSelector(\r\n    [selectedTacticIdSelector, tacticsStateSelector],\r\n    (selectedTacticId, tacticsState) => {\r\n        return tacticsState.tactics.find(tactic => tactic.id === selectedTacticId) ?? createDefaultTactic()\r\n    }\r\n)\r\nexport const selectedTacticMetadataSelector = createSelector(\r\n    [selectedTacticSelector],\r\n    (selectedTactic) => {\r\n        return selectedTactic ? selectedTactic.metadata : createDefaultTactic().metadata\r\n    }\r\n)\r\nexport const tacticRolesSelector = createSelector(\r\n    [selectedTacticSelector],\r\n    (selectedTactic) => {\r\n        return selectedTactic ? selectedTactic.playerTacticRoles : [] as PlayerTacticRole[]\r\n    }\r\n)\r\n\r\nexport const activeToolSelector = createSelector([selectedTacticSelector], (selectedTactic) => { return selectedTactic.activeTool })\r\nexport const positionListSelector = createSelector([selectedTacticSelector], (selectedTactic) => { return selectedTactic.positionList })\r\n\r\nexport default tacticsSlice.reducer;\r\n\r\n// export type TacticsStateReducerReturnType = ReturnType<typeof tacticsSlice.reducer>;\r\n// export const selectTactics = (state: TacticsStateReducerReturnType) => state.tactics;\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\Tactics.tsx",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\TacticCard.tsx",["442","443"],"import React, { useCallback } from 'react';\r\n\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { red } from \"@material-ui/core/colors\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { Button } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Tactic } from '../../../store/types/interfaces/TacticMetadata.interface';\r\nimport { removeTactic, changeSelectedTactic } from '../store/tacticsSlice';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      maxWidth: 345,\r\n    },\r\n    media: {\r\n      height: 0,\r\n      paddingTop: \"56.25%\" // 16:9\r\n    },\r\n    avatar: {\r\n      backgroundColor: red[500]\r\n    }\r\n  })\r\n);\r\n\r\nconst TacticCard = (tactic: Tactic) => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const onRemoveClick = useCallback(() => {\r\n    dispatch(removeTactic(tactic))\r\n  }, [tactic]);\r\n\r\n  const onEditClick = useCallback(() => {\r\n    dispatch(changeSelectedTactic({ id: tactic.id }))\r\n    history.push(`/tactics/${tactic.id}`)\r\n  }, [tactic]);\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={<Avatar aria-label=\"creator\" className={classes.avatar} />}\r\n        title={tactic.metadata.tacticReference}\r\n        subheader=\"\"\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        src=\"\"\r\n        image=\"/static/images/cards/paella.jpg\"\r\n        title=\"Paella dish\"\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {tactic.metadata.baseNumber}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {tactic.metadata.mapName}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {tactic.metadata.tacticType}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions disableSpacing>\r\n        <Button variant=\"outlined\" color=\"secondary\" onClick={onEditClick}>\r\n          <EditIcon />\r\n        </Button>\r\n        <Button variant=\"outlined\" color=\"secondary\" onClick={onRemoveClick}>\r\n          <RemoveIcon />\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\nexport default TacticCard;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\decorators\\PropertyChanged.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\InteractiveMap.tsx",["444","445","446","447","448","449","450","451","452","453","454","455","456"],"import { makeStyles, Theme, createStyles, MenuItem } from '@material-ui/core';\r\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n    createMapImageUrl,\r\n    allMapsSelector,\r\n} from '../../store/tacticsSlice';\r\nimport MapTools, { MapTool } from './MapTools';\r\nimport { WebSocketContext } from '../../../../WebSocketContext';\r\nimport { addMarker, cursorPositionSelector, MapMarker, markersSelector, Point, selectedToolSelector } from '../../../../slices/mapInteractionSlice';\r\nimport useCanvas from './useCanvas';\r\nimport { WoTMap } from '../../../../store/types/interfaces/WoTMap.interface';\r\nimport { fetchMapsThunk, mapsApiStateSelector, selectedInteractiveMapSelector } from '../../../../slices/mapsApiSlice';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        mapContainer: {\r\n            display: \"flex\",\r\n            cursor: (props: any) => props[\"isCursorDisplayed\"] ? \"inherit\" : \"none\"\r\n        },\r\n        map: {\r\n            display: \"block\",\r\n            width: 400,\r\n            height: 400,\r\n            margin: \"0 0\",\r\n            backgroundSize: 400,\r\n            backgroundImage: (props: any) => props[\"image\"] ?? \"\",\r\n            backgroundRepeat: (props: any) => props[\"repeat\"] ?? \"\",\r\n        }\r\n    }),\r\n);\r\n\r\n\r\nconst InteractiveMap = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { mapFetchError, mapFetchStatus, maps } = useSelector(mapsApiStateSelector)\r\n    const cursorPosition = useSelector(cursorPositionSelector);\r\n    const markers = useSelector(markersSelector);\r\n    const webSocketContext = useContext(WebSocketContext);\r\n    const selectedMap = useSelector(selectedInteractiveMapSelector);\r\n    const activeTool = useSelector(selectedToolSelector);\r\n\r\n    const SIZE = 400;\r\n    const MARGIN_PROCENT = 10; // TODO - how you keep this with container's 10%? it should remain as is, but connect the values somehow\r\n\r\n    const [isCursorDisplayed, setIsCursorDisplayed] = useState(true)\r\n    const [mapImageUrl, setMapImageUrl] = useState(\"\");\r\n    const [isMovingEnabled, setIsMovingEnabled] = useState(false);\r\n\r\n    const classes = useStyles({\r\n        image: `url('${mapImageUrl}')`,\r\n        repeat: \"no-repeat\",\r\n        isCursorDisplayed\r\n    })\r\n\r\n    const getOffsetAndScaleFactor = () => {\r\n        const bodyWidth = document.body.clientWidth\r\n        const bodyHeight = document.body.clientHeight\r\n        const OFFSET_TOP = (bodyHeight / MARGIN_PROCENT)\r\n        const OFFSET_LEFT = (bodyWidth / MARGIN_PROCENT)//  + (CONTAINER_WIDTH - SIZE) / 2  ----- this is for center alignment on X-axis\r\n        const SCALE_FACTOR = bodyWidth / bodyHeight\r\n\r\n        return {\r\n            OFFSET_TOP,\r\n            OFFSET_LEFT,\r\n            SCALE_FACTOR\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (mapFetchStatus === 'idle') {\r\n            dispatch(fetchMapsThunk())\r\n        }\r\n    }, [dispatch, mapFetchStatus])\r\n\r\n    useEffect(() => {\r\n        if (selectedMap != null) {\r\n            const newMapImg = createMapImageUrl(selectedMap.arena_id);\r\n            setMapImageUrl(newMapImg);\r\n        }\r\n    }, [selectedMap, mapImageUrl])\r\n\r\n    const onMouseLeave = useCallback((event) => {\r\n        setIsCursorDisplayed(true)\r\n    }, [isCursorDisplayed])\r\n\r\n    const onMouseEnter = useCallback((event) => {\r\n        if (isMovingEnabled) {\r\n            setIsCursorDisplayed(false)\r\n        }\r\n    }, [isCursorDisplayed, isMovingEnabled])\r\n\r\n    useEffect(() => {\r\n        if (!activeTool) {\r\n            return\r\n        }\r\n\r\n        if (activeTool.cursorTool) {\r\n            setIsMovingEnabled(true)\r\n        }\r\n\r\n        if (activeTool.tankTool) {\r\n            setIsMovingEnabled(false)\r\n        }\r\n    }, [activeTool])\r\n\r\n    const onMouseMove = useCallback((event) => {\r\n        if (!isMovingEnabled) {\r\n            return\r\n        }\r\n\r\n        const { OFFSET_TOP, OFFSET_LEFT, SCALE_FACTOR } = getOffsetAndScaleFactor()\r\n        const x = event.clientX - OFFSET_LEFT;\r\n        const y = event.clientY - SCALE_FACTOR * OFFSET_TOP;\r\n        const coord = { x, y } as Point;\r\n\r\n        console.log(`emitted x-${x}, y-${y}`)\r\n        webSocketContext.socket.emit(\"cursorPositionChanged\", JSON.stringify(coord))\r\n    }, [dispatch, isMovingEnabled]);\r\n\r\n    const onMouseDown = useCallback((event) => {\r\n        if (!activeTool) {\r\n            return;\r\n        }\r\n\r\n        if (activeTool.cursorTool) {\r\n            if (!isMovingEnabled) {\r\n                setIsMovingEnabled(true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (activeTool.tankTool) {\r\n            const { OFFSET_TOP, OFFSET_LEFT, SCALE_FACTOR } = getOffsetAndScaleFactor()\r\n            const x = event.clientX - OFFSET_LEFT;\r\n            const y = event.clientY - SCALE_FACTOR * OFFSET_TOP;\r\n            const marker = { x, y, markerType: activeTool.tankTool } as MapMarker;\r\n            // dispatch(addMarker(marker))\r\n            webSocketContext.socket.emit(\"markerAdded\", JSON.stringify(marker))\r\n        }\r\n\r\n    }, [dispatch, isMovingEnabled, setIsMovingEnabled, activeTool]);\r\n\r\n    const onMouseUp = useCallback((event) => {\r\n        setIsMovingEnabled(false);\r\n    }, [setIsMovingEnabled]);\r\n\r\n    const canvasRef = useCanvas({ cursorPosition, markers, onMouseMove, onMouseDown, onMouseUp, activeTool })\r\n\r\n    return <div className={classes.mapContainer}>\r\n        <canvas\r\n            className={classes.map}\r\n            ref={canvasRef}\r\n            onMouseLeave={onMouseLeave}\r\n            onMouseEnter={onMouseEnter}\r\n            onMouseUp={onMouseUp}\r\n            onMouseDown={onMouseDown}\r\n            onMouseMove={onMouseMove}\r\n        ></canvas>\r\n        {/* <MapCanvas\r\n            positionList={positionList}\r\n            cursorPosition={cursorPosition}\r\n            draw={() => { }}\r\n            styles={classes.map}\r\n            preDraw={() => { }}\r\n            postDraw={() => { }}\r\n            onMouseDown={onMouseDown}\r\n            onMouseMove={onMouseMove}\r\n            activeTool={activeTool}\r\n            onMouseUp={onMouseUp}\r\n        /> */}\r\n        <MapTools />\r\n    </div>\r\n}\r\n\r\nexport default InteractiveMap;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\MapTools.tsx",["457","458","459","460","461","462","463"],"import {\r\n    makeStyles,\r\n    MenuItem,\r\n    Theme,\r\n    createStyles,\r\n    Button,\r\n    FormControl,\r\n    FormGroup,\r\n    InputLabel,\r\n    Select\r\n} from '@material-ui/core';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport NearMeIcon from '@material-ui/icons/NearMe';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { MarkerType, setActiveTool } from '../../../../slices/mapInteractionSlice';\r\nimport { WoTMap } from '../../../../store/types/interfaces/WoTMap.interface';\r\nimport { mapsApiStateSelector } from '../../../../slices/mapsApiSlice';\r\nimport { WebSocketContext } from '../../../../WebSocketContext';\r\n\r\nexport interface MapTool {\r\n    tankTool?: MarkerType,\r\n    cursorTool?: boolean\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        tools: {\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"flex-start\"\r\n        },\r\n        tool: {\r\n            color: (props: any) => props[\"cursorActive\"] ? theme.palette.secondary.dark : theme.palette.primary.dark,\r\n        },\r\n        iconMedium: {\r\n            height: 60,\r\n            width: 60,\r\n            color: (props: any) => props[\"activeTool\"] === \"mediumTank\" ? theme.palette.secondary.dark : theme.palette.primary.dark,\r\n        },\r\n        iconHeavy: {\r\n            height: 60,\r\n            width: 60,\r\n            color: (props: any) => props[\"activeTool\"] === \"heavyTank\" ? theme.palette.secondary.dark : theme.palette.primary.dark,\r\n        },\r\n        buttonHeavy: {\r\n            disabled: (props: any) => props[\"activeTool\"] === \"heavyTank\" ? \"true\" : \"false\",\r\n            color: (props: any) => props[\"activeTool\"] === \"heavyTank\" ? theme.palette.secondary.dark : theme.palette.primary.dark,\r\n        },\r\n        buttonMedium: {\r\n            disabled: (props: any) => props[\"activeTool\"] === \"mediumTank\" ? \"true\" : \"false\",\r\n            color: (props: any) => props[\"activeTool\"] === \"heavyTank\" ? theme.palette.secondary.dark : theme.palette.primary.dark,\r\n        }\r\n    }),\r\n);\r\n\r\nconst MapTools = () => {\r\n    const webSocketContext = useContext(WebSocketContext)\r\n    const { maps, mapFetchError, mapFetchStatus, selectedMap } = useSelector(mapsApiStateSelector)\r\n    const classes = useStyles({ activeTool: \"\", cursorActive: true });\r\n\r\n    const createMapDropdownOptions = () => {\r\n        if (mapFetchStatus === \"failed\") {\r\n            console.error({ mapFetchError })\r\n            return <p>Could not connect server to get info</p>\r\n        }\r\n\r\n        if (mapFetchStatus === \"idle\") {\r\n            return <MenuItem></MenuItem>;;\r\n        }\r\n\r\n        if (mapFetchStatus === \"loading\") {\r\n            return <MenuItem></MenuItem>;\r\n        }\r\n\r\n        if (mapFetchStatus === \"succeeded\") {\r\n            const mapOptions = maps.map((map: WoTMap) => {\r\n                return <MenuItem key={map.arena_id} value={map.name_i18n}>\r\n                    {map.name_i18n}\r\n                </MenuItem>\r\n            })\r\n\r\n            mapOptions.push(<MenuItem key={\"NONE-map\"} value={\"NONE\"}>\r\n                {\"NONE\"}\r\n            </MenuItem>)\r\n            return mapOptions\r\n        }\r\n    }\r\n\r\n    const onClickHeavyTankTool = useCallback((event) => {\r\n        webSocketContext.socket.emit(\"selectedToolChanged\", JSON.stringify({tankTool: MarkerType.HEAVY_TANK } as MapTool))\r\n    }, [])\r\n\r\n    const onClickMediumTankTool = useCallback((event) => {\r\n        webSocketContext.socket.emit(\"selectedToolChanged\", JSON.stringify({tankTool: MarkerType.MEDIUM_TANK } as MapTool))\r\n    }, [])\r\n\r\n    const onClickCursorTool = useCallback((event) => {\r\n        webSocketContext.socket.emit(\"selectedToolChanged\", JSON.stringify({cursorTool: true } as MapTool))\r\n    }, [])\r\n\r\n    const onClearMap = useCallback((event) => {\r\n        webSocketContext.socket.emit(\"clearedMarkers\")\r\n    }, [webSocketContext])\r\n\r\n    const onClickSavePositions = useCallback((event) => {\r\n        // dispatch(saveTacticPositions(positionList));\r\n    }, []);\r\n\r\n    const onChangeMap = useCallback((event: React.ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        webSocketContext.socket.emit(\"mapChanged\", JSON.stringify(event.target.value))\r\n    }, [webSocketContext])\r\n\r\n\r\n\r\n    const renderFormGroup = () => {\r\n        return <FormGroup>\r\n            <FormControl>\r\n                <InputLabel id=\"map-form-control\">Map</InputLabel>\r\n                <Select\r\n                    labelId=\"map-form-control\"\r\n                    id=\"map-select\"\r\n                    value={selectedMap.name_i18n}\r\n                    onChange={onChangeMap}\r\n                >\r\n                    {createMapDropdownOptions()}\r\n                </Select>\r\n            </FormControl>\r\n        </FormGroup>\r\n    }\r\n\r\n    return <div className={classes.tools}>\r\n        {/* TODO - create actions enum and create html dynamically*/}\r\n        {renderFormGroup()}\r\n        <Button className={classes.tool} variant=\"outlined\" onClick={onClickCursorTool}>\r\n            <NearMeIcon />\r\n        </Button>\r\n        <Button className={classes.tool} variant=\"outlined\" onClick={onClickSavePositions}>\r\n            Save\r\n            </Button>\r\n        <Button className={classes.tool} variant=\"outlined\" onClick={onClearMap}>\r\n            Clear\r\n        </Button>\r\n        <Button className={classes.buttonHeavy} variant=\"outlined\" onClick={onClickHeavyTankTool}>\r\n            <img className={classes.iconHeavy} src=\"https://na-wotp.wgcdn.co/dcont/fb/image/heavy_tank_icon_s.png\" />\r\n        </Button>\r\n        <Button className={classes.buttonMedium} variant=\"outlined\" onClick={onClickMediumTankTool}>\r\n            <img className={classes.iconMedium} src=\"https://na-wotp.wgcdn.co/dcont/fb/image/medium_tank_icon_s.png\" />\r\n        </Button>\r\n    </div>\r\n}\r\n\r\nexport default MapTools;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\WebSocketContext.tsx",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\mapInteractionSlice.ts",["464"],"import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '.';\r\nimport { MapTool } from '../screens/tactics/components/interactive-map/MapTools';\r\n\r\nconst MAP_STATE_STORAGE_KEY = 'mapState'\r\n\r\nexport enum MarkerType {\r\n    CURSOR = \"CURSOR\",\r\n    MEDIUM_TANK = \"MEDIUM_TANK\",\r\n    HEAVY_TANK = \"HEAVY_TANK\",\r\n    LIGHT_TANK = \"LIGHT_TANK\",\r\n    SPG = \"SPG\",\r\n    TD = \"TD\"\r\n}\r\n\r\nexport type Point = {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nexport type MapMarker = Point & {\r\n    markerType: MarkerType\r\n}\r\n\r\ninterface MapState {\r\n    room: number,\r\n    markers: MapMarker[],\r\n    cursorPosition: Point,\r\n    usersInRoom: any[], // User[]\r\n    selectedTool: MapTool\r\n}\r\n\r\nconst loadState = () => {\r\n    const storage = localStorage.getItem(MAP_STATE_STORAGE_KEY)\r\n    if (storage !== null) {\r\n        return JSON.parse(storage) as MapState;\r\n    }\r\n}\r\n\r\nexport const saveMapState = (state: MapState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(MAP_STATE_STORAGE_KEY, serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\nconst createDefaultMapState = () => {\r\n    return {\r\n        room: 0,\r\n        markers: [],\r\n        usersInRoom: [],\r\n        cursorPosition: { x: 0, y: 0 },\r\n        selectedTool: {\r\n            cursorTool: true\r\n        } as MapTool,\r\n    } as unknown as MapState\r\n}\r\n\r\nconst initialState = loadState() || createDefaultMapState()\r\n\r\nexport const mapInteractionSlice = createSlice({\r\n    name: 'map',\r\n    initialState,\r\n    reducers: {\r\n        savePositionList: (state, action: PayloadAction<any>) => {\r\n            const positionList = action.payload;\r\n            //  roomSlice.actions.sendMessage({\r\n            //     eventType: NEW_CHAT_MESSAGE_EVENT,\r\n            //     roomId: 1,\r\n            //     message: positionList\r\n            // })\r\n            saveMapState(state);\r\n        },\r\n        moveCursor: (state, action: PayloadAction<Point>) => {\r\n            const point = action.payload\r\n            // if (Math.abs(state.cursorPosition.x - point.x) > 10 || Math.abs(state.cursorPosition.y - point.y) > 10) {\r\n                state.cursorPosition = point\r\n            // }\r\n        },\r\n        addMarker: (state, action: PayloadAction<MapMarker>) => {\r\n            state.markers.push(action.payload)\r\n        },\r\n        clearMarkers: (state) => {\r\n            state.markers = [];\r\n        },\r\n        setActiveTool: (state, action: PayloadAction<MapTool>) => {\r\n            const tool = action.payload\r\n            state.selectedTool = tool;\r\n        },\r\n    },\r\n    extraReducers: {}\r\n});\r\n\r\nexport const mapInteractionStateSelector = (state: RootState) => state.mapInteractionState\r\nexport const cursorPositionSelector = createSelector([mapInteractionStateSelector], (state) => state.cursorPosition)\r\nexport const selectedToolSelector = createSelector([mapInteractionStateSelector], (state) => state.selectedTool)\r\nexport const markersSelector = createSelector([mapInteractionStateSelector], (state) => state.markers)\r\n\r\n\r\nexport const { savePositionList, setActiveTool, moveCursor, addMarker, clearMarkers } = mapInteractionSlice.actions;\r\nexport default mapInteractionSlice.reducer;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\MapCanvas.tsx",["465","466","467","468","469","470"],"import React from 'react'\r\nimport { TankType } from '../../../vehicles/types'\r\nimport { Point } from './InteractiveMap'\r\nimport { MapTool } from './MapTools'\r\nimport useCanvas from './useCanvas'\r\n\r\nexport interface MapCanvasProps {\r\n    draw: Function,\r\n    preDraw: Function,\r\n    postDraw: Function,\r\n    onMouseDown: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void,\r\n    onMouseUp: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void,\r\n    onMouseMove: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void,\r\n    positionList: Point[],\r\n    cursorPosition: Point,\r\n    activeTool: MapTool,\r\n    styles: string\r\n}\r\n\r\nconst _predraw = (context: CanvasRenderingContext2D) => { }\r\nconst _postdraw = () => { }\r\n\r\nconst MapCanvas = (props: MapCanvasProps) => {\r\n    const { draw, preDraw = _predraw, postDraw = _postdraw, styles, onMouseDown, onMouseMove, onMouseUp, positionList, cursorPosition } = props\r\n    const canvasRef = useCanvas(props)\r\n\r\n    return <canvas\r\n        className={styles}\r\n        ref={canvasRef}\r\n        onMouseUp={onMouseUp}\r\n        onMouseDown={onMouseDown}\r\n        onMouseMove={onMouseMove}\r\n    ></canvas>\r\n}\r\n\r\nexport default MapCanvas",["471","472"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\useCanvas.ts",["473","474","475","476","477"],"import { useRef, useEffect } from 'react'\r\nimport { MapMarker, MarkerType, Point } from '../../../../slices/mapInteractionSlice'\r\nimport { MapTool } from './MapTools'\r\n\r\nexport interface UseCanvasProps {\r\n    draw?: Function,\r\n    preDraw?: Function,\r\n    postDraw?: Function,\r\n    onMouseDown: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void,\r\n    onMouseUp: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void,\r\n    onMouseMove: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void,\r\n    markers?: MapMarker[],\r\n    cursorPosition?: Point,\r\n    activeTool: MapTool,\r\n    styles?: string\r\n}\r\n\r\n\r\nconst useCanvas = (props: UseCanvasProps) => {\r\n    console.log(\"canvas init with props: \", props)\r\n    const MARGIN_PROCENT = 10;\r\n    const SIZE = 400;\r\n    const canvasElement = document.createElement(\"canvas\")\r\n    canvasElement.width = SIZE;\r\n    canvasElement.height = SIZE;\r\n    const canvasRef = useRef<HTMLCanvasElement>(canvasElement)\r\n    const { markers, cursorPosition, activeTool } = props\r\n\r\n    let currentRadius = 5;\r\n    const endRadius = 20;\r\n\r\n    const drawMarkers = (context: CanvasRenderingContext2D) => {\r\n        // const canvas = canvasRef.current as HTMLCanvasElement;\r\n        // canvas.height = canvas.width = SIZE;\r\n        console.log(\"drawing markers \", { markers })\r\n        if (context) {\r\n            // if (markers?.length === 0) {\r\n            //     context.clearRect(0, 0, SIZE, SIZE);\r\n            //     return;\r\n            // }\r\n\r\n            markers?.forEach((marker: MapMarker) => {\r\n                const img = document.createElement(\"img\") as HTMLImageElement;\r\n                img.width = 5;\r\n                img.height = 5;\r\n\r\n                if (marker.markerType === MarkerType.MEDIUM_TANK) {\r\n                    img.src = 'https://na-wotp.wgcdn.co/dcont/fb/image/medium_tank_icon_s.png';\r\n                }\r\n                if (marker.markerType === MarkerType.HEAVY_TANK) {\r\n                    img.src = 'https://na-wotp.wgcdn.co/dcont/fb/image/heavy_tank_icon_s.png';\r\n                    img.style.zIndex = \"0\";\r\n                }\r\n                context.beginPath();\r\n                context.fillStyle = \"#FF0000\";\r\n                context.drawImage(img, marker.x-12, marker.y-10, 20, 20);\r\n                // context.fillRect(marker.x, marker.y, 5, 5);\r\n                context.fill();\r\n                context.stroke();\r\n            })\r\n        }\r\n    }\r\n\r\n    const drawPoint = (context: CanvasRenderingContext2D) => {\r\n        if (context) {\r\n            context.clearRect(0, 0, SIZE, SIZE);\r\n\r\n            if (cursorPosition && cursorPosition.x && cursorPosition.y) {\r\n                context.beginPath();\r\n                context.fillStyle = \"#FF0000\";\r\n                context.arc(cursorPosition.x, cursorPosition.y, 10, 0 * Math.PI, 2 * Math.PI)\r\n                context.fill();\r\n                context.stroke()\r\n\r\n                // animate(context, cursorPosition, currentRadius)\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    // const animate = (context: CanvasRenderingContext2D, cursorPosition: Point, radius: number) => {\r\n    //     currentRadius += 5;\r\n\r\n    //     if (currentRadius < endRadius) {\r\n    //         context.clearRect(cursorPosition.x - currentRadius, cursorPosition.y - currentRadius, cursorPosition.x + currentRadius, cursorPosition.y + currentRadius)\r\n    //         context.arc(cursorPosition.x, cursorPosition.y, currentRadius, 0 * Math.PI, 2 * Math.PI)\r\n    //         context.stroke();\r\n    //         requestAnimationFrame(() => {\r\n    //             animate(context, cursorPosition, currentRadius)\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current\r\n        canvas.width = 400;\r\n        canvas.height = 400;\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(canvasRef.current.width, canvasRef.current.height)\r\n        const context = canvasRef.current.getContext('2d')\r\n\r\n        const render = (context: CanvasRenderingContext2D) => {\r\n            context.clearRect(0, 0, SIZE, SIZE)\r\n\r\n            drawMarkers(context)\r\n\r\n            if (activeTool.cursorTool) {\r\n                drawPoint(context)\r\n            }\r\n        }\r\n\r\n        if (context) {\r\n            render(context)\r\n        }\r\n    }, [drawPoint, drawMarkers, canvasRef, markers, cursorPosition, activeTool])\r\n\r\n\r\n    return canvasRef\r\n}\r\n\r\nexport default useCanvas\r\n\r\n// const resizeCanvasToDisplaySize = (canvas: HTMLCanvasElement) => {\r\n//     const { width, height } = canvas.getBoundingClientRect()\r\n\r\n//     if (canvas.width !== width || canvas.height !== height) {\r\n//         const { devicePixelRatio: ratio = 1 } = window\r\n//         const context = canvas.getContext('2d')\r\n//         canvas.width = width\r\n//         canvas.height = height\r\n//         if (context) {\r\n//             context.scale(ratio, ratio)\r\n//         }\r\n//         return true\r\n//         // here you can return some usefull information like delta width and delta height instead of just true\r\n//         // this information can be used in the next redraw...\r\n//     }\r\n\r\n//     return false\r\n// }","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\vehicles\\types.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\useLiveMapInteraction.ts",["478","479","480","481"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\mapsApiSlice.ts",["482","483","484","485","486"],"import { createAsyncThunk, createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { FetchStatus, RootState } from \".\";\r\nimport APPLICATION_ID from \"../api/config\";\r\nimport { WoTMap } from \"../store/types/interfaces/WoTMap.interface\";\r\nimport { buildParamStr } from \"../utils/url/urlUtils\";\r\n\r\nconst MAP_API = 'https://api.worldoftanks.ru/wot/encyclopedia/arenas/'\r\nconst MAP_IMAGES_API = \"https://stratsketch.com/maps/wot/thumb/\"\r\n\r\nexport const MAPS_API_STATE_STORAGE_KEY = 'mapsApiState';\r\n\r\ninterface MapsApiState {\r\n    mapFetchError: any,\r\n    mapFetchStatus: FetchStatus,\r\n    maps: WoTMap[],\r\n    selectedMap: WoTMap\r\n}\r\n\r\nconst loadState = () => {\r\n    const storage = localStorage.getItem(MAPS_API_STATE_STORAGE_KEY)\r\n    if (storage !== null) {\r\n        return JSON.parse(storage) as MapsApiState;\r\n    }\r\n}\r\n\r\nconst saveState = (state: MapsApiState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(MAPS_API_STATE_STORAGE_KEY, serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\nconst createDefaultMapsApiState = () => {\r\n    return {\r\n        mapFetchStatus: 'idle',\r\n        mapFetchError: null,\r\n        maps: [{ arena_id: \"NONE\", name_i18n: \"NONE\" }] as WoTMap[],\r\n        selectedMap: { arena_id: \"NONE\", name_i18n: \"NONE\" } as WoTMap\r\n    } as MapsApiState;\r\n}\r\nconst initialState: MapsApiState = loadState() || createDefaultMapsApiState();\r\n\r\nconst buildMapsQueryUrl: (url: string, params: any) => string = (url, params: any) => {\r\n    const queryParamStr = buildParamStr(params);\r\n    return `${url}?application_id=${APPLICATION_ID}&${queryParamStr}`;\r\n}\r\nconst url = buildMapsQueryUrl(MAP_API, { language: \"en\" })\r\n\r\nexport const fetchMapsThunk = createAsyncThunk('maps/fetchMaps', async () => {\r\n    const response: Response = await fetch(url);\r\n    const json = await response.json();\r\n    return json.data;\r\n})\r\n\r\nexport const mapsApiSlice = createSlice({\r\n    name: 'tactics',\r\n    initialState,\r\n    reducers: {\r\n        changeMap: (state, action: PayloadAction<string>) => {\r\n            const mapId = action.payload\r\n            const mapIndex = state.maps.findIndex((map: WoTMap) => {\r\n                return map.name_i18n === mapId\r\n            })\r\n\r\n            if (mapIndex !== -1) {\r\n                state.selectedMap = { ...state.maps[mapIndex] }\r\n            }\r\n        },\r\n    },\r\n    extraReducers: {\r\n        ['maps/fetchMaps/pending']: (state: MapsApiState, action) => {\r\n            state.mapFetchStatus = 'loading'\r\n        },\r\n        ['maps/fetchMaps/rejected']: (state: MapsApiState, action) => {\r\n            state.mapFetchStatus = 'failed'\r\n            state.mapFetchError = action.error.message\r\n        },\r\n        ['maps/fetchMaps/fulfilled']: (state: MapsApiState, action) => {\r\n            state.mapFetchStatus = 'succeeded'\r\n            const payload = action.payload;\r\n            Object.keys(payload).forEach(key => state.maps.push(payload[key]));\r\n        }\r\n    }\r\n});\r\n\r\nexport default mapsApiSlice.reducer;\r\n\r\nexport const { changeMap } = mapsApiSlice.actions\r\n\r\nexport const mapsApiStateSelector = (state: RootState) => state.mapsApiState;\r\nexport const selectedInteractiveMapSelector = createSelector([mapsApiStateSelector], (state) => state.selectedMap)\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\useAnimationFrame.ts",["487"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\provinces\\Provinces.tsx",["488","489","490","491","492","493","494"],"import { createStyles, makeStyles, Theme, Tooltip, withStyles } from '@material-ui/core';\r\nimport React, { ChangeEvent, MouseEvent, MouseEventHandler, useCallback, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchProvincesThunk, globalMapStateSelector, Province } from '../../slices/globalMapSlice';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { getComparator, Order, stableSort } from '../../utils/generic-table/genericTableUtils';\r\nimport CompetitorsTooltip from './CompetitorsTooltip';\r\nimport GenericTable, { GenericTablePaginationProps } from '../../components/GenericTable';\r\nimport { GenericTableHeadProps, HeadCell } from '../../components/GenericTableHead'\r\nimport { GenericTableBodyProps } from '../../components/GenericTableBody'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        provincesContainer: {\r\n            margin: theme.spacing(1),\r\n            // display: \"flex\",\r\n            // flexDirection: \"column\"\r\n        },\r\n        searchInput: {\r\n            marginBottom: \"2rem\"\r\n        },\r\n        paper: {\r\n            width: '100%',\r\n            marginBottom: theme.spacing(2),\r\n        },\r\n        table: {\r\n            minWidth: 750,\r\n        },\r\n        visuallyHidden: {\r\n            border: 0,\r\n            clip: 'rect(0 0 0 0)',\r\n            height: 1,\r\n            margin: -1,\r\n            overflow: 'hidden',\r\n            padding: 0,\r\n            position: 'absolute',\r\n            top: 20,\r\n            width: 1,\r\n        },\r\n    }),\r\n);\r\n\r\n\r\n// type ProvinceKeys = keyof Province[]\r\nfunction getKeys<T>(someObj: T): (keyof T)[] {\r\n    return Object.keys(someObj) as (keyof T)[]\r\n}\r\n\r\nconst Provinces = () => {\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const columns: (keyof Province)[] = getKeys<Province>(new Province())\r\n\r\n    const [order, setOrder] = useState<Order>('asc');\r\n    const [orderBy, setOrderBy] = useState<keyof Province>('prime_time');\r\n    const [selected, setSelected] = useState<number[]>([]);\r\n    const [page, setPage] = useState(0);\r\n    const [dense, setDense] = useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = useState(100);\r\n\r\n    const buildProvinceHeadCells = () => {\r\n        return columns.map((column: keyof Province) => {\r\n            return {\r\n                disablePadding: false,\r\n                id: column,\r\n                label: column.split(\"_\").join(\" \"),\r\n                numeric: false\r\n            } as HeadCell<Province>\r\n        })\r\n    }\r\n\r\n    const HtmlTooltip = withStyles((theme: Theme) => ({\r\n        tooltip: {\r\n            backgroundColor: '#f5f5f9',\r\n            color: 'rgba(0, 0, 0, 0.87)',\r\n            maxWidth: 220,\r\n            fontSize: theme.typography.pxToRem(12),\r\n            border: '1px solid #dadde9',\r\n        },\r\n    }))(Tooltip);\r\n\r\n    const provinceRowCellsMapper = (labelId: string, row: Province): (value: keyof Province, index: number, array: (keyof Province)[]) => JSX.Element => {\r\n        return column => {\r\n            if ((column === \"competitors\" || column === \"attackers\") && row[column].length > 0) {\r\n                return <HtmlTooltip\r\n                    placement=\"right\"\r\n                    arrow\r\n                    title={\r\n                        <CompetitorsTooltip\r\n                            clanIds={row[column]}\r\n                            provinceId={row[\"province_id\"]} />\r\n                    }\r\n                >\r\n                    <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                        {row[column].length}\r\n                    </TableCell>\r\n                </HtmlTooltip>\r\n            }\r\n            if (column === \"owner_clan_id\") {\r\n                return <HtmlTooltip\r\n                    arrow\r\n                    placement=\"right\"\r\n                    title={\r\n                        <CompetitorsTooltip\r\n                            clanIds={[row[column]]}\r\n                            provinceId={row[\"province_id\"]} />\r\n                    }\r\n                >\r\n                    <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                        {row[column]}\r\n                    </TableCell>\r\n                </HtmlTooltip>\r\n            }\r\n\r\n            if (column === \"battles_start_at\") {\r\n                return <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                    {row[column].split(\"T\")[1]}\r\n                </TableCell>\r\n            }\r\n            if (column === \"active_battles\") {\r\n                return <TableCell></TableCell>\r\n            }\r\n\r\n            return <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                {row[column]}\r\n            </TableCell>\r\n        }\r\n    }\r\n\r\n    const { provincesFetchStatus, provincesFetchErrors, provinces } = useSelector(globalMapStateSelector)\r\n    const [provinceTableHeadCells, setProvinceTableHeadCells] = useState(buildProvinceHeadCells() as HeadCell<Province>[])\r\n    const [localProvinces, setLocalProvinces] = useState([] as Province[])\r\n    // only first time\r\n    useEffect(() => {\r\n        if (provincesFetchStatus === 'idle') {\r\n            dispatch(fetchProvincesThunk())\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (provinces && provinces.length > 0) {\r\n            setLocalProvinces(provinces)\r\n        }\r\n    }, [provinces])\r\n\r\n\r\n    // -------------TBD-------------\r\n    const handleRequestSort = (event: MouseEvent<unknown>, property: keyof Province) => {\r\n        console.log({ event }, { property })\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n    const handleSelectAllClick = (event: ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.checked) {\r\n            // const newSelecteds = provinces.map((province) => province.province_name);\r\n            setSelected(Array.from({ length: provinces.length }, (x, i) => i));\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleRowClick = (index: number) => {\r\n        const selectedIndex = selected.indexOf(index);\r\n\r\n        if (selectedIndex === -1) {\r\n            setSelected([...selected, index])\r\n            return;\r\n        }\r\n\r\n        if (selectedIndex === 0) {\r\n            setSelected([...selected.slice(1)]);\r\n            return;\r\n        }\r\n        if (selectedIndex === selected.length - 1) {\r\n            setSelected([...selected.slice(0, -1)]);\r\n            return;\r\n        }\r\n        if (selectedIndex > 0) {\r\n            setSelected([\r\n                ...selected.slice(0, selectedIndex),\r\n                ...selected.slice(selectedIndex + 1),\r\n            ])\r\n        }\r\n    }\r\n\r\n    const handleChangePage = useCallback((event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        setPage(newPage);\r\n    }, [page]);\r\n\r\n    const handleChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setDense(event.target.checked);\r\n    };\r\n\r\n    const emptyRows = useCallback(() => rowsPerPage - Math.min(rowsPerPage, provinces.length - page * rowsPerPage), [rowsPerPage, provinces, page]);\r\n    // -------------END TBD-------------\r\n\r\n    const buildTableWithPagination = () => {\r\n        if (localProvinces.length > 0) {\r\n            const tableRowsSorted = stableSort<Province>(localProvinces, getComparator<Province>(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n\r\n            const provinceTableProps = {\r\n                classes: classes as ReturnType<typeof useStyles>,\r\n                paginationEnabled: true,\r\n                headerProps: {\r\n                    headCells: provinceTableHeadCells,\r\n                    classes: classes,\r\n                    numSelected: selected.length,\r\n                    order: order,\r\n                    orderBy: orderBy,\r\n                    onSelectAllClick: handleSelectAllClick,\r\n                    onRequestSort: handleRequestSort,\r\n                    rowCount: localProvinces.length,\r\n                } as GenericTableHeadProps<Province>,\r\n                bodyProps: {\r\n                    rows: tableRowsSorted,\r\n                    columns: columns,\r\n                    selectedRows: selected,\r\n                    rowCellsMapper: provinceRowCellsMapper,\r\n                    onRowClick: handleRowClick\r\n                } as GenericTableBodyProps<Province>,\r\n                paginationProps: {\r\n                    rowsPerPageOptions: [5, 10, 25, 50, 100],\r\n                    component: \"div\",\r\n                    count: provinces.length ?? 0,\r\n                    rowsPerPage: rowsPerPage,\r\n                    page: page,\r\n                    onChangePage: handleChangePage,\r\n                    onChangeRowsPerPage: handleChangeRowsPerPage\r\n                } as GenericTablePaginationProps<Province>,\r\n                toolbarProps: {\r\n                    numSelected: selected.length,\r\n                    title: 'Provinces'\r\n                }\r\n            }\r\n            return <GenericTable<Province> {...provinceTableProps} />\r\n        }\r\n\r\n    }\r\n\r\n    const handleChangeRowsPerPage = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    }, [rowsPerPage, page]);\r\n\r\n\r\n    return <div className={classes.provincesContainer}>\r\n        <Paper className={classes.paper}>\r\n            {buildTableWithPagination()}\r\n        </Paper>\r\n        <FormControlLabel\r\n            control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n            label=\"Dense padding\"\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default Provinces;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\globalMapSlice.ts",["495","496","497"],"import { createAsyncThunk, createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { FetchStatus, RootState } from \".\";\r\nimport APPLICATION_ID from \"../api/config\";\r\nimport { buildParamStr } from \"../utils/url/urlUtils\";\r\n\r\nexport enum GlobalMapFronts {\r\n    FRONT_TIER_10 = \"season_16_eu_tier10m\",\r\n    FRONT_TIER_8 = \"season_16_eu_tier8m\"\r\n}\r\n\r\nexport class Province {\r\n    arena_id!: string;\r\n    // Map ID\r\n    // Map ID\r\n    arena_name!: string;\r\n    // Localized map name\r\n    // Localized map name\r\n    attackers!: number[];\r\n    // List of IDs of attacking clans\r\n    // List of IDs of attacking clans\r\n    battles_start_at!: string;\r\n    // Battles start time in UTC\r\n    // Battles start time in UTC\r\n    competitors!: number[];\r\n    // List of IDs of participating clans\r\n    // List of IDs of participating clans\r\n    current_min_bet!: number;\r\n    // Current minimum bid\r\n    // Current minimum bid\r\n    daily_revenue!: number;\r\n    // Daily income\r\n    // Daily income\r\n    front_id!: string;\r\n    // Front ID\r\n    // Front ID\r\n    front_name!: string;\r\n    // Front name\r\n    // Front name\r\n    is_borders_disabled!: boolean;\r\n    // Province borders are closed\r\n    // Province borders are closed\r\n    landing_type!: string;\r\n    // Landing type: auction, tournament or null\r\n    // Landing type: auction, tournament or null\r\n    last_won_bet!: number;\r\n    // Last winning bid\r\n    // Last winning bid\r\n    max_bets!: number;\r\n    // Maximum number of bids\r\n    // Maximum number of bids\r\n    neighbours!: string[];\r\n    // List of adjacent provinces' IDs\r\n    // List of adjacent provinces' IDs\r\n    owner_clan_id!: number;\r\n    // Owning clan ID\r\n    // Owning clan ID\r\n    pillage_end_at!: string;\r\n    // Date when province will restore its revenue after ransack\r\n    // Date when province will restore its revenue after ransack\r\n    prime_time!: string;\r\n    // Prime Time in UTC\r\n    // Prime Time in UTC\r\n    province_id!: string;\r\n    // Province ID\r\n    // Province ID\r\n    province_name!: string;\r\n    // Province name\r\n    // Province name\r\n    revenue_level!: number;\r\n    // Income level from 0 to 11. 0 value means that income was not raised.\r\n    // Income level from 0 to 11. 0 value means that income was not raised.\r\n    round_number!: number;\r\n    // Round\r\n    // Round\r\n    server!: string;\r\n    // Server ID\r\n    // Server ID\r\n    status!: string;\r\n    // Tournament status: STARTED, FINISHED or null\r\n    // Tournament status: STARTED, FINISHED or null\r\n    uri!: string;\r\n    // Relative link to province\r\n    // Relative link to province\r\n    world_redivision!: boolean;\r\n    // Indicates if Repartition of the World is active\r\n    // Indicates if Repartition of the World is active\r\n    active_battles!: ActiveBattle;\r\n}\r\n\r\ninterface ActiveBattle {\r\n    // Current battles\r\n    battle_reward: number\r\n    // Award\r\n    // Warning. The field will be disabled.\r\n    round: number\r\n    // Round\r\n    start_at: string\r\n    // Battle start time in UTC\r\n    clan_a: ClanInBattle\r\n    clan_b: ClanInBattle\r\n}\r\n\r\ninterface ClanInBattle {\r\n    // First challenging clan ID\r\n    battle_reward: number\r\n    // Award\r\n    clan_id: number\r\n    // Clan ID\r\n    loose_elo_delta: number\r\n    // Changes in Elo-rating due to defeat\r\n    win_elo_delta: number\r\n    // Changes in Elo-rating due to victory\r\n}\r\n\r\ninterface GlobalMapState {\r\n    provincesFetchStatus: FetchStatus,\r\n    provincesFetchErrors: boolean,\r\n    provinces: Province[],\r\n}\r\n\r\nconst initialState: GlobalMapState = {\r\n    provincesFetchStatus: 'idle',\r\n    provincesFetchErrors: false,\r\n    provinces: ({} as any) as Province[],\r\n}\r\nconst buildProvincesQueryUrl: (url: string, params: any) => string = (url, params: any) => {\r\n    const queryParamStr = buildParamStr(params);\r\n    return `${url}?application_id=${APPLICATION_ID}&${queryParamStr}`;\r\n}\r\n\r\nconst PROVINCES_API = 'https://api.worldoftanks.eu/wot/globalmap/provinces/'\r\nconst provincesApiUrl = buildProvincesQueryUrl(PROVINCES_API, { front_id: GlobalMapFronts.FRONT_TIER_10 })\r\n\r\n\r\nexport const fetchProvincesThunk = createAsyncThunk('globalMap/fetchProvinces', async () => {\r\n    const response: Response = await fetch(provincesApiUrl);\r\n    const json = await response.json();\r\n    return json.data;\r\n})\r\n\r\nexport const globalMapSlice = createSlice({\r\n    name: 'globalMap',\r\n    initialState,\r\n    reducers: {\r\n    },\r\n    extraReducers: {\r\n        ['globalMap/fetchProvinces/fulfilled']: (state, action: PayloadAction<Province[]>) => {\r\n            if (!!action.payload) {\r\n                state.provinces = action.payload;\r\n                state.provincesFetchStatus = 'succeeded';\r\n                state.provincesFetchErrors = false;\r\n            }\r\n        },\r\n        ['globalMap/fetchProvinces/rejected']: (state, action) => {\r\n            state.provincesFetchStatus = 'failed'\r\n            state.provincesFetchErrors = true\r\n        },\r\n        ['globalMap/fetchProvinces/pending']: (state, action) => {\r\n            state.provincesFetchStatus = 'loading';\r\n        },\r\n    }\r\n});\r\n\r\nexport const globalMapStateSelector = (state: RootState) => state.globalMapState as GlobalMapState;\r\nexport const provincesSelector = createSelector([globalMapStateSelector], (state) => state.provinces)\r\nexport default globalMapSlice.reducer","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\provinces\\ProvinceComponent.tsx",[],["498","499"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\utils\\generic-table\\genericTableUtils.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\components\\GenericTableToolbar.tsx",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\components\\GenericTableHead.tsx",["500"],"import { TableHead, TableRow, TableCell, Checkbox, TableSortLabel } from \"@material-ui/core\";\r\nimport React, { ReactNode, useCallback } from \"react\"\r\nimport { Order } from \"../utils/generic-table/genericTableUtils\";\r\n\r\nexport interface GenericTableHeadProps<T> {\r\n    classes?: any; //ReturnType<typeof useStyles>;\r\n    numSelected: number;\r\n    onRequestSort?: (event: React.MouseEvent<unknown>, property: keyof T) => void;\r\n    onSelectAllClick?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    order: Order;\r\n    orderBy: string;\r\n    rowCount: number;\r\n    headCells: HeadCell<T>[]\r\n}\r\n\r\nexport interface HeadCell<T> {\r\n    disablePadding: boolean;\r\n    id: keyof T;\r\n    label: string;\r\n    numeric: boolean;\r\n}\r\n\r\n\r\nconst GenericTableHead = function <T>(props: GenericTableHeadProps<T> & { children?: ReactNode }) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort, headCells } = props;\r\n    const createSortHandler = (property: keyof T) => (event: React.MouseEvent<unknown>) => {\r\n        if (!!onRequestSort) {\r\n            onRequestSort(event, property)\r\n        }\r\n    };\r\n\r\n    const buildCheckboxCell = () => {\r\n        console.log({ rowCount, headCells }, { numSelected })\r\n        return <TableCell padding=\"checkbox\">\r\n            <Checkbox\r\n                indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                checked={rowCount > 0 && numSelected === rowCount}\r\n                onChange={onSelectAllClick}\r\n                inputProps={{ 'aria-label': 'select all desserts' }}\r\n            />\r\n        </TableCell>\r\n    }\r\n\r\n    const buildCells = () => {\r\n        return headCells.map((headCell) => (\r\n            <TableCell\r\n                key={headCell.label}\r\n                align={headCell.numeric ? 'right' : 'left'}\r\n                padding={headCell.disablePadding ? 'none' : 'default'}\r\n                sortDirection={orderBy === headCell.id ? order : false}\r\n            >\r\n                <TableSortLabel\r\n                    active={orderBy === headCell.id}\r\n                    direction={orderBy === headCell.id ? order : 'asc'}\r\n                    onClick={createSortHandler(headCell.id)}\r\n                >\r\n                    {headCell.label}\r\n                    {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                            {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                        </span>\r\n                    ) : null}\r\n                </TableSortLabel>\r\n            </TableCell>\r\n        ))\r\n    }\r\n\r\n    const buildTableHead = useCallback(() => {\r\n        return <TableHead>\r\n            <TableRow>\r\n                {buildCheckboxCell()}\r\n                {buildCells()}\r\n            </TableRow>\r\n        </TableHead>\r\n    }, [props])\r\n\r\n\r\n    return buildTableHead();\r\n}\r\n\r\n\r\nexport default GenericTableHead;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\provinces\\CompetitorsTooltip.tsx",["501","502","503","504","505"],"import { Tooltip, Typography } from \"@material-ui/core\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport { ClanInSearch, clanListFetchSelector, fetchClanDetailsThunk, addClanInSearch, addProvinceToClanInSearch } from \"../../slices/clanSlice\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\ninterface CompetitorsTooltipProps {\r\n    clanIds: number[]\r\n    provinceId: string\r\n}\r\n\r\nconst CompetitorsTooltip = (props: CompetitorsTooltipProps) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [clanNames, setClanNames] = useState([] as string[])\r\n    const { clansInSearch, clanList } = useSelector(clanListFetchSelector)\r\n    const { clanIds, provinceId } = props\r\n\r\n    const buildFragment = () => {\r\n        console.log({ clansInSearch }, { provinceId })\r\n        return clansInSearch.map(clanInSearch => {\r\n            if (clanInSearch.provinceIds && clanInSearch.provinceIds.includes(provinceId)) {\r\n                if (clanInSearch.clanDetails) {\r\n                    return <Typography color=\"inherit\">{clanInSearch.clanDetails.tag}</Typography>\r\n                } else {\r\n                    return <p>Loading clan name</p> // show loading while not all loaded\r\n                }\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log({ clanIds }, { clansInSearch })\r\n        const clansAlreadyInSearch = clansInSearch.map(clanInSearch => clanInSearch.clanId)\r\n\r\n        if (clanIds.length > 0) {\r\n            clanIds.forEach(clanId => {\r\n                const existingClanIndex = clansAlreadyInSearch.findIndex(id => id === clanId)\r\n                if (existingClanIndex !== -1) {\r\n                    const existingProvinces = clansInSearch[existingClanIndex].provinceIds\r\n                    if (!existingProvinces.includes(provinceId)) {\r\n                        dispatch(addProvinceToClanInSearch({ provinceId, clanId }))\r\n                    }\r\n                } else {\r\n                    dispatch(addClanInSearch({\r\n                        clanId,\r\n                        clanDetailsFetchErrors: false,\r\n                        clanDetailsFetchStatus: 'idle',\r\n                        provinceIds: [provinceId]\r\n                    } as ClanInSearch))\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n        if (clansInSearch.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const allClansLoaded = clansInSearch.map(clanInSearch => clanInSearch.clanDetailsFetchStatus === \"succeeded\").length === clansInSearch.length\r\n        if (!allClansLoaded) {\r\n            return;\r\n        }\r\n\r\n        clansInSearch.forEach(clanInSearch => {\r\n            if (clanInSearch.clanDetailsFetchStatus === 'idle') {\r\n                console.log(\"starting processing clan id: \", clanInSearch.clanId)\r\n                dispatch(fetchClanDetailsThunk(clanInSearch.clanId))\r\n            }\r\n        })\r\n    }, [clanList, clanIds, clanNames, provinceId])\r\n\r\n    return <React.Fragment>\r\n        {buildFragment()}\r\n    </React.Fragment>\r\n}\r\n\r\nexport default CompetitorsTooltip","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\tanksSlice.ts",["506","507","508","509"],"import { createAsyncThunk, createSelector, createSlice } from \"@reduxjs/toolkit\";\r\nimport { FetchStatus, RootState } from \".\";\r\nimport APPLICATION_ID from \"../api/config\";\r\nimport { VehicleResponse } from \"../screens/vehicles/types\";\r\nimport { buildParamStr } from \"../utils/url/urlUtils\";\r\n\r\nconst TANKS_API = \"https://api.worldoftanks.eu/wot/encyclopedia/vehicles/\"\r\n\r\nexport const VEHICLES_API_STATE_STORAGE_KEY = 'mapsApiState';\r\n\r\ninterface TanksState {\r\n    tanksFetchStatus: FetchStatus,\r\n    tanksFetchError: any,\r\n    tanks: VehicleResponse,\r\n}\r\n\r\nconst createDefaultTanksState = () => {\r\n    return {\r\n        tanksFetchStatus: 'idle',\r\n        tanksFetchError: null,\r\n        tanks: [],\r\n    } as TanksState;\r\n}\r\nconst initialState: TanksState = createDefaultTanksState();\r\n\r\nconst buildTanksQueryUrl: (url: string, params: any) => string = (url, params: any) => {\r\n    const queryParamStr = buildParamStr(params);\r\n    return `${url}?application_id=${APPLICATION_ID}&${queryParamStr}`;\r\n}\r\n\r\n\r\nexport const fetchTanksThunk = createAsyncThunk(\r\n    'tanks/fetchTanks',\r\n    async (params: { vehicleIds?: [], tier?: number } = { tier: 10 }) => {\r\n        const response: Response = await fetch(buildTanksQueryUrl(TANKS_API, params));\r\n        const json = await response.json();\r\n        return json.data;\r\n    }\r\n)\r\n\r\nexport const tanksSlice = createSlice({\r\n    name: 'tactics',\r\n    initialState,\r\n    reducers: {\r\n    },\r\n    extraReducers: {\r\n        ['tanks/fetchTanks/pending']: (state: TanksState, action) => {\r\n            state.tanksFetchStatus = 'loading'\r\n        },\r\n        ['tanks/fetchTanks/rejected']: (state: TanksState, action) => {\r\n            state.tanksFetchStatus = 'failed'\r\n            state.tanksFetchError = action.error.message\r\n        },\r\n        ['tanks/fetchTanks/fulfilled']: (state: TanksState, action) => {\r\n            state.tanksFetchStatus = 'succeeded'\r\n            const payload = action.payload as VehicleResponse;\r\n            state.tanks = payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport default tanksSlice.reducer;\r\n\r\nexport const { } = tanksSlice.actions\r\n\r\nexport const tanksStateSelector = (state: RootState) => state.tanksState;\r\nexport const tanksFetchSelector = createSelector(\r\n    [tanksStateSelector],\r\n    (tanksState) => {\r\n        return {\r\n            tanksFetchStatus: tanksState.tanksFetchStatus,\r\n            tanksFetchErrors: tanksState.tanksFetchError,\r\n            tanks: tanksState.tanks as VehicleResponse\r\n        }\r\n    }\r\n)","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\tankStastisticsSlice.ts",["510","511","512","513","514"],"import { createAsyncThunk, createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { FetchStatus, RootState } from \".\";\r\nimport APPLICATION_ID from \"../api/config\";\r\nimport { TankStatistics, User, VehicleResponse } from \"../screens/vehicles/types\";\r\nimport { buildParamStr } from \"../utils/url/urlUtils\";\r\n\r\nconst TANKS_API = \"https://api.worldoftanks.eu/wot/encyclopedia/vehicles/\"\r\nconst TANKS_STATISTICS_URL = \"https://api.worldoftanks.eu/wot/tanks/stats/\"\r\n\r\nexport const VEHICLES_API_STATE_STORAGE_KEY = 'mapsApiState';\r\n\r\n\r\nexport interface PlayerTankStatistics {\r\n    player: User,\r\n    tankStatisticsFetchStatus: FetchStatus,\r\n    tankStatisticsFetchError: any,\r\n    tankStatistics?: TankStatistics[],\r\n}\r\n\r\n\r\ninterface TankStatisticsState {\r\n    playerTankStatistics: PlayerTankStatistics[]\r\n}\r\n\r\ninterface PlayerTankStatisticsQuery {\r\n    tank_id?: number,\r\n    account_id: number\r\n}\r\n\r\nconst createDefaultTankStatisticsState = () => {\r\n    return {\r\n        playerTankStatistics: []\r\n    } as TankStatisticsState;\r\n}\r\nconst initialState: TankStatisticsState = createDefaultTankStatisticsState();\r\n\r\nconst buildTanksQueryUrl: (url: string, params: any) => string = (url, params: any) => {\r\n    const queryParamStr = buildParamStr(params);\r\n    return `${url}?application_id=${APPLICATION_ID}&${queryParamStr}`;\r\n}\r\n\r\nexport const fetchTankStatisticsByPlayerThunk = createAsyncThunk(\r\n    'tanks/fetchTankStatistics',\r\n    async (params: PlayerTankStatisticsQuery) => {\r\n        const response: Response = await fetch(buildTanksQueryUrl(TANKS_STATISTICS_URL, params));\r\n        const json = await response.json();\r\n        return json.data[params.account_id];\r\n    }\r\n)\r\n\r\n\r\nexport const tankStatisticsSlice = createSlice({\r\n    name: 'tactics',\r\n    initialState,\r\n    reducers: {\r\n        addPlayerTankStatistics: (state, action: PayloadAction<PlayerTankStatistics>) => {\r\n            const playerTankStatistics = action.payload;\r\n            state.playerTankStatistics.push({ ...playerTankStatistics })\r\n        }\r\n    },\r\n    extraReducers: {\r\n        ['tanks/fetchTankStatistics/pending']: (state: TankStatisticsState, action) => {\r\n            const playerTankStatisticsIndex = state.playerTankStatistics.findIndex(playerTankStatistics => playerTankStatistics.player.account_id === action.meta.arg.account_id)\r\n            state.playerTankStatistics[playerTankStatisticsIndex].tankStatisticsFetchStatus = 'loading'\r\n        },\r\n        ['tanks/fetchTankStatistics/rejected']: (state: TankStatisticsState, action) => {\r\n            const playerTankStatisticsIndex = state.playerTankStatistics.findIndex(playerTankStatistics => playerTankStatistics.player.account_id === action.meta.arg.account_id)\r\n            state.playerTankStatistics[playerTankStatisticsIndex].tankStatisticsFetchStatus = 'failed'\r\n            state.playerTankStatistics[playerTankStatisticsIndex].tankStatisticsFetchError = true\r\n        },\r\n        ['tanks/fetchTankStatistics/fulfilled']: (state: TankStatisticsState, action) => {\r\n            const playerTankStatisticsIndex = state.playerTankStatistics.findIndex(playerTankStatistics => playerTankStatistics.player.account_id === action.meta.arg.account_id)\r\n            state.playerTankStatistics[playerTankStatisticsIndex].tankStatisticsFetchStatus = 'succeeded'\r\n            state.playerTankStatistics[playerTankStatisticsIndex].tankStatisticsFetchError = false\r\n            state.playerTankStatistics[playerTankStatisticsIndex].tankStatistics = [...action.payload] as TankStatistics[]\r\n        }\r\n    }\r\n});\r\n\r\nexport default tankStatisticsSlice.reducer;\r\n\r\nexport const { addPlayerTankStatistics } = tankStatisticsSlice.actions\r\n\r\n\r\nexport const tankStatisticsStateSelector = (state: RootState) => state.tankStatisticsState;\r\n\r\nexport const playerTankStatisticsSelector = createSelector(\r\n    [tankStatisticsStateSelector],\r\n    (tankStatisticsState) => tankStatisticsState.playerTankStatistics\r\n)\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\PlayerVehicleStatistics.tsx",["515","516","517","518","519"],"import React, { useCallback, useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { RootState } from \"../../slices\";\r\nimport { fetchTanksThunk, tanksFetchSelector } from \"../../slices/tanksSlice\";\r\nimport { PlayerTankStatistics } from \"../../slices/tankStastisticsSlice\";\r\nimport { TankStatistics } from \"../vehicles/types\";\r\nimport PlayerTankStatisticsTabView, { PlayerTankStatisticsTabViewProps } from \"./PlayerTankStatisticsTabView\";\r\nimport { TankAndStatistics } from \"./useTabPanels\";\r\nimport { getEntries } from \"./VehicleStatisticsTable\";\r\n\r\nconst PlayerVechicleStatistics = () => {\r\n    const params = useParams() as { playerId: string }\r\n    const playerId = +params.playerId\r\n    const dispatch = useDispatch()\r\n\r\n    const getPlayerTanksStatisticsByPlayerId = (state: RootState, playerId: number) => {\r\n        const playerIndex = state.tankStatisticsState.playerTankStatistics.findIndex(\r\n            (playerTankStatistic: PlayerTankStatistics) => +playerTankStatistic.player.account_id === playerId\r\n        )\r\n\r\n        if (playerIndex === -1) {\r\n            return {} as any as PlayerTankStatistics\r\n        } else {\r\n            return state.tankStatisticsState.playerTankStatistics[playerIndex]\r\n        }\r\n    }\r\n\r\n    const playerTanksStatistics: PlayerTankStatistics = useSelector((state: RootState) => getPlayerTanksStatisticsByPlayerId(state, playerId));\r\n    const { tanks, tanksFetchStatus, tanksFetchErrors } = useSelector(tanksFetchSelector)\r\n    const player = playerTanksStatistics.player;\r\n\r\n    useEffect(() => {\r\n        if (tanksFetchStatus === \"idle\") {\r\n            dispatch(fetchTanksThunk())\r\n        }\r\n    }, [tanksFetchStatus])\r\n\r\n    const buildVehicleStatisticsDashboard: () => JSX.Element = useCallback(() => {\r\n        if (tanksFetchStatus === \"loading\" || playerTanksStatistics.tankStatistics === undefined) {\r\n            return <p>Loading tanks</p>;\r\n        }\r\n\r\n\r\n        // const tankStatisticsReducer = (accumulator: Map<any, any>, value: any) => {\r\n        //     map.set(value[0], value[1])\r\n        //     return accumulator\r\n        // }\r\n\r\n        const statsMap = new Map([]);\r\n\r\n        const tier10Statistics = playerTanksStatistics.tankStatistics\r\n            .filter((tankStatistics: TankStatistics) => tanks[tankStatistics.tank_id] !== undefined)\r\n            .map(tankStatistics => {\r\n                const entries = new Map(getEntries<TankStatistics>(tankStatistics))\r\n                const tank = { ...tanks[tankStatistics.tank_id] }\r\n\r\n                statsMap.set(tank.name, entries)\r\n\r\n                return tankStatistics\r\n            })\r\n\r\n        const playerTankStatisticsTabViewProps = {\r\n            tabsMap: statsMap,\r\n        } as PlayerTankStatisticsTabViewProps\r\n\r\n        return <div>\r\n            <PlayerTankStatisticsTabView {...playerTankStatisticsTabViewProps} />\r\n        </div>\r\n\r\n    }, [tanks, tanksFetchStatus, playerTanksStatistics])\r\n\r\n    return buildVehicleStatisticsDashboard()\r\n}\r\n\r\nexport default PlayerVechicleStatistics","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\VehicleStatisticsTable.tsx",["520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541"],"import { Checkbox, TableBody, TableCell, TableContainer, TableRow } from \"@material-ui/core\"\r\nimport React, { useCallback, useState } from \"react\"\r\nimport GenericTable, { GenericTablePaginationProps } from \"../../components/GenericTable\"\r\nimport { GenericTableBodyProps } from \"../../components/GenericTableBody\"\r\nimport GenericTableHead, { GenericTableHeadProps, HeadCell } from \"../../components/GenericTableHead\"\r\nimport { getComparator, Order, stableSort } from \"../../utils/generic-table/genericTableUtils\"\r\nimport { BasicTankStatistics, Statistic, StatisticKey, StrongholdBattlesTankStatistics, StrongholdBattlesTankStatisticsKey, TankCompanyBattlesTankStatistics, TankCompanyBattlesTankStatisticsKey, TankStatistics } from \"../vehicles/types\"\r\n\r\nexport function getKeys<T>(someObj: T): Array<keyof T> {\r\n    return Object.keys(someObj) as any as Array<keyof T>\r\n}\r\n\r\nexport function getEntries<T>(obj: T): Entries<T> {\r\n    return Object.entries(obj) as any;\r\n}\r\n\r\nexport type Entries<T> = {\r\n    [K in keyof T]: [K, T[K]];\r\n}[keyof T][];\r\n\r\n// function getEntries<T>(someObj: T): [keyof T, T[keyof T]] {\r\n//     return Object.entries(someObj) as [keyof T, T[keyof T]]\r\n// }\r\n\r\nconst VehicleStatisticsTable = () => {\r\n    const [order, setOrder] = useState<Order>('asc');\r\n\r\n    // const buildTable = () => {\r\n    //     switch (key) {\r\n    //         case \"company\": {\r\n    //             const columns = getKeys<TankCompanyBattlesTankStatistics>(new TankCompanyBattlesTankStatistics()) as TankCompanyBattlesTankStatisticsKey[]\r\n    //             const headCells = columns.map((column: TankCompanyBattlesTankStatisticsKey) => {\r\n    //                 return {\r\n    //                     disablePadding: false,\r\n    //                     id: column,\r\n    //                     label: column.split(\"_\").join(\" \"),\r\n    //                     numeric: false\r\n    //                 } as HeadCell<TankCompanyBattlesTankStatistics>\r\n    //             })\r\n    //             return <p></p>\r\n    //         }\r\n    //         case \"globalmap\": {\r\n    //             return <p></p>\r\n    //         }\r\n    //         case \"stronghold_defense\": {\r\n    //             return <p></p>\r\n    //         }\r\n    //         case \"stronghold_skirmish\": {\r\n    //             const orderBy = \"battles\"\r\n    //             console.log(statistics[1] as StrongholdBattlesTankStatistics)\r\n\r\n    //             return buildSkirmishTable(order, orderBy)\r\n    //         }\r\n    //         case \"ranked_battles\": {\r\n    //             return <p></p>\r\n    //         }\r\n    //         default:\r\n    //             return <p></p>\r\n    //     }\r\n    // }\r\n\r\n    // return <div>{buildTable()}</div>\r\n    return <p></p>\r\n}\r\n\r\n\r\nexport default VehicleStatisticsTable\r\n\r\nconst buildSkirmishTable = (order: Order, orderBy: StrongholdBattlesTankStatisticsKey) => {\r\n    const battleTypeKeys = getKeys<StrongholdBattlesTankStatistics>(new StrongholdBattlesTankStatistics()) as unknown as StrongholdBattlesTankStatisticsKey[]\r\n    const headCells = battleTypeKeys.map((battleTypeKey: StrongholdBattlesTankStatisticsKey) => {\r\n        return {\r\n            disablePadding: false,\r\n            id: battleTypeKey,\r\n            label: battleTypeKey.split(\"_\").join(\" \"),\r\n            numeric: false\r\n        } as HeadCell<StrongholdBattlesTankStatistics>\r\n    })\r\n    const tableRowsSorted = stableSort<StrongholdBattlesTankStatistics>([], getComparator<StrongholdBattlesTankStatistics>(order, orderBy))\r\n\r\n    return <p></p>\r\n\r\n    // const skirmishTableProps = {\r\n    //     classes: classes as ReturnType<typeof useStyles>,\r\n    //     headerProps: {\r\n    //         headCells: provinceTableHeadCells,\r\n    //         classes: classes,\r\n    //         numSelected: selected.length,\r\n    //         order: order,\r\n    //         orderBy: orderBy,\r\n    //         onSelectAllClick: handleSelectAllClick,\r\n    //         onRequestSort: handleRequestSort,\r\n    //         rowCount: localProvinces.length\r\n    //     } as GenericTableHeadProps<StrongholdBattlesTankStatistics>,\r\n    //     bodyProps: {\r\n    //         rows: tableRowsSorted,\r\n    //         columns: columns,\r\n    //         selectedRows: selected,\r\n    //         rowCellsMapper: provinceRowCellsMapper,\r\n    //         onRowClick: handleRowClick\r\n    //     } as GenericTableBodyProps<StrongholdBattlesTankStatistics>,\r\n    //     paginationProps: {\r\n    //         rowsPerPageOptions: [5, 10, 25, 50, 100],\r\n    //         component: \"div\",\r\n    //         count: provinces.length ?? 0,\r\n    //         rowsPerPage: rowsPerPage,\r\n    //         page: page,\r\n    //         onChangePage: handleChangePage,\r\n    //         onChangeRowsPerPage: handleChangeRowsPerPage\r\n    //     } as GenericTablePaginationProps<StrongholdBattlesTankStatistics>,\r\n    //     toolbarProps: {\r\n    //         numSelected: selected.length\r\n    //     }\r\n    // }\r\n\r\n    // return <GenericTable<StrongholdBattlesTankStatistics> {...skirmishTableProps} />\r\n}\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\components\\GenericTableBody.tsx",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\components\\GenericTable.tsx",["542","543"],"import { Table, TableContainer, TablePagination } from \"@material-ui/core\";\r\nimport React, { ElementType, ReactNode, MouseEvent, ChangeEventHandler } from \"react\"\r\nimport GenericTableHead, { GenericTableHeadProps } from \"./GenericTableHead\";\r\nimport GenericTableBody, { GenericTableBodyProps } from \"./GenericTableBody\";\r\nimport { ClassNameMap } from \"@material-ui/styles\";\r\nimport GenericTableToolbar, { GenericTableToolbarProps } from \"./GenericTableToolbar\";\r\n\r\nexport interface GenericTableProps<T> {\r\n    classes: ClassNameMap\r\n    headerProps: GenericTableHeadProps<T>\r\n    bodyProps: GenericTableBodyProps<T>\r\n    paginationProps?: GenericTablePaginationProps<T>\r\n    toolbarProps: GenericTableToolbarProps,\r\n    paginationEnabled: boolean\r\n}\r\n\r\nexport interface GenericTablePaginationProps<T> {\r\n    rowsPerPageOptions: number[],\r\n    component: ElementType<any>, // \"div\" | (\"canvas\" | \"p\"...  ?? )\r\n    count: number,\r\n    page: number,\r\n    rowsPerPage: number,\r\n    onChangePage: (event: React.MouseEvent<HTMLButtonElement> | null, page: number) => void,\r\n    onChangeRowsPerPage: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>\r\n}\r\n\r\nconst GenericTable = function <T>(props: GenericTableProps<T> & { children?: ReactNode }) {\r\n    const { classes, headerProps, bodyProps, paginationProps, toolbarProps } = props;\r\n    console.log({ props })\r\n    const isPaginated = !!paginationProps && Object.keys(paginationProps).length > 0\r\n    console.log({ isPaginated })\r\n\r\n    const buildPagination = () => {\r\n        console.log(isPaginated)\r\n        // if (isPaginated) {\r\n        //     return <TablePagination {...paginationProps} />\r\n        // }\r\n    }\r\n\r\n    const buildTable = () => {\r\n        console.log({ paginationProps })\r\n        return <TableContainer>\r\n            <GenericTableToolbar {...toolbarProps} />\r\n            {buildPagination()}\r\n            <Table\r\n                className={classes?.table}\r\n                aria-labelledby=\"tableTitle\"\r\n                aria-label=\"enhanced table\"\r\n                size={classes.dense ? 'small' : 'medium'}\r\n            >\r\n                <GenericTableHead<T>\r\n                    {...headerProps}\r\n                />\r\n                <GenericTableBody<T>\r\n                    {...bodyProps}\r\n                />\r\n            </Table>\r\n            {buildPagination()}\r\n        </TableContainer >\r\n    }\r\n\r\n    return buildTable();\r\n\r\n}\r\n\r\nexport default GenericTable;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\PlayerTankStatisticsTabView.tsx",["544","545","546","547"],"import { makeStyles, Theme, AppBar, Tabs, Tab, TableCell } from \"@material-ui/core\";\r\nimport React from \"react\"\r\nimport {\r\n    SkirmishBattlesTankStatistics,\r\n    TankStatistics,\r\n    User,\r\n} from \"../vehicles/types\"\r\nimport useTabPanels, { TankAndStatistics } from \"./useTabPanels\";\r\nimport { TabController } from \"./useTabPanels\";\r\nimport { getKeys } from \"./VehicleStatisticsTable\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n        marginBottom: \"1rem\"\r\n    },\r\n    tankName: {\r\n        width: \"250px\"\r\n    }\r\n}));\r\n\r\n\r\nexport interface PlayerTankStatisticsTabViewProps {\r\n    tabsMap: Map<any, any>\r\n}\r\n\r\nfunction a11yProps(index: any) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\n\r\nconst PlayerTankStatisticsTabView = (props: PlayerTankStatisticsTabViewProps) => {\r\n    const classes = useStyles();\r\n    const { tabsMap } = props\r\n    const statisticKeys = getKeys<TankStatistics>(new TankStatistics());\r\n    const [selectedTab, setSelectedTab] = React.useState({ index: 0, key: 'account_id' } as TabController);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newSelectedTab: number) => {\r\n        const currentSelectedTab = { index: newSelectedTab, key: statisticKeys[newSelectedTab] } as TabController\r\n        setSelectedTab(currentSelectedTab);\r\n    };\r\n\r\n    const tabs = statisticKeys.map((statisticKey, index) => {\r\n        const tabKey = [statisticKey, index].join('_')\r\n        return <Tab key={tabKey} label={statisticKey} {...a11yProps(index)} />\r\n    })\r\n\r\n    const tabPanels = useTabPanels({ selectedTab, tabsMap });\r\n\r\n    return <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n            <Tabs value={selectedTab.index} onChange={handleChange} variant=\"scrollable\" aria-label=\"simple tabs example\">\r\n                {tabs}\r\n            </Tabs>\r\n        </AppBar>\r\n        {tabPanels}\r\n    </div>\r\n\r\n\r\n\r\n\r\n    const skirmishStatisticsTableRowCellsMapper = (\r\n        labelId: string,\r\n        row: SkirmishBattlesTankStatistics\r\n    ): (\r\n            value: keyof SkirmishBattlesTankStatistics,\r\n            index: number,\r\n            array: (keyof SkirmishBattlesTankStatistics)[]\r\n        ) => JSX.Element => {\r\n        return column => {\r\n            return <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                {row[column]}\r\n            </TableCell>\r\n        }\r\n    }\r\n}\r\n\r\nexport default PlayerTankStatisticsTabView\r\n\r\n\r\n\r\n/**\r\n *  const buildSkirmishStatisticsTabPanel = (statistics: SkirmishBattlesTankStatistics, selectedTab: number, index: number) => {\r\n        const order: Order = 'asc'\r\n        const orderBy: keyof SkirmishBattlesTankStatistics = 'battle_avg_xp';\r\n        const tableRows = stableSort<SkirmishBattlesTankStatistics>([statistics], getComparator<SkirmishBattlesTankStatistics>(order, orderBy))\r\n        const columns: (keyof SkirmishBattlesTankStatistics)[] = getKeys<SkirmishBattlesTankStatistics>(new SkirmishBattlesTankStatistics())\r\n\r\n        const headCells = columns.map((column: keyof SkirmishBattlesTankStatistics) => {\r\n            return {\r\n                disablePadding: false,\r\n                id: column,\r\n                label: column.split(\"_\").join(\" \"),\r\n                numeric: false\r\n            } as HeadCell<SkirmishBattlesTankStatistics>\r\n        })\r\n        const tableProps = {\r\n            classes: classes,\r\n            paginationEnabled: false,\r\n            headerProps: {\r\n                headCells: headCells,\r\n                classes: classes,\r\n                order: order,\r\n                orderBy: orderBy,\r\n                numSelected: 0,\r\n                rowCount: 0\r\n            } as GenericTableHeadProps<SkirmishBattlesTankStatistics>,\r\n            bodyProps: {\r\n                rows: tableRows,\r\n                columns: columns,\r\n                selectedRows: [],\r\n                rowCellsMapper: skirmishStatisticsTableRowCellsMapper,\r\n                onRowClick: () => { }\r\n            } as GenericTableBodyProps<SkirmishBattlesTankStatistics>,\r\n            paginationProps: {} as GenericTablePaginationProps<SkirmishBattlesTankStatistics>,\r\n            toolbarProps: {\r\n                numSelected: 0,\r\n                title: \"Skirmish\"\r\n            } as GenericTableToolbarProps\r\n        } as GenericTableProps<SkirmishBattlesTankStatistics>\r\n        console.log({ tableProps })\r\n\r\n        return (\r\n            <TabPanel value={selectedTab} index={index + 1}>\r\n                <GenericTable<SkirmishBattlesTankStatistics> {...tableProps} >\r\n                </GenericTable>\r\n            </TabPanel>\r\n        )\r\n    }\r\n\r\n    const buildStrongholdStatisticsTabPanel = (statistics: SkirmishBattlesTankStatistics, selectedTab: number, index: number) => {\r\n    }\r\n\r\n    const buildGlobalMapTankStatisticsTabPanel = (statistics: GlobalMapTankStatistics, selectedTab: number, index: number) => {\r\n        return (\r\n            <TabPanel value={selectedTab} index={index}>\r\n                {statistics.avg_damage_assisted}\r\n            </TabPanel>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    const buildTabPanels = () => {\r\n        // const currentStatistic = statistics[selectedTab] // [0]: key [1]: statistic\r\n        // console.log({currentStatistic})\r\n        const tabPanels = statistics.map((statistic: TankAndStatistics, index: number) => {\r\n            const { tank, tankStatistics } = statistic\r\n            console.log()\r\n            // console.log(statistic[0] as keyof TankStatistics)\r\n            // switch (statistic[0] as keyof TankStatistics) {\r\n            //     case \"tank_id\":\r\n            //         return buildPrimitiveTabPanel(statistic[1], selectedTab, index + 1)\r\n            //     case \"max_frags\":\r\n            //         return buildPrimitiveTabPanel(statistic[1], selectedTab, index + 1)\r\n            //     case \"max_xp\":\r\n            //         return buildPrimitiveTabPanel(statistic[1], selectedTab, index + 1)\r\n            //     case \"frags\":\r\n            //         return buildPrimitiveTabPanel(statistic[1], selectedTab, index + 1)\r\n            //     case \"in_garage\":\r\n            //         return buildPrimitiveTabPanel(statistic[1], selectedTab, index + 1)\r\n            //     case \"mark_of_mastery\":\r\n            //         return buildPrimitiveTabPanel(statistic[1], selectedTab, index + 1)\r\n            //     case \"account_id\":\r\n            //         return buildPrimitiveTabPanel(statistic[1], selectedTab, index + 1)\r\n            //     case \"globalmap\":\r\n            //         return buildGlobalMapTankStatisticsTabPanel(statistic[1] as GlobalMapTankStatistics, selectedTab, index)\r\n            //     case \"company\":\r\n            //         return buildTankCompanyBattlesTankStatisticsTabPanel(statistic[1] as TankCompanyBattlesTankStatistics, selectedTab, index)\r\n            //     case \"epic\":\r\n            //         return buildEpicBattlesTankStatisticsTabPanel(statistic[1] as EpicBattlesTankStatistics, selectedTab, index)\r\n            //     case \"random\":\r\n            //         return buildRandomBattlesTankStatisticsTabPanel(statistic[1] as RandomBattlesTankStatistics, selectedTab, index)\r\n            //     case \"ranked\":\r\n            //         return buildRankedBattlesTankStatisticsTabPanel(statistic[1] as RankedBattlesTankStatistics, selectedTab, index)\r\n            //     case \"ranked_battles\":\r\n            //         return buildRankedBattlesTankStatisticsTabPanel(statistic[1] as RankedBattlesTankStatistics, selectedTab, index)\r\n            //     case \"regular_team\":\r\n            //         return buildRegularTeamTankStatisticsTabPanel(statistic[1] as RegularTeamTankStatistics, selectedTab, index)\r\n            //     case \"stronghold_defense\":\r\n            //         return buildStrongholdStatisticsTabPanel(statistic[1] as StrongholdBattlesTankStatistics, selectedTab, index)\r\n            //     case \"stronghold_skirmish\":\r\n            //         return buildSkirmishStatisticsTabPanel(statistic[1] as SkirmishBattlesTankStatistics, selectedTab, index)\r\n            //     case \"team\":\r\n            //         return buildTeamBattlesTankStatisticsTabPanel(statistic[1] as TeamBattlesTankStatistics, selectedTab, index)\r\n            //     case \"all\":\r\n            // }\r\n        })\r\n\r\n        console.log({ tabPanels })\r\n\r\n        return tabPanels\r\n    }\r\n *\r\n *\r\n */","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\useTabPanels.tsx",["548","549","550","551","552","553","554","555","556","557","558"],"import classes from '*.module.css';\r\nimport { Box } from '@material-ui/core';\r\nimport React, { createRef, useEffect, useRef, useState } from 'react';\r\nimport GenericTable, { GenericTablePaginationProps } from '../../components/GenericTable';\r\nimport { GenericTableBodyProps } from '../../components/GenericTableBody';\r\nimport { GenericTableHeadProps, HeadCell } from '../../components/GenericTableHead';\r\nimport { Province } from '../../slices/globalMapSlice';\r\nimport { TankStatistics, Vehicle } from '../vehicles/types';\r\n\r\n// make it generic ?? nah.. overhead for now\r\nexport type TabController = {\r\n    index: number;\r\n    key: keyof TankStatistics\r\n}\r\n\r\nexport type UseTabsProps = {\r\n    selectedTab: TabController,\r\n    index: number,\r\n    handleChange: Function,\r\n}\r\n\r\nexport type TankAndStatistics = {\r\n    tank: Vehicle,\r\n    tankStatistics: TankStatistics\r\n}\r\n\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst useTabPanels = (props: { selectedTab: TabController, tabsMap: Map<string, Map<any, any>> }) => {\r\n    /* @returns Map<tankName, Map<statisticName, statisticValue>> */\r\n    const { selectedTab, tabsMap } = props\r\n    const tabMap = new Map([])\r\n    let headerCellColumns: any[] = []\r\n    // const [currentTabName, setCurrentTabName] = useState(\"\")\r\n    tabsMap.forEach((value: Map<any, any>, key: any) => {\r\n        const statValue = value.get(selectedTab.key)\r\n        headerCellColumns = Object.keys(statValue) // redundant to assign so many times..\r\n        console.log(Object.keys(statValue))\r\n        console.log(headerCellColumns)\r\n        tabMap.set(key, statValue)\r\n    })\r\n\r\n    console.log({ headerCellColumns })\r\n    useEffect(() => {\r\n        buildTabPanel();\r\n    }, [])\r\n\r\n    const buildTabPanel = () => {\r\n        const buildTableHeadCells = () => {\r\n            console.log({ tabsMap }, { tabMap }, selectedTab.key)\r\n\r\n            // return columns.map((column: keyof Province) => {\r\n            //     return {\r\n            //         disablePadding: false,\r\n            //         id: column,\r\n            //         label: column.split(\"_\").join(\" \"),\r\n            //         numeric: false\r\n            //     } as HeadCell<Province & \"TANK NAME\">\r\n            // })\r\n        }\r\n        buildTableHeadCells();\r\n\r\n        // const provinceTableProps = {\r\n        //     paginationEnabled: true,\r\n        //     headerProps: {\r\n        //         headCells: provinceTableHeadCells,\r\n        //         classes: classes,\r\n        //         numSelected: selected.length,\r\n        //         order: order,\r\n        //         orderBy: orderBy,\r\n        //         onSelectAllClick: handleSelectAllClick,\r\n        //         onRequestSort: handleRequestSort,\r\n        //         rowCount: localProvinces.length,\r\n        //     } as GenericTableHeadProps<Province>,\r\n        //     bodyProps: {\r\n        //         rows: tableRowsSorted,\r\n        //         columns: columns,\r\n        //         selectedRows: selected,\r\n        //         rowCellsMapper: provinceRowCellsMapper,\r\n        //         onRowClick: handleRowClick\r\n        //     } as GenericTableBodyProps<Province>,\r\n        //     paginationProps: {\r\n        //         rowsPerPageOptions: [5, 10, 25, 50, 100],\r\n        //         component: \"div\",\r\n        //         count: provinces.length ?? 0,\r\n        //         rowsPerPage: rowsPerPage,\r\n        //         page: page,\r\n        //         onChangePage: handleChangePage,\r\n        //         onChangeRowsPerPage: handleChangeRowsPerPage\r\n        //     } as GenericTablePaginationProps<Province>,\r\n        //     toolbarProps: {\r\n        //         numSelected: selected.length,\r\n        //         title: 'Provinces'\r\n        //     }\r\n        // }\r\n\r\n        return <TabPanel value={selectedTab.index} index={selectedTab.index + 1}>\r\n            {/* <GenericTable<any> {...tableProps} >\r\n            </GenericTable> */}\r\n        </TabPanel>\r\n    }\r\n\r\n    return <div></div>\r\n}\r\n\r\nexport default useTabPanels;\r\n\r\n\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\authenticationSlice.ts",["559","560","561","562"],{"ruleId":"563","replacedBy":"564"},{"ruleId":"565","replacedBy":"566"},{"ruleId":"567","severity":1,"message":"568","line":2,"column":30,"nodeType":"569","messageId":"570","endLine":2,"endColumn":39},{"ruleId":"567","severity":1,"message":"571","line":38,"column":38,"nodeType":"569","messageId":"570","endLine":38,"endColumn":63},{"ruleId":"567","severity":1,"message":"572","line":45,"column":11,"nodeType":"569","messageId":"570","endLine":45,"endColumn":21},{"ruleId":"573","severity":1,"message":"574","line":54,"column":6,"nodeType":"575","endLine":54,"endColumn":8,"suggestions":"576"},{"ruleId":"567","severity":1,"message":"577","line":8,"column":10,"nodeType":"569","messageId":"570","endLine":8,"endColumn":21},{"ruleId":"567","severity":1,"message":"578","line":8,"column":23,"nodeType":"569","messageId":"570","endLine":8,"endColumn":36},{"ruleId":"567","severity":1,"message":"579","line":9,"column":8,"nodeType":"569","messageId":"570","endLine":9,"endColumn":13},{"ruleId":"563","replacedBy":"580"},{"ruleId":"565","replacedBy":"581"},{"ruleId":"563","replacedBy":"582"},{"ruleId":"565","replacedBy":"583"},{"ruleId":"563","replacedBy":"584"},{"ruleId":"565","replacedBy":"585"},{"ruleId":"567","severity":1,"message":"586","line":15,"column":11,"nodeType":"569","messageId":"570","endLine":15,"endColumn":31},{"ruleId":"563","replacedBy":"587"},{"ruleId":"565","replacedBy":"588"},{"ruleId":"589","severity":1,"message":"590","line":176,"column":33,"nodeType":"591","messageId":"592","endLine":176,"endColumn":66},{"ruleId":"589","severity":1,"message":"590","line":178,"column":31,"nodeType":"591","messageId":"592","endLine":178,"endColumn":64},{"ruleId":"567","severity":1,"message":"593","line":9,"column":29,"nodeType":"569","messageId":"570","endLine":9,"endColumn":36},{"ruleId":"594","severity":1,"message":"595","line":89,"column":9,"nodeType":"596","messageId":"597","endLine":93,"endColumn":10,"fix":"598"},{"ruleId":"594","severity":1,"message":"599","line":94,"column":9,"nodeType":"596","messageId":"597","endLine":97,"endColumn":10,"fix":"600"},{"ruleId":"594","severity":1,"message":"601","line":98,"column":9,"nodeType":"596","messageId":"597","endLine":100,"endColumn":10,"fix":"602"},{"ruleId":"594","severity":1,"message":"603","line":101,"column":9,"nodeType":"596","messageId":"597","endLine":105,"endColumn":10,"fix":"604"},{"ruleId":"594","severity":1,"message":"605","line":106,"column":9,"nodeType":"596","messageId":"597","endLine":109,"endColumn":10,"fix":"606"},{"ruleId":"594","severity":1,"message":"607","line":110,"column":9,"nodeType":"596","messageId":"597","endLine":115,"endColumn":10,"fix":"608"},{"ruleId":"594","severity":1,"message":"609","line":116,"column":9,"nodeType":"596","messageId":"597","endLine":120,"endColumn":10,"fix":"610"},{"ruleId":"594","severity":1,"message":"611","line":121,"column":9,"nodeType":"596","messageId":"597","endLine":124,"endColumn":10,"fix":"612"},{"ruleId":"594","severity":1,"message":"613","line":125,"column":9,"nodeType":"596","messageId":"597","endLine":127,"endColumn":10,"fix":"614"},{"ruleId":"615","severity":1,"message":"616","line":38,"column":1,"nodeType":"617","endLine":38,"endColumn":18},{"ruleId":"567","severity":1,"message":"618","line":11,"column":5,"nodeType":"569","messageId":"570","endLine":11,"endColumn":15},{"ruleId":"567","severity":1,"message":"619","line":14,"column":10,"nodeType":"569","messageId":"570","endLine":14,"endColumn":22},{"ruleId":"567","severity":1,"message":"620","line":14,"column":24,"nodeType":"569","messageId":"570","endLine":14,"endColumn":30},{"ruleId":"567","severity":1,"message":"621","line":20,"column":13,"nodeType":"569","messageId":"570","endLine":20,"endColumn":28},{"ruleId":"567","severity":1,"message":"622","line":4,"column":36,"nodeType":"569","messageId":"570","endLine":4,"endColumn":57},{"ruleId":"567","severity":1,"message":"623","line":5,"column":35,"nodeType":"569","messageId":"570","endLine":5,"endColumn":67},{"ruleId":"567","severity":1,"message":"624","line":6,"column":10,"nodeType":"569","messageId":"570","endLine":6,"endColumn":24},{"ruleId":"567","severity":1,"message":"625","line":5,"column":10,"nodeType":"569","messageId":"570","endLine":5,"endColumn":18},{"ruleId":"615","severity":1,"message":"626","line":9,"column":1,"nodeType":"617","endLine":26,"endColumn":3},{"ruleId":"567","severity":1,"message":"627","line":10,"column":11,"nodeType":"569","messageId":"570","endLine":10,"endColumn":19},{"ruleId":"567","severity":1,"message":"628","line":25,"column":11,"nodeType":"569","messageId":"570","endLine":25,"endColumn":19},{"ruleId":"573","severity":1,"message":"629","line":38,"column":8,"nodeType":"575","endLine":38,"endColumn":23,"suggestions":"630"},{"ruleId":"567","severity":1,"message":"631","line":2,"column":30,"nodeType":"569","messageId":"570","endLine":2,"endColumn":38},{"ruleId":"567","severity":1,"message":"632","line":4,"column":10,"nodeType":"569","messageId":"570","endLine":4,"endColumn":23},{"ruleId":"567","severity":1,"message":"633","line":4,"column":25,"nodeType":"569","messageId":"570","endLine":4,"endColumn":30},{"ruleId":"567","severity":1,"message":"634","line":4,"column":32,"nodeType":"569","messageId":"570","endLine":4,"endColumn":38},{"ruleId":"567","severity":1,"message":"635","line":4,"column":52,"nodeType":"569","messageId":"570","endLine":4,"endColumn":61},{"ruleId":"567","severity":1,"message":"636","line":4,"column":63,"nodeType":"569","messageId":"570","endLine":4,"endColumn":76},{"ruleId":"567","severity":1,"message":"637","line":6,"column":8,"nodeType":"569","messageId":"570","endLine":6,"endColumn":16},{"ruleId":"573","severity":1,"message":"629","line":32,"column":8,"nodeType":"575","endLine":32,"endColumn":17,"suggestions":"638"},{"ruleId":"639","severity":1,"message":"640","line":39,"column":21,"nodeType":"641","messageId":"642","endLine":39,"endColumn":28},{"ruleId":"567","severity":1,"message":"643","line":1,"column":18,"nodeType":"569","messageId":"570","endLine":1,"endColumn":30},{"ruleId":"567","severity":1,"message":"644","line":1,"column":32,"nodeType":"569","messageId":"570","endLine":1,"endColumn":42},{"ruleId":"567","severity":1,"message":"645","line":1,"column":44,"nodeType":"569","messageId":"570","endLine":1,"endColumn":49},{"ruleId":"567","severity":1,"message":"646","line":12,"column":8,"nodeType":"569","messageId":"570","endLine":12,"endColumn":22},{"ruleId":"567","severity":1,"message":"647","line":21,"column":11,"nodeType":"569","messageId":"570","endLine":21,"endColumn":19},{"ruleId":"567","severity":1,"message":"648","line":14,"column":23,"nodeType":"569","messageId":"570","endLine":14,"endColumn":34},{"ruleId":"567","severity":1,"message":"649","line":3,"column":10,"nodeType":"569","messageId":"570","endLine":3,"endColumn":21},{"ruleId":"567","severity":1,"message":"650","line":6,"column":28,"nodeType":"569","messageId":"570","endLine":6,"endColumn":45},{"ruleId":"567","severity":1,"message":"651","line":3,"column":10,"nodeType":"569","messageId":"570","endLine":3,"endColumn":19},{"ruleId":"567","severity":1,"message":"649","line":4,"column":10,"nodeType":"569","messageId":"570","endLine":4,"endColumn":21},{"ruleId":"567","severity":1,"message":"652","line":5,"column":43,"nodeType":"569","messageId":"570","endLine":5,"endColumn":49},{"ruleId":"567","severity":1,"message":"653","line":6,"column":10,"nodeType":"569","messageId":"570","endLine":6,"endColumn":31},{"ruleId":"567","severity":1,"message":"654","line":6,"column":33,"nodeType":"569","messageId":"570","endLine":6,"endColumn":41},{"ruleId":"567","severity":1,"message":"655","line":7,"column":10,"nodeType":"569","messageId":"570","endLine":7,"endColumn":20},{"ruleId":"567","severity":1,"message":"656","line":21,"column":11,"nodeType":"569","messageId":"570","endLine":21,"endColumn":25},{"ruleId":"567","severity":1,"message":"622","line":15,"column":36,"nodeType":"569","messageId":"570","endLine":15,"endColumn":57},{"ruleId":"573","severity":1,"message":"657","line":58,"column":8,"nodeType":"575","endLine":58,"endColumn":32,"suggestions":"658"},{"ruleId":"573","severity":1,"message":"629","line":46,"column":8,"nodeType":"575","endLine":46,"endColumn":14,"suggestions":"659"},{"ruleId":"573","severity":1,"message":"660","line":51,"column":8,"nodeType":"575","endLine":51,"endColumn":14,"suggestions":"661"},{"ruleId":"567","severity":1,"message":"662","line":13,"column":30,"nodeType":"569","messageId":"570","endLine":13,"endColumn":40},{"ruleId":"573","severity":1,"message":"663","line":80,"column":8,"nodeType":"575","endLine":80,"endColumn":34,"suggestions":"664"},{"ruleId":"573","severity":1,"message":"663","line":85,"column":8,"nodeType":"575","endLine":85,"endColumn":34,"suggestions":"665"},{"ruleId":"573","severity":1,"message":"663","line":90,"column":8,"nodeType":"575","endLine":90,"endColumn":34,"suggestions":"666"},{"ruleId":"567","severity":1,"message":"622","line":15,"column":36,"nodeType":"569","messageId":"570","endLine":15,"endColumn":57},{"ruleId":"567","severity":1,"message":"667","line":43,"column":13,"nodeType":"569","messageId":"570","endLine":43,"endColumn":26},{"ruleId":"567","severity":1,"message":"668","line":43,"column":44,"nodeType":"569","messageId":"570","endLine":43,"endColumn":48},{"ruleId":"567","severity":1,"message":"647","line":47,"column":11,"nodeType":"569","messageId":"570","endLine":47,"endColumn":19},{"ruleId":"573","severity":1,"message":"657","line":54,"column":8,"nodeType":"575","endLine":54,"endColumn":24,"suggestions":"669"},{"ruleId":"573","severity":1,"message":"657","line":60,"column":8,"nodeType":"575","endLine":60,"endColumn":32,"suggestions":"670"},{"ruleId":"573","severity":1,"message":"657","line":66,"column":8,"nodeType":"575","endLine":66,"endColumn":26,"suggestions":"671"},{"ruleId":"573","severity":1,"message":"629","line":81,"column":8,"nodeType":"575","endLine":81,"endColumn":20,"suggestions":"672"},{"ruleId":"567","severity":1,"message":"673","line":11,"column":13,"nodeType":"569","messageId":"570","endLine":11,"endColumn":20},{"ruleId":"567","severity":1,"message":"674","line":11,"column":22,"nodeType":"569","messageId":"570","endLine":11,"endColumn":28},{"ruleId":"567","severity":1,"message":"675","line":2,"column":8,"nodeType":"569","messageId":"570","endLine":2,"endColumn":17},{"ruleId":"567","severity":1,"message":"676","line":11,"column":5,"nodeType":"569","messageId":"570","endLine":11,"endColumn":9},{"ruleId":"567","severity":1,"message":"677","line":19,"column":8,"nodeType":"569","messageId":"570","endLine":19,"endColumn":29},{"ruleId":"567","severity":1,"message":"675","line":2,"column":8,"nodeType":"569","messageId":"570","endLine":2,"endColumn":17},{"ruleId":"567","severity":1,"message":"678","line":6,"column":52,"nodeType":"569","messageId":"570","endLine":6,"endColumn":72},{"ruleId":"567","severity":1,"message":"679","line":7,"column":10,"nodeType":"569","messageId":"570","endLine":7,"endColumn":14},{"ruleId":"567","severity":1,"message":"680","line":1,"column":41,"nodeType":"569","messageId":"570","endLine":1,"endColumn":47},{"ruleId":"567","severity":1,"message":"681","line":10,"column":78,"nodeType":"569","messageId":"570","endLine":10,"endColumn":85},{"ruleId":"567","severity":1,"message":"682","line":10,"column":87,"nodeType":"569","messageId":"570","endLine":10,"endColumn":94},{"ruleId":"567","severity":1,"message":"683","line":38,"column":13,"nodeType":"569","messageId":"570","endLine":38,"endColumn":23},{"ruleId":"567","severity":1,"message":"684","line":39,"column":13,"nodeType":"569","messageId":"570","endLine":39,"endColumn":35},{"ruleId":"567","severity":1,"message":"685","line":39,"column":61,"nodeType":"569","messageId":"570","endLine":39,"endColumn":72},{"ruleId":"567","severity":1,"message":"686","line":40,"column":13,"nodeType":"569","messageId":"570","endLine":40,"endColumn":29},{"ruleId":"573","severity":1,"message":"687","line":48,"column":48,"nodeType":"575","endLine":48,"endColumn":72,"suggestions":"688"},{"ruleId":"573","severity":1,"message":"629","line":52,"column":8,"nodeType":"575","endLine":52,"endColumn":32,"suggestions":"689"},{"ruleId":"573","severity":1,"message":"690","line":73,"column":8,"nodeType":"575","endLine":73,"endColumn":75,"suggestions":"691"},{"ruleId":"594","severity":1,"message":"692","line":304,"column":9,"nodeType":"596","messageId":"597","endLine":306,"endColumn":10,"fix":"693"},{"ruleId":"594","severity":1,"message":"694","line":307,"column":9,"nodeType":"596","messageId":"597","endLine":310,"endColumn":10,"fix":"695"},{"ruleId":"594","severity":1,"message":"696","line":311,"column":9,"nodeType":"596","messageId":"597","endLine":315,"endColumn":10,"fix":"697"},{"ruleId":"573","severity":1,"message":"629","line":42,"column":6,"nodeType":"575","endLine":42,"endColumn":14,"suggestions":"698"},{"ruleId":"573","severity":1,"message":"660","line":47,"column":6,"nodeType":"575","endLine":47,"endColumn":14,"suggestions":"699"},{"ruleId":"567","severity":1,"message":"700","line":1,"column":43,"nodeType":"569","messageId":"570","endLine":1,"endColumn":51},{"ruleId":"567","severity":1,"message":"680","line":2,"column":53,"nodeType":"569","messageId":"570","endLine":2,"endColumn":59},{"ruleId":"567","severity":1,"message":"701","line":7,"column":5,"nodeType":"569","messageId":"570","endLine":7,"endColumn":20},{"ruleId":"567","severity":1,"message":"702","line":9,"column":20,"nodeType":"569","messageId":"570","endLine":9,"endColumn":27},{"ruleId":"567","severity":1,"message":"703","line":11,"column":10,"nodeType":"569","messageId":"570","endLine":11,"endColumn":19},{"ruleId":"567","severity":1,"message":"704","line":13,"column":10,"nodeType":"569","messageId":"570","endLine":13,"endColumn":16},{"ruleId":"567","severity":1,"message":"667","line":38,"column":13,"nodeType":"569","messageId":"570","endLine":38,"endColumn":26},{"ruleId":"567","severity":1,"message":"668","line":38,"column":44,"nodeType":"569","messageId":"570","endLine":38,"endColumn":48},{"ruleId":"567","severity":1,"message":"705","line":45,"column":11,"nodeType":"569","messageId":"570","endLine":45,"endColumn":15},{"ruleId":"573","severity":1,"message":"706","line":87,"column":8,"nodeType":"575","endLine":87,"endColumn":27,"suggestions":"707"},{"ruleId":"573","severity":1,"message":"706","line":93,"column":8,"nodeType":"575","endLine":93,"endColumn":44,"suggestions":"708"},{"ruleId":"573","severity":1,"message":"709","line":121,"column":8,"nodeType":"575","endLine":121,"endColumn":35,"suggestions":"710"},{"ruleId":"573","severity":1,"message":"709","line":144,"column":8,"nodeType":"575","endLine":144,"endColumn":67,"suggestions":"711"},{"ruleId":"567","severity":1,"message":"649","line":14,"column":10,"nodeType":"569","messageId":"570","endLine":14,"endColumn":21},{"ruleId":"567","severity":1,"message":"712","line":15,"column":22,"nodeType":"569","messageId":"570","endLine":15,"endColumn":35},{"ruleId":"573","severity":1,"message":"709","line":91,"column":8,"nodeType":"575","endLine":91,"endColumn":10,"suggestions":"713"},{"ruleId":"573","severity":1,"message":"709","line":95,"column":8,"nodeType":"575","endLine":95,"endColumn":10,"suggestions":"714"},{"ruleId":"573","severity":1,"message":"709","line":99,"column":8,"nodeType":"575","endLine":99,"endColumn":10,"suggestions":"715"},{"ruleId":"716","severity":1,"message":"717","line":144,"column":13,"nodeType":"718","endLine":144,"endColumn":118},{"ruleId":"716","severity":1,"message":"717","line":147,"column":13,"nodeType":"718","endLine":147,"endColumn":120},{"ruleId":"567","severity":1,"message":"719","line":68,"column":19,"nodeType":"569","messageId":"570","endLine":68,"endColumn":31},{"ruleId":"567","severity":1,"message":"720","line":2,"column":10,"nodeType":"569","messageId":"570","endLine":2,"endColumn":18},{"ruleId":"567","severity":1,"message":"721","line":24,"column":13,"nodeType":"569","messageId":"570","endLine":24,"endColumn":17},{"ruleId":"567","severity":1,"message":"722","line":24,"column":19,"nodeType":"569","messageId":"570","endLine":24,"endColumn":26},{"ruleId":"567","severity":1,"message":"723","line":24,"column":39,"nodeType":"569","messageId":"570","endLine":24,"endColumn":47},{"ruleId":"567","severity":1,"message":"719","line":24,"column":106,"nodeType":"569","messageId":"570","endLine":24,"endColumn":118},{"ruleId":"567","severity":1,"message":"724","line":24,"column":120,"nodeType":"569","messageId":"570","endLine":24,"endColumn":134},{"ruleId":"563","replacedBy":"725"},{"ruleId":"565","replacedBy":"726"},{"ruleId":"567","severity":1,"message":"727","line":21,"column":11,"nodeType":"569","messageId":"570","endLine":21,"endColumn":25},{"ruleId":"567","severity":1,"message":"728","line":29,"column":9,"nodeType":"569","messageId":"570","endLine":29,"endColumn":22},{"ruleId":"567","severity":1,"message":"729","line":30,"column":11,"nodeType":"569","messageId":"570","endLine":30,"endColumn":20},{"ruleId":"573","severity":1,"message":"730","line":32,"column":11,"nodeType":"731","endLine":62,"endColumn":6},{"ruleId":"573","severity":1,"message":"732","line":64,"column":11,"nodeType":"731","endLine":79,"endColumn":6},{"ruleId":"567","severity":1,"message":"568","line":1,"column":10,"nodeType":"569","messageId":"570","endLine":1,"endColumn":19},{"ruleId":"567","severity":1,"message":"680","line":1,"column":21,"nodeType":"569","messageId":"570","endLine":1,"endColumn":27},{"ruleId":"567","severity":1,"message":"631","line":1,"column":29,"nodeType":"569","messageId":"570","endLine":1,"endColumn":37},{"ruleId":"615","severity":1,"message":"616","line":65,"column":1,"nodeType":"617","endLine":65,"endColumn":19},{"ruleId":"567","severity":1,"message":"733","line":8,"column":7,"nodeType":"569","messageId":"570","endLine":8,"endColumn":21},{"ruleId":"567","severity":1,"message":"734","line":26,"column":7,"nodeType":"569","messageId":"570","endLine":26,"endColumn":16},{"ruleId":"594","severity":1,"message":"692","line":73,"column":9,"nodeType":"596","messageId":"597","endLine":75,"endColumn":10,"fix":"735"},{"ruleId":"594","severity":1,"message":"694","line":76,"column":9,"nodeType":"596","messageId":"597","endLine":79,"endColumn":10,"fix":"736"},{"ruleId":"594","severity":1,"message":"696","line":80,"column":9,"nodeType":"596","messageId":"597","endLine":84,"endColumn":10,"fix":"737"},{"ruleId":"573","severity":1,"message":"738","line":24,"column":8,"nodeType":"575","endLine":24,"endColumn":10,"suggestions":"739"},{"ruleId":"567","severity":1,"message":"740","line":2,"column":42,"nodeType":"569","messageId":"570","endLine":2,"endColumn":59},{"ruleId":"567","severity":1,"message":"741","line":133,"column":35,"nodeType":"569","messageId":"570","endLine":133,"endColumn":55},{"ruleId":"567","severity":1,"message":"742","line":134,"column":36,"nodeType":"569","messageId":"570","endLine":134,"endColumn":61},{"ruleId":"573","severity":1,"message":"743","line":141,"column":8,"nodeType":"575","endLine":141,"endColumn":10,"suggestions":"744"},{"ruleId":"573","severity":1,"message":"745","line":192,"column":8,"nodeType":"575","endLine":192,"endColumn":14,"suggestions":"746"},{"ruleId":"567","severity":1,"message":"747","line":198,"column":11,"nodeType":"569","messageId":"570","endLine":198,"endColumn":20},{"ruleId":"573","severity":1,"message":"748","line":248,"column":8,"nodeType":"575","endLine":248,"endColumn":27,"suggestions":"749"},{"ruleId":"594","severity":1,"message":"750","line":147,"column":9,"nodeType":"596","messageId":"597","endLine":153,"endColumn":10,"fix":"751"},{"ruleId":"594","severity":1,"message":"752","line":154,"column":9,"nodeType":"596","messageId":"597","endLine":157,"endColumn":10,"fix":"753"},{"ruleId":"594","severity":1,"message":"754","line":158,"column":9,"nodeType":"596","messageId":"597","endLine":160,"endColumn":10,"fix":"755"},{"ruleId":"563","replacedBy":"756"},{"ruleId":"565","replacedBy":"757"},{"ruleId":"573","severity":1,"message":"758","line":75,"column":8,"nodeType":"575","endLine":75,"endColumn":15,"suggestions":"759"},{"ruleId":"567","severity":1,"message":"760","line":1,"column":10,"nodeType":"569","messageId":"570","endLine":1,"endColumn":17},{"ruleId":"567","severity":1,"message":"680","line":2,"column":28,"nodeType":"569","messageId":"570","endLine":2,"endColumn":34},{"ruleId":"567","severity":1,"message":"761","line":14,"column":23,"nodeType":"569","messageId":"570","endLine":14,"endColumn":35},{"ruleId":"639","severity":1,"message":"762","line":20,"column":47,"nodeType":"763","messageId":"764","endLine":20,"endColumn":49},{"ruleId":"573","severity":1,"message":"765","line":71,"column":8,"nodeType":"575","endLine":71,"endColumn":50,"suggestions":"766"},{"ruleId":"594","severity":1,"message":"767","line":47,"column":9,"nodeType":"596","messageId":"597","endLine":49,"endColumn":10,"fix":"768"},{"ruleId":"594","severity":1,"message":"769","line":50,"column":9,"nodeType":"596","messageId":"597","endLine":53,"endColumn":10,"fix":"770"},{"ruleId":"594","severity":1,"message":"771","line":54,"column":9,"nodeType":"596","messageId":"597","endLine":58,"endColumn":10,"fix":"772"},{"ruleId":"773","severity":1,"message":"774","line":64,"column":14,"nodeType":"775","messageId":"776","endLine":64,"endColumn":17},{"ruleId":"567","severity":1,"message":"777","line":4,"column":32,"nodeType":"569","messageId":"570","endLine":4,"endColumn":47},{"ruleId":"567","severity":1,"message":"778","line":7,"column":7,"nodeType":"569","messageId":"570","endLine":7,"endColumn":16},{"ruleId":"594","severity":1,"message":"779","line":62,"column":9,"nodeType":"596","messageId":"597","endLine":65,"endColumn":10,"fix":"780"},{"ruleId":"594","severity":1,"message":"781","line":66,"column":9,"nodeType":"596","messageId":"597","endLine":70,"endColumn":10,"fix":"782"},{"ruleId":"594","severity":1,"message":"783","line":71,"column":9,"nodeType":"596","messageId":"597","endLine":76,"endColumn":10,"fix":"784"},{"ruleId":"567","severity":1,"message":"785","line":9,"column":10,"nodeType":"569","messageId":"570","endLine":9,"endColumn":27},{"ruleId":"567","severity":1,"message":"686","line":30,"column":38,"nodeType":"569","messageId":"570","endLine":30,"endColumn":54},{"ruleId":"567","severity":1,"message":"786","line":31,"column":11,"nodeType":"569","messageId":"570","endLine":31,"endColumn":17},{"ruleId":"573","severity":1,"message":"657","line":37,"column":8,"nodeType":"575","endLine":37,"endColumn":26,"suggestions":"787"},{"ruleId":"567","severity":1,"message":"788","line":52,"column":15,"nodeType":"569","messageId":"570","endLine":52,"endColumn":31},{"ruleId":"567","severity":1,"message":"789","line":1,"column":10,"nodeType":"569","messageId":"570","endLine":1,"endColumn":18},{"ruleId":"567","severity":1,"message":"790","line":1,"column":20,"nodeType":"569","messageId":"570","endLine":1,"endColumn":29},{"ruleId":"567","severity":1,"message":"791","line":1,"column":31,"nodeType":"569","messageId":"570","endLine":1,"endColumn":40},{"ruleId":"567","severity":1,"message":"792","line":1,"column":42,"nodeType":"569","messageId":"570","endLine":1,"endColumn":56},{"ruleId":"567","severity":1,"message":"793","line":1,"column":58,"nodeType":"569","messageId":"570","endLine":1,"endColumn":66},{"ruleId":"567","severity":1,"message":"794","line":2,"column":17,"nodeType":"569","messageId":"570","endLine":2,"endColumn":28},{"ruleId":"567","severity":1,"message":"795","line":3,"column":8,"nodeType":"569","messageId":"570","endLine":3,"endColumn":20},{"ruleId":"567","severity":1,"message":"796","line":3,"column":24,"nodeType":"569","messageId":"570","endLine":3,"endColumn":51},{"ruleId":"567","severity":1,"message":"797","line":4,"column":10,"nodeType":"569","messageId":"570","endLine":4,"endColumn":31},{"ruleId":"567","severity":1,"message":"798","line":5,"column":8,"nodeType":"569","messageId":"570","endLine":5,"endColumn":24},{"ruleId":"567","severity":1,"message":"799","line":5,"column":28,"nodeType":"569","messageId":"570","endLine":5,"endColumn":49},{"ruleId":"567","severity":1,"message":"800","line":7,"column":10,"nodeType":"569","messageId":"570","endLine":7,"endColumn":29},{"ruleId":"567","severity":1,"message":"801","line":7,"column":31,"nodeType":"569","messageId":"570","endLine":7,"endColumn":40},{"ruleId":"567","severity":1,"message":"802","line":7,"column":42,"nodeType":"569","messageId":"570","endLine":7,"endColumn":54},{"ruleId":"567","severity":1,"message":"803","line":7,"column":125,"nodeType":"569","messageId":"570","endLine":7,"endColumn":157},{"ruleId":"567","severity":1,"message":"804","line":7,"column":159,"nodeType":"569","messageId":"570","endLine":7,"endColumn":194},{"ruleId":"567","severity":1,"message":"624","line":7,"column":196,"nodeType":"569","messageId":"570","endLine":7,"endColumn":210},{"ruleId":"567","severity":1,"message":"805","line":26,"column":12,"nodeType":"569","messageId":"570","endLine":26,"endColumn":17},{"ruleId":"567","severity":1,"message":"806","line":26,"column":19,"nodeType":"569","messageId":"570","endLine":26,"endColumn":27},{"ruleId":"567","severity":1,"message":"807","line":69,"column":7,"nodeType":"569","messageId":"570","endLine":69,"endColumn":25},{"ruleId":"567","severity":1,"message":"808","line":71,"column":11,"nodeType":"569","messageId":"570","endLine":71,"endColumn":20},{"ruleId":"567","severity":1,"message":"809","line":79,"column":11,"nodeType":"569","messageId":"570","endLine":79,"endColumn":26},{"ruleId":"567","severity":1,"message":"810","line":1,"column":33,"nodeType":"569","messageId":"570","endLine":1,"endColumn":48},{"ruleId":"567","severity":1,"message":"811","line":17,"column":46,"nodeType":"569","messageId":"570","endLine":17,"endColumn":47},{"ruleId":"567","severity":1,"message":"679","line":6,"column":5,"nodeType":"569","messageId":"570","endLine":6,"endColumn":9},{"ruleId":"567","severity":1,"message":"785","line":8,"column":24,"nodeType":"569","messageId":"570","endLine":8,"endColumn":41},{"ruleId":"812","severity":1,"message":"813","line":66,"column":5,"nodeType":"814","messageId":"815","endLine":79,"endColumn":6},{"ruleId":"567","severity":1,"message":"816","line":66,"column":11,"nodeType":"569","messageId":"570","endLine":66,"endColumn":48},{"ruleId":"567","severity":1,"message":"817","line":1,"column":8,"nodeType":"569","messageId":"570","endLine":1,"endColumn":15},{"ruleId":"567","severity":1,"message":"818","line":3,"column":17,"nodeType":"569","messageId":"570","endLine":3,"endColumn":26},{"ruleId":"567","severity":1,"message":"680","line":3,"column":39,"nodeType":"569","messageId":"570","endLine":3,"endColumn":45},{"ruleId":"567","severity":1,"message":"631","line":3,"column":47,"nodeType":"569","messageId":"570","endLine":3,"endColumn":55},{"ruleId":"567","severity":1,"message":"795","line":4,"column":8,"nodeType":"569","messageId":"570","endLine":4,"endColumn":20},{"ruleId":"567","severity":1,"message":"796","line":4,"column":24,"nodeType":"569","messageId":"570","endLine":4,"endColumn":51},{"ruleId":"567","severity":1,"message":"797","line":5,"column":10,"nodeType":"569","messageId":"570","endLine":5,"endColumn":31},{"ruleId":"567","severity":1,"message":"799","line":6,"column":10,"nodeType":"569","messageId":"570","endLine":6,"endColumn":31},{"ruleId":"567","severity":1,"message":"819","line":6,"column":33,"nodeType":"569","messageId":"570","endLine":6,"endColumn":41},{"ruleId":"567","severity":1,"message":"820","line":7,"column":10,"nodeType":"569","messageId":"570","endLine":7,"endColumn":18},{"ruleId":"573","severity":1,"message":"821","line":71,"column":8,"nodeType":"575","endLine":71,"endColumn":10,"suggestions":"822"},{"ruleId":"594","severity":1,"message":"823","line":38,"column":9,"nodeType":"596","messageId":"597","endLine":40,"endColumn":10,"fix":"824"},{"ruleId":"594","severity":1,"message":"825","line":41,"column":9,"nodeType":"596","messageId":"597","endLine":43,"endColumn":10,"fix":"826"},{"ruleId":"594","severity":1,"message":"827","line":44,"column":9,"nodeType":"596","messageId":"597","endLine":46,"endColumn":10,"fix":"828"},{"ruleId":"773","severity":1,"message":"774","line":62,"column":14,"nodeType":"775","messageId":"776","endLine":62,"endColumn":17},"no-native-reassign",["829"],"no-negated-in-lhs",["830"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'authenticationFetchErrors' is assigned a value but never used.","'authObject' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'authenticationFetchStatus' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["831"],"'CssBaseline' is defined but never used.","'ThemeProvider' is defined but never used.","'theme' is defined but never used.",["829"],["830"],["829"],["830"],["829"],["830"],"'loginData' is assigned a value but never used.",["829"],["830"],"no-new-wrappers","Do not use String as a constructor.","NewExpression","noConstructor","'Vehicle' is defined but never used.","no-useless-computed-key","Unnecessarily computed property ['clanDetails/fetchClanDetails/fulfilled'] found.","Property","unnecessarilyComputedProperty",{"range":"832","text":"833"},"Unnecessarily computed property ['clanDetails/fetchClanDetails/rejected'] found.",{"range":"834","text":"835"},"Unnecessarily computed property ['clanDetails/fetchClanDetails/pending'] found.",{"range":"836","text":"837"},"Unnecessarily computed property ['clanDetails/fetchClanDetailsById/rejected'] found.",{"range":"838","text":"839"},"Unnecessarily computed property ['clanDetails/fetchClanDetailsById/pending'] found.",{"range":"840","text":"841"},"Unnecessarily computed property ['clanDetails/fetchClanDetailsById/fulfilled'] found.",{"range":"842","text":"843"},"Unnecessarily computed property ['clanList/fetchClanList/fulfilled'] found.",{"range":"844","text":"845"},"Unnecessarily computed property ['clanList/fetchClanList/rejected'] found.",{"range":"846","text":"847"},"Unnecessarily computed property ['clanList/fetchClanList/pending'] found.",{"range":"848","text":"849"},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Tournament' is defined but never used.","'EventEmitter' is defined but never used.","'Events' is defined but never used.","'tournamentState' is assigned a value but never used.","'fetchClanDetailsThunk' is defined but never used.","'fetchTankStatisticsByPlayerThunk' is defined but never used.","'TankStatistics' is defined but never used.","'Redirect' is defined but never used.","Assign arrow function to a variable before exporting as module default","'dispatch' is assigned a value but never used.","'editMode' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["850"],"'useState' is defined but never used.","'BrowserRouter' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'useParams' is defined but never used.","'useRouteMatch' is defined but never used.","'TeamForm' is defined but never used.",["851"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'createStyles' is defined but never used.","'makeStyles' is defined but never used.","'Theme' is defined but never used.","'InteractiveMap' is defined but never used.","'tacticId' is assigned a value but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","'selectTournaments' is defined but never used.","'RootState' is defined but never used.","'Button' is defined but never used.","'DEFAULT_NEW_TEAM_NAME' is defined but never used.","'saveTeam' is defined but never used.","'useHistory' is defined but never used.","'selectedTeamId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["852"],["853"],"React Hook useCallback has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["854"],"'useContext' is defined but never used.","React Hook useCallback has an unnecessary dependency: 'tacticMetadata'. Either exclude it or remove the dependency array.",["855"],["856"],["857"],"'mapFetchError' is assigned a value but never used.","'maps' is assigned a value but never used.",["858"],["859"],["860"],["861"],"'canDrop' is assigned a value but never used.","'isOver' is assigned a value but never used.","'PropTypes' is defined but never used.","'Icon' is defined but never used.","'FiberManualRecordIcon' is defined but never used.","'SelectedTeamIdAction' is defined but never used.","'User' is defined but never used.","'useRef' is defined but never used.","'useDrag' is defined but never used.","'useDrop' is defined but never used.","'isDragging' is assigned a value but never used.","'clanDetailsFetchErrors' is assigned a value but never used.","'clanDetails' is assigned a value but never used.","'tanksFetchErrors' is assigned a value but never used.","React Hook useCallback has unnecessary dependencies: 'name', 'tacticRole', and 'tank'. Either exclude them or remove the dependency array.",["862"],["863"],"React Hook useEffect has missing dependencies: 'dispatch' and 'tanks'. Either include them or remove the dependency array.",["864"],"Unnecessarily computed property ['maps/fetchMaps/pending'] found.",{"range":"865","text":"866"},"Unnecessarily computed property ['maps/fetchMaps/rejected'] found.",{"range":"867","text":"868"},"Unnecessarily computed property ['maps/fetchMaps/fulfilled'] found.",{"range":"869","text":"870"},["871"],["872"],"'MenuItem' is defined but never used.","'allMapsSelector' is defined but never used.","'MapTool' is defined but never used.","'addMarker' is defined but never used.","'WoTMap' is defined but never used.","'SIZE' is assigned a value but never used.","React Hook useCallback has an unnecessary dependency: 'isCursorDisplayed'. Either exclude it or remove the dependency array.",["873"],["874"],"React Hook useCallback has a missing dependency: 'webSocketContext.socket'. Either include it or remove the dependency array.",["875"],["876"],"'setActiveTool' is defined but never used.",["877"],["878"],["879"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'positionList' is assigned a value but never used.","'TankType' is defined but never used.","'draw' is assigned a value but never used.","'preDraw' is assigned a value but never used.","'postDraw' is assigned a value but never used.","'cursorPosition' is assigned a value but never used.",["829"],["830"],"'MARGIN_PROCENT' is assigned a value but never used.","'currentRadius' is assigned a value but never used.","'endRadius' is assigned a value but never used.","The 'drawMarkers' function makes the dependencies of useEffect Hook (at line 117) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'drawMarkers' in its own useCallback() Hook.","VariableDeclarator","The 'drawPoint' function makes the dependencies of useEffect Hook (at line 117) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'drawPoint' in its own useCallback() Hook.","'MAP_IMAGES_API' is assigned a value but never used.","'saveState' is assigned a value but never used.",{"range":"880","text":"866"},{"range":"881","text":"868"},{"range":"882","text":"870"},"React Hook useEffect has a missing dependency: 'animate'. Either include it or remove the dependency array.",["883"],"'MouseEventHandler' is defined but never used.","'provincesFetchErrors' is assigned a value but never used.","'setProvinceTableHeadCells' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'provincesFetchStatus'. Either include them or remove the dependency array.",["884"],"React Hook useCallback has an unnecessary dependency: 'page'. Either exclude it or remove the dependency array.",["885"],"'emptyRows' is assigned a value but never used.","React Hook useCallback has unnecessary dependencies: 'page' and 'rowsPerPage'. Either exclude them or remove the dependency array.",["886"],"Unnecessarily computed property ['globalMap/fetchProvinces/fulfilled'] found.",{"range":"887","text":"888"},"Unnecessarily computed property ['globalMap/fetchProvinces/rejected'] found.",{"range":"889","text":"890"},"Unnecessarily computed property ['globalMap/fetchProvinces/pending'] found.",{"range":"891","text":"892"},["829"],["830"],"React Hook useCallback has missing dependencies: 'buildCells' and 'buildCheckboxCell'. Either include them or remove the dependency array.",["893"],"'Tooltip' is defined but never used.","'setClanNames' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'clansInSearch' and 'dispatch'. Either include them or remove the dependency array.",["894"],"Unnecessarily computed property ['tanks/fetchTanks/pending'] found.",{"range":"895","text":"896"},"Unnecessarily computed property ['tanks/fetchTanks/rejected'] found.",{"range":"897","text":"898"},"Unnecessarily computed property ['tanks/fetchTanks/fulfilled'] found.",{"range":"899","text":"900"},"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'VehicleResponse' is defined but never used.","'TANKS_API' is assigned a value but never used.","Unnecessarily computed property ['tanks/fetchTankStatistics/pending'] found.",{"range":"901","text":"902"},"Unnecessarily computed property ['tanks/fetchTankStatistics/rejected'] found.",{"range":"903","text":"904"},"Unnecessarily computed property ['tanks/fetchTankStatistics/fulfilled'] found.",{"range":"905","text":"906"},"'TankAndStatistics' is defined but never used.","'player' is assigned a value but never used.",["907"],"'tier10Statistics' is assigned a value but never used.","'Checkbox' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableRow' is defined but never used.","'useCallback' is defined but never used.","'GenericTable' is defined but never used.","'GenericTablePaginationProps' is defined but never used.","'GenericTableBodyProps' is defined but never used.","'GenericTableHead' is defined but never used.","'GenericTableHeadProps' is defined but never used.","'BasicTankStatistics' is defined but never used.","'Statistic' is defined but never used.","'StatisticKey' is defined but never used.","'TankCompanyBattlesTankStatistics' is defined but never used.","'TankCompanyBattlesTankStatisticsKey' is defined but never used.","'order' is assigned a value but never used.","'setOrder' is assigned a value but never used.","'buildSkirmishTable' is assigned a value but never used.","'headCells' is assigned a value but never used.","'tableRowsSorted' is assigned a value but never used.","'TablePagination' is defined but never used.","'T' is defined but never used.","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","'skirmishStatisticsTableRowCellsMapper' is assigned a value but never used.","'classes' is defined but never used.","'createRef' is defined but never used.","'HeadCell' is defined but never used.","'Province' is defined but never used.","React Hook useEffect has a missing dependency: 'buildTabPanel'. Either include it or remove the dependency array.",["908"],"Unnecessarily computed property ['authentication/login/fulfilled'] found.",{"range":"909","text":"910"},"Unnecessarily computed property ['authentication/login/rejected'] found.",{"range":"911","text":"912"},"Unnecessarily computed property ['authentication/login/pending'] found.",{"range":"913","text":"914"},"no-global-assign","no-unsafe-negation",{"desc":"915","fix":"916"},[3138,3180],"'clanDetails/fetchClanDetails/fulfilled'",[3409,3450],"'clanDetails/fetchClanDetails/rejected'",[3596,3636],"'clanDetails/fetchClanDetails/pending'",[3735,3780],"'clanDetails/fetchClanDetailsById/rejected'",[4125,4169],"'clanDetails/fetchClanDetailsById/pending'",[4433,4479],"'clanDetails/fetchClanDetailsById/fulfilled'",[4944,4980],"'clanList/fetchClanList/fulfilled'",[5161,5196],"'clanList/fetchClanList/rejected'",[5337,5371],"'clanList/fetchClanList/pending'",{"desc":"917","fix":"918"},{"desc":"919","fix":"920"},{"desc":"921","fix":"922"},{"desc":"923","fix":"924"},{"desc":"925","fix":"926"},{"desc":"927","fix":"928"},{"desc":"927","fix":"929"},{"desc":"927","fix":"930"},{"desc":"931","fix":"932"},{"desc":"921","fix":"933"},{"desc":"934","fix":"935"},{"desc":"936","fix":"937"},{"desc":"938","fix":"939"},{"desc":"936","fix":"940"},{"desc":"941","fix":"942"},[14093,14119],"'maps/fetchMaps/pending'",[14223,14250],"'maps/fetchMaps/rejected'",[14409,14437],"'maps/fetchMaps/fulfilled'",{"desc":"943","fix":"944"},{"desc":"945","fix":"946"},{"desc":"938","fix":"947"},{"desc":"948","fix":"949"},{"desc":"950","fix":"951"},{"desc":"952","fix":"953"},{"desc":"954","fix":"955"},{"desc":"954","fix":"956"},{"desc":"954","fix":"957"},[2449,2475],[2579,2606],[2765,2793],{"desc":"958","fix":"959"},{"desc":"960","fix":"961"},{"desc":"938","fix":"962"},{"desc":"938","fix":"963"},[4431,4469],"'globalMap/fetchProvinces/fulfilled'",[4755,4792],"'globalMap/fetchProvinces/rejected'",[4934,4970],"'globalMap/fetchProvinces/pending'",{"desc":"964","fix":"965"},{"desc":"966","fix":"967"},[1466,1494],"'tanks/fetchTanks/pending'",[1598,1627],"'tanks/fetchTanks/rejected'",[1788,1818],"'tanks/fetchTanks/fulfilled'",[2087,2124],"'tanks/fetchTankStatistics/pending'",[2473,2511],"'tanks/fetchTankStatistics/rejected'",[2958,2997],"'tanks/fetchTankStatistics/fulfilled'",{"desc":"934","fix":"968"},{"desc":"969","fix":"970"},[1093,1127],"'authentication/login/fulfilled'",[1228,1261],"'authentication/login/rejected'",[1342,1374],"'authentication/login/pending'","Update the dependencies array to be: [authenticationFetchStatus, dispatch]",{"range":"971","text":"972"},"Update the dependencies array to be: [dispatch, history, team]",{"range":"973","text":"974"},"Update the dependencies array to be: [dispatch, history]",{"range":"975","text":"976"},"Update the dependencies array to be: [clanDetailsFetchStatus, dispatch]",{"range":"977","text":"978"},"Update the dependencies array to be: [dispatch, team]",{"range":"979","text":"980"},"Update the dependencies array to be: [dispatch, history, team.teamId]",{"range":"981","text":"982"},"Update the dependencies array to be: [dispatch]",{"range":"983","text":"984"},{"range":"985","text":"984"},{"range":"986","text":"984"},"Update the dependencies array to be: [dispatch, mapFetchStatus]",{"range":"987","text":"988"},{"range":"989","text":"978"},"Update the dependencies array to be: [dispatch, tanksFetchStatus]",{"range":"990","text":"991"},"Update the dependencies array to be: [dispatch, tacticRole]",{"range":"992","text":"993"},"Update the dependencies array to be: []",{"range":"994","text":"995"},{"range":"996","text":"993"},"Update the dependencies array to be: [tacticRole, clanDetailsFetchStatus, tanksFetchStatus, clanMembers, dispatch, tanks]",{"range":"997","text":"998"},"Update the dependencies array to be: [dispatch, tactic]",{"range":"999","text":"1000"},"Update the dependencies array to be: [dispatch, history, tactic.id]",{"range":"1001","text":"1002"},{"range":"1003","text":"995"},"Update the dependencies array to be: [isMovingEnabled]",{"range":"1004","text":"1005"},"Update the dependencies array to be: [isMovingEnabled, webSocketContext.socket]",{"range":"1006","text":"1007"},"Update the dependencies array to be: [activeTool, isMovingEnabled, webSocketContext.socket]",{"range":"1008","text":"1009"},"Update the dependencies array to be: [webSocketContext.socket]",{"range":"1010","text":"1011"},{"range":"1012","text":"1011"},{"range":"1013","text":"1011"},"Update the dependencies array to be: [animate]",{"range":"1014","text":"1015"},"Update the dependencies array to be: [dispatch, provincesFetchStatus]",{"range":"1016","text":"1017"},{"range":"1018","text":"995"},{"range":"1019","text":"995"},"Update the dependencies array to be: [buildCells, buildCheckboxCell]",{"range":"1020","text":"1021"},"Update the dependencies array to be: [clanList, clanIds, clanNames, provinceId, clansInSearch, dispatch]",{"range":"1022","text":"1023"},{"range":"1024","text":"991"},"Update the dependencies array to be: [buildTabPanel]",{"range":"1025","text":"1026"},[2129,2131],"[authenticationFetchStatus, dispatch]",[1575,1590],"[dispatch, history, team]",[1114,1123],"[dispatch, history]",[1849,1873],"[clanDetailsFetchStatus, dispatch]",[1124,1130],"[dispatch, team]",[1286,1292],"[dispatch, history, team.teamId]",[2428,2454],"[dispatch]",[2743,2769],[3043,3069],[1925,1941],"[dispatch, mapFetchStatus]",[2091,2115],[2246,2264],"[dispatch, tanksFetchStatus]",[2790,2802],"[dispatch, tacticRole]",[2025,2049],"[]",[2157,2181],[2870,2937],"[tacticRole, clanDetailsFetchStatus, tanksFetchStatus, clanMembers, dispatch, tanks]",[1431,1439],"[dispatch, tactic]",[1591,1599],"[dispatch, history, tactic.id]",[3320,3339],[3486,3522],"[isMovingEnabled]",[4305,4332],"[isMovingEnabled, webSocketContext.socket]",[5093,5152],"[activeTool, isMovingEnabled, webSocketContext.socket]",[3371,3373],"[webSocketContext.socket]",[3570,3572],[3749,3751],[815,817],"[animate]",[5450,5452],"[dispatch, provincesFetchStatus]",[7122,7128],[9579,9598],[2836,2843],"[buildCells, buildCheckboxCell]",[2876,2918],"[clanList, clanIds, clanNames, provinceId, clansInSearch, dispatch]",[1731,1749],[2256,2258],"[buildTabPanel]"]