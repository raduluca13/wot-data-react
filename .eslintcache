[{"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\index.tsx":"1","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\serviceWorker.ts":"2","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\App.tsx":"3","F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\index.tsx":"4","F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\serviceWorker.ts":"5","F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\App.tsx":"6","F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\store\\types\\enums\\TacticType.enum.ts":"7","F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\store\\types\\enums\\MapBaseNumber.enum.ts":"8","F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\theme.ts":"9","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\types\\enums\\MapBaseNumber.enum.ts":"10","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\types\\enums\\TacticType.enum.ts":"11","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\localStorage.ts":"12","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\login.ts":"13","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\vehicles.ts":"14","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\config.ts":"15","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\store\\index.ts":"16","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\teamSlice.ts":"17","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\store.ts":"18","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\index.ts":"19","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\counterSlice.ts":"20","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\filterSlice.ts":"21","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\clanSlice.ts":"22","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\utils\\url\\urlUtils.ts":"23","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\tournamentSlice.ts":"24","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\events.ts":"25","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\client.ts":"26","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\AddTournament.tsx":"27","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\Clan.tsx":"28","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\TournamentSection.tsx":"29","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\TeamForm.tsx":"30","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\Teams.tsx":"31","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\AddTactic.tsx":"32","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\ClanMember.tsx":"33","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\TournamentList.tsx":"34","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\PlayerList.tsx":"35","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\AddPlayer.tsx":"36","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\TeamCard.tsx":"37","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-metadata\\TacticMetadataForm.tsx":"38","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-role\\TacticRoleForm.tsx":"39","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-role\\TacticRoles.tsx":"40","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\Tournament.tsx":"41","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\Player.tsx":"42","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-role\\TacticRole.tsx":"43","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\store\\tacticsSlice.ts":"44","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\Tactics.tsx":"45","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\TacticCard.tsx":"46","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\decorators\\PropertyChanged.ts":"47","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\InteractiveMap.tsx":"48","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\MapTools.tsx":"49","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\WebSocketContext.tsx":"50","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\mapInteractionSlice.ts":"51","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\MapCanvas.tsx":"52","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\useCanvas.ts":"53","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\vehicles\\types.ts":"54","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\useLiveMapInteraction.ts":"55","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\mapsApiSlice.ts":"56","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\useAnimationFrame.ts":"57","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\provinces\\Provinces.tsx":"58","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\globalMapSlice.ts":"59","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\provinces\\ProvinceComponent.tsx":"60","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\utils\\generic-table\\genericTableUtils.ts":"61","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\components\\GenericTableToolbar.tsx":"62","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\components\\GenericTableHead.tsx":"63","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\provinces\\CompetitorsTooltip.tsx":"64"},{"size":863,"mtime":1615377099774,"results":"65","hashOfConfig":"66"},{"size":5424,"mtime":499162500000,"results":"67","hashOfConfig":"66"},{"size":2689,"mtime":1615492561706,"results":"68","hashOfConfig":"66"},{"size":851,"mtime":1611960443960,"results":"69","hashOfConfig":"70"},{"size":5424,"mtime":499162500000,"results":"71","hashOfConfig":"70"},{"size":908,"mtime":1611969812927,"results":"72","hashOfConfig":"70"},{"size":76,"mtime":1611965897351,"results":"73","hashOfConfig":"70"},{"size":111,"mtime":1611970115925,"results":"74","hashOfConfig":"70"},{"size":477,"mtime":1611960506938,"results":"75","hashOfConfig":"70"},{"size":111,"mtime":1611970115925,"results":"76","hashOfConfig":"66"},{"size":96,"mtime":1612624492675,"results":"77","hashOfConfig":"66"},{"size":576,"mtime":1612044344927,"results":"78","hashOfConfig":"66"},{"size":1859,"mtime":1612033391160,"results":"79","hashOfConfig":"66"},{"size":2339,"mtime":1612043977722,"results":"80","hashOfConfig":"66"},{"size":131,"mtime":1612035499142,"results":"81","hashOfConfig":"66"},{"size":981,"mtime":1611956888278,"results":"82","hashOfConfig":"66"},{"size":9713,"mtime":1613868399581,"results":"83","hashOfConfig":"66"},{"size":587,"mtime":1613730282566,"results":"84","hashOfConfig":"66"},{"size":1060,"mtime":1615491934964,"results":"85","hashOfConfig":"66"},{"size":1996,"mtime":1612045495518,"results":"86","hashOfConfig":"66"},{"size":1032,"mtime":1612054042177,"results":"87","hashOfConfig":"66"},{"size":8280,"mtime":1615570788336,"results":"88","hashOfConfig":"66"},{"size":297,"mtime":1613649039170,"results":"89","hashOfConfig":"66"},{"size":5618,"mtime":1613868407339,"results":"90","hashOfConfig":"66"},{"size":954,"mtime":1612528389384,"results":"91","hashOfConfig":"66"},{"size":1114,"mtime":1612629127235,"results":"92","hashOfConfig":"66"},{"size":7677,"mtime":1612625580590,"results":"93","hashOfConfig":"66"},{"size":1833,"mtime":1615507387942,"results":"94","hashOfConfig":"66"},{"size":899,"mtime":1612533236286,"results":"95","hashOfConfig":"66"},{"size":3130,"mtime":1613868404839,"results":"96","hashOfConfig":"66"},{"size":1819,"mtime":1613660568768,"results":"97","hashOfConfig":"66"},{"size":2476,"mtime":1615408684729,"results":"98","hashOfConfig":"66"},{"size":1362,"mtime":1613873099809,"results":"99","hashOfConfig":"66"},{"size":1660,"mtime":1612535027671,"results":"100","hashOfConfig":"66"},{"size":1121,"mtime":1613868385278,"results":"101","hashOfConfig":"66"},{"size":3981,"mtime":1615507456659,"results":"102","hashOfConfig":"66"},{"size":2445,"mtime":1613138028931,"results":"103","hashOfConfig":"66"},{"size":5042,"mtime":1615416170584,"results":"104","hashOfConfig":"66"},{"size":5809,"mtime":1615507427575,"results":"105","hashOfConfig":"66"},{"size":1558,"mtime":1613868371847,"results":"106","hashOfConfig":"66"},{"size":2980,"mtime":1612534821817,"results":"107","hashOfConfig":"66"},{"size":1397,"mtime":1613089640528,"results":"108","hashOfConfig":"66"},{"size":5374,"mtime":1615507407246,"results":"109","hashOfConfig":"66"},{"size":17110,"mtime":1615417723816,"results":"110","hashOfConfig":"66"},{"size":1833,"mtime":1613873010533,"results":"111","hashOfConfig":"66"},{"size":2793,"mtime":1613178098049,"results":"112","hashOfConfig":"66"},{"size":2750,"mtime":1615560381122,"results":"113","hashOfConfig":"66"},{"size":6213,"mtime":1615480238462,"results":"114","hashOfConfig":"66"},{"size":5838,"mtime":1615481267975,"results":"115","hashOfConfig":"66"},{"size":4120,"mtime":1615481307294,"results":"116","hashOfConfig":"66"},{"size":3430,"mtime":1615473499094,"results":"117","hashOfConfig":"66"},{"size":790,"mtime":1615411104783,"results":"118","hashOfConfig":"66"},{"size":5170,"mtime":1615484376466,"results":"119","hashOfConfig":"66"},{"size":4710,"mtime":1613933759221,"results":"120","hashOfConfig":"66"},{"size":2060,"mtime":1615309108942,"results":"121","hashOfConfig":"66"},{"size":3318,"mtime":1615460669083,"results":"122","hashOfConfig":"66"},{"size":897,"mtime":1615477350998,"results":"123","hashOfConfig":"66"},{"size":11660,"mtime":1615573933664,"results":"124","hashOfConfig":"66"},{"size":5314,"mtime":1615562117045,"results":"125","hashOfConfig":"66"},{"size":2525,"mtime":1615507539110,"results":"126","hashOfConfig":"66"},{"size":1229,"mtime":1615556679928,"results":"127","hashOfConfig":"66"},{"size":2157,"mtime":1615566649540,"results":"128","hashOfConfig":"66"},{"size":2851,"mtime":1615563987967,"results":"129","hashOfConfig":"66"},{"size":1980,"mtime":1615571318182,"results":"130","hashOfConfig":"66"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},"r9njs4",{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"141"},"1dbhl6l",{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"133"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":12,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"133"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"133"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"133"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"133"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"133"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"133"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"133"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"133"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"133"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"133"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"133"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"133"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"133"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"133"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"133"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"133"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"244","usedDeprecatedRules":"133"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"133"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"133"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"133"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"133"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"266"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"133"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"272"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"277","usedDeprecatedRules":"133"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"280","messages":"281","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"282","messages":"283","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"133"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\index.tsx",[],["295","296"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\serviceWorker.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\App.tsx",[],"F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\index.tsx",["297","298","299"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './store/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\r\nimport theme from './theme';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <ThemeProvider theme={theme}> */}\r\n\r\n    {/* <CssBaseline /> */}\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n\r\n    {/* </ThemeProvider> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n",["300","301"],"F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\serviceWorker.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\App.tsx",[],"F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\store\\types\\enums\\TacticType.enum.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\store\\types\\enums\\MapBaseNumber.enum.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\WOT-DATA-REACT\\src\\theme.ts",[],["302","303"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\types\\enums\\MapBaseNumber.enum.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\types\\enums\\TacticType.enum.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\localStorage.ts",[],["304","305"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\login.ts",["306"],"export interface LoginData {\r\n    application_id: string;\r\n    display: LoginDisplayType;\r\n    nofollow: 0 | 1\r\n    expires_at: number;\r\n    redirect_uri: string\r\n}\r\n\r\nexport enum LoginDisplayType {\r\n    PAGE = \"page\",\r\n    POPUP = \"popup\"\r\n}\r\n\r\nconst login = () => {\r\n    const loginData: LoginData = {\r\n        application_id: \"cb96a1fa695145b03a603132c093b238\",\r\n        display: LoginDisplayType.PAGE,\r\n        nofollow: 0,\r\n        expires_at: 0,\r\n        // redirect_uri: \"localhost:3000\"\r\n        redirect_uri: \"https%3A%2F%2Fdevelopers.wargaming.net%2Freference%2Fall%2Fwot%2Fauth%2Flogin%2F\"\r\n    }\r\n\r\n    // const loginUrl = \"https://api.worldoftanks.eu/wot/auth/login?\";\r\n    // Object.keys(loginData).map((key: string) => `${key=loginData[key]}`)\r\n\r\n    fetch(\"https://api.worldoftanks.eu/wot/auth/login/?application_id=cb96a1fa695145b03a603132c093b238&display=popup&redirect_uri=https%3A%2F%2Fdevelopers.wargaming.net%2Freference%2Fall%2Fwot%2Fauth%2Flogin%2F\")\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                console.log(result)\r\n                // setIsLoaded(true);\r\n                // setItems(result);\r\n            },\r\n            // Note: it's important to handle errors here\r\n            // instead of a catch() block so that we don't swallow\r\n            // exceptions from actual bugs in components.\r\n            (error) => {\r\n                // setIsLoaded(true);\r\n                // setError(error);\r\n            }\r\n        )\r\n}\r\n\r\nexport default login;\r\n\r\n// https://api.worldoftanks.eu/wot/auth/login/?\r\n// status=ok&\r\n// access_token=26a6cafbdd0d520572988afaf934d18b3a34b13e&\r\n// nickname=ExcisonX&\r\n// account_id=503047828&\r\n// expires_at=1613235656&\r\n// application_id=cb96a1fa695145b03a603132c093b238\r\n\r\n// redirect url: https://developers.wargaming.net/reference/all/wot/auth/login/",["307","308"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\vehicles.ts",[],["309","310"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\config.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\store\\index.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\teamSlice.ts",["311","312"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '.';\r\nimport { User } from '../screens/vehicles/types';\r\nimport { applyChanges, Change, Changeable, ChangeType } from '../store/decorators/PropertyChanged';\r\nimport { redirectTo } from '../utils/url/urlUtils';\r\n\r\nexport const DEFAULT_NEW_TEAM_ID = '0';\r\nexport const DEFAULT_NEW_TEAM_NAME = '';\r\nexport const TEAM_STATE_STORAGE_KEY = 'teamState';\r\nexport const TEAMS_PAGE = '/teams'; // TODO - extract\r\n\r\ninterface TeamState {\r\n    teams: Team[],\r\n    selectedTeamId?: string;\r\n}\r\n\r\nexport interface Team extends Changeable<Team> {\r\n    teamId: string,\r\n    teamName: string,\r\n    players: User[];\r\n}\r\n\r\nexport const createDefaultTeam = () => {\r\n    return {\r\n        teamId: DEFAULT_NEW_TEAM_ID,\r\n        teamName: DEFAULT_NEW_TEAM_NAME,\r\n        players: [],\r\n        changes: [],\r\n    }\r\n}\r\nconst createDefaultTeamState = () => {\r\n    return {\r\n        teams: [createDefaultTeam()],\r\n        selectedTeamId: DEFAULT_NEW_TEAM_ID\r\n    };\r\n}\r\n\r\nexport const createDefaultUser = () => {\r\n    return {\r\n        role: \"\",\r\n        role_i18n: \"\",\r\n        joined_at: 0,\r\n        account_id: \"\",\r\n        account_name: \"\",\r\n    } as User\r\n}\r\n\r\nexport type SelectedTeamIdAction = {\r\n    teamId: string;\r\n}\r\nexport type ChangeTeamNameAction = SelectedTeamIdAction & {\r\n    teamName: string;\r\n}\r\nexport type UserType = { user: User }\r\nexport type UserAction = UserType & SelectedTeamIdAction\r\nexport type AddPlayerToTeamAction = UserAction\r\nexport type RemovePlayerFromTeamAction = UserAction\r\n\r\nconst loadState = () => {\r\n    const storage = localStorage.getItem(TEAM_STATE_STORAGE_KEY)\r\n    if (storage !== null) {\r\n        return JSON.parse(storage) as TeamState;\r\n    }\r\n}\r\n\r\nexport const saveTeamState = (state: TeamState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(TEAM_STATE_STORAGE_KEY, serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\nexport function getProperty<T, K extends keyof T>(obj: T, key: K) {\r\n    return obj[key]; // Inferred type is T[K]\r\n}\r\n\r\nconst initialState: TeamState = loadState() || createDefaultTeamState();\r\n\r\nexport const teamSlice = createSlice({\r\n    name: 'team',\r\n    initialState,\r\n    reducers: {\r\n        saveTeam: (state: TeamState, action: PayloadAction<Team>) => {\r\n            const updatedTeam = action.payload;\r\n            const teamsNumber = state.teams.length;\r\n            const defaultTeamIndex = state.teams.findIndex(team => team.teamId === DEFAULT_NEW_TEAM_ID);\r\n\r\n            if (updatedTeam.teamId === DEFAULT_NEW_TEAM_ID) {\r\n                // ADD team\r\n                const newTeamWithId: Team = { ...updatedTeam, teamId: teamsNumber.toString() }\r\n                state.teams.push(newTeamWithId);\r\n                state.teams[defaultTeamIndex] = createDefaultTeam();\r\n            } else {\r\n                // UPDATE team\r\n                const teamIndex = state.teams.findIndex(team => team.teamId === updatedTeam.teamId);\r\n                if (teamIndex !== -1) {\r\n                    const changesAppliedTeam = applyChanges<Team>(updatedTeam, ChangeType.APPLY)\r\n                    state.teams[teamIndex] = changesAppliedTeam;\r\n                } else {\r\n                    state.teams.push({ ...updatedTeam, changes: [] });\r\n                    state.teams[defaultTeamIndex] = createDefaultTeam();\r\n                }\r\n            }\r\n            state.selectedTeamId = DEFAULT_NEW_TEAM_ID;\r\n            saveTeamState(state);\r\n            redirectTo(TEAMS_PAGE)\r\n        },\r\n        deleteTeam: (state: TeamState, action: PayloadAction<SelectedTeamIdAction>) => {\r\n            const deletableTeamId = action.payload.teamId;\r\n            const teamIndex = state.teams.findIndex(team => team.teamId === deletableTeamId);\r\n            if (teamIndex !== -1) {\r\n                state.teams.splice(teamIndex, 1);\r\n                if (deletableTeamId === state.selectedTeamId) {\r\n                    state.selectedTeamId = DEFAULT_NEW_TEAM_ID;\r\n                }\r\n            }\r\n            saveTeamState(state);\r\n        },\r\n        addPlayer: (state: TeamState, action: PayloadAction<AddPlayerToTeamAction>) => {\r\n            const teamId = action.payload.teamId;\r\n            const newPlayer = action.payload.user;\r\n\r\n            const selectedTeamIndex = state.teams.findIndex(team => team.teamId === teamId);\r\n            if (selectedTeamIndex !== -1) {\r\n                const selectedTeam = state.teams[selectedTeamIndex];\r\n                const playerIndex = selectedTeam.players.findIndex(player => player.account_id === newPlayer.account_id);\r\n\r\n                if (playerIndex === -1) {\r\n                    const initial = [...selectedTeam.players]\r\n                    selectedTeam.players.push(newPlayer)\r\n                    const final = [...selectedTeam.players]\r\n                    if (teamId !== DEFAULT_NEW_TEAM_ID) {\r\n                        selectedTeam.changes.push({\r\n                            key: 'players',\r\n                            initialValue: initial,\r\n                            newValue: final\r\n                        } as Change<Team>)\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        removePlayer: (state: TeamState, action: PayloadAction<RemovePlayerFromTeamAction>) => {\r\n            const teamId = action.payload.teamId;\r\n            const newPlayer = action.payload.user;\r\n\r\n            const selectedTeamIndex = state.teams.findIndex(team => team.teamId === teamId);\r\n            if (selectedTeamIndex !== -1) {\r\n                const selectedTeam = state.teams[selectedTeamIndex];\r\n                const playerIndex = selectedTeam.players.findIndex(player => player.account_id === newPlayer.account_id);\r\n\r\n                if (playerIndex !== -1) {\r\n                    const initial = [...selectedTeam.players];\r\n                    selectedTeam.players.splice(playerIndex, 1);\r\n                    const final = [...selectedTeam.players];\r\n                    if (teamId !== DEFAULT_NEW_TEAM_ID) {\r\n                        selectedTeam.changes.push({\r\n                            key: 'players',\r\n                            initialValue: initial,\r\n                            newValue: final\r\n                        } as Change<Team>)\r\n                    }\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        changeTeamName(state: TeamState, action: PayloadAction<ChangeTeamNameAction>) {\r\n            const teamId = action.payload.teamId;\r\n            const newTeamName = action.payload.teamName;\r\n\r\n            const selectedTeamIndex = state.teams.findIndex(team => team.teamId === teamId);\r\n            if (selectedTeamIndex !== -1) {\r\n                const selectedTeam = state.teams[selectedTeamIndex];\r\n                const initial = new String(selectedTeam.teamName).toString();\r\n                selectedTeam.teamName = newTeamName;\r\n                const final = new String(selectedTeam.teamName).toString();\r\n                if (teamId !== DEFAULT_NEW_TEAM_ID) {\r\n                    selectedTeam.changes.push({\r\n                        key: 'teamName',\r\n                        initialValue: initial,\r\n                        newValue: final\r\n                    } as Change<Team>)\r\n                }\r\n            }\r\n        },\r\n        cancelTeamChanges: (state: TeamState, action: PayloadAction<Team>) => {\r\n            // TODO - is this really needed? if you go to /teams or other page which will GET the old state in case of cancel\r\n            const team = action.payload;\r\n            if (team.teamId === DEFAULT_NEW_TEAM_ID) {\r\n                redirectTo(TEAMS_PAGE);\r\n            }\r\n\r\n            const updatedTeam = applyChanges(team, ChangeType.REVERT);\r\n\r\n            const defaultTeamIndex = state.teams.findIndex(team => team.teamId === DEFAULT_NEW_TEAM_ID);\r\n            const teamIndex = state.teams.findIndex(team => team.teamId === updatedTeam.teamId);\r\n            if (teamIndex !== -1) {\r\n                state.teams[teamIndex] = { ...updatedTeam };\r\n            } else {\r\n                state.teams.push({ ...updatedTeam, changes: [] });\r\n                state.teams[defaultTeamIndex] = createDefaultTeam();\r\n            }\r\n            state.selectedTeamId = DEFAULT_NEW_TEAM_ID;\r\n            saveTeamState(state);\r\n            redirectTo(TEAMS_PAGE)\r\n        },\r\n        changeSelectedTeam: (state: TeamState, action: PayloadAction<string>) => {\r\n            const newSelectedTeamId = action.payload;\r\n            const teamIndex = state.teams.findIndex(team => team.teamId === newSelectedTeamId)\r\n            if (teamIndex !== -1) {\r\n                state.selectedTeamId = newSelectedTeamId;\r\n                const defaultTeamIndex = state.teams.findIndex(team => team.teamId === DEFAULT_NEW_TEAM_ID);\r\n                state.teams[defaultTeamIndex] = createDefaultTeam()\r\n            }\r\n            saveTeamState(state);\r\n        },\r\n\r\n    }\r\n});\r\n\r\n// EXPORT ACTIONS\r\nexport const { addPlayer, removePlayer, deleteTeam, changeTeamName, cancelTeamChanges, changeSelectedTeam, saveTeam } = teamSlice.actions;\r\n\r\n// EXPORT SELECTORS - TODO replace duplicate selections across features\r\nexport const selectedTeamIdSelector = (state: RootState) => {\r\n    return state.teamState.selectedTeamId ?? DEFAULT_NEW_TEAM_ID\r\n}\r\nexport const selectedTeamSelector = (state: RootState) => {\r\n    return state.teamState.teams.find(team => team.teamId === state.teamState.selectedTeamId) ?? createDefaultTeam();\r\n}\r\n\r\nexport const teamsSelector = (state: RootState) => {\r\n    return state.teamState.teams ?? [] as Team[];\r\n}\r\n\r\n// EXPORT REDUCER\r\nexport default teamSlice.reducer;\r\n\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\store.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\index.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\counterSlice.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\filterSlice.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\clanSlice.ts",["313","314","315","316","317","318","319","320","321","322","323","324"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\utils\\url\\urlUtils.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\tournamentSlice.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\events.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\api\\client.ts",["325"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\AddTournament.tsx",["326","327","328","329"],"import { Button } from '@material-ui/core';\r\nimport React, { useCallback, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n    addTournament,\r\n    changeTournamentBattleFormat,\r\n    changeTournamentDescription,\r\n    changeTournamentNumberOfPlayers,\r\n    changeTournamentTotalPrize,\r\n    createDefaultTournament,\r\n    Tournament,\r\n} from '../../slices/tournamentSlice';\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { EventEmitter, Events } from '../../slices/events';\r\nimport { RootState } from '../../slices';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst AddTournament = () => {\r\n    const dispatch = useDispatch()\r\n    const { tournamentState, tournamentListLength } = useSelector(\r\n        (state: RootState) => {\r\n            return {\r\n                tournamentState: state.tournamentState,\r\n                tournamentListLength: state.tournamentState.tournamentList.length\r\n            }\r\n        }\r\n    )\r\n    const defaultTournament = createDefaultTournament(tournamentListLength)\r\n    const [tournament, setTournament] = useState(defaultTournament);\r\n    const history = useHistory();\r\n\r\n    const onPlayersNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const intValue = +event.currentTarget.value;\r\n        const value = isNaN(intValue) ? 0 : intValue;\r\n        const updatedTournament = { ...tournament, numberOfPlayers: isNaN(value) ? 0 : value }\r\n        setTournament(updatedTournament)\r\n        dispatch(\r\n            changeTournamentNumberOfPlayers({ id: tournament.id, numberOfPlayers: value })\r\n        )\r\n    }\r\n\r\n    const onTotalPrizeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const intValue = +event.currentTarget.value;\r\n        const value = isNaN(intValue) ? 0 : intValue;\r\n        const updatedTournament = { ...tournament, totalPrize: value }\r\n        setTournament(updatedTournament);\r\n        // next should be only for edit flow or not at all?\r\n        dispatch(\r\n            changeTournamentTotalPrize({ id: tournament.id, totalPrize: value })\r\n        )\r\n    }\r\n\r\n    const onDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.currentTarget.value;\r\n        const updatedTournament = { ...tournament, description: value }\r\n        setTournament(updatedTournament);\r\n        // next should be only for edit flow or not at all?\r\n        dispatch(\r\n            changeTournamentDescription({ id: tournament.id, description: value })\r\n        )\r\n    }\r\n\r\n    const onBattleFormatChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.currentTarget.value;\r\n        const updatedTournament = { ...tournament, battleFormat: value }\r\n        setTournament(updatedTournament);\r\n        // next should be only for edit flow or not at all?\r\n        dispatch(\r\n            changeTournamentBattleFormat({ id: tournament.id, battleFormat: value })\r\n        )\r\n    }\r\n\r\n    // EventEmitter.subscribe(\r\n    //     Events.DESCRIPTION_CHANGED,\r\n    //     (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    //         const value = event.currentTarget.value;\r\n    //         const updatedTournament = { ...tournament, description: value }\r\n    //         setTournament(updatedTournament);\r\n    //         dispatch(\r\n    //             changeTournamentDescription({ id: tournament.id, description: value })\r\n    //         )\r\n    //     }\r\n    // )\r\n    // EventEmitter.subscribe(\r\n    //     Events.BATTLE_FORMAT_CHANGED,\r\n    //     (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    //         const value = event.currentTarget.value;\r\n    //         const updatedTournament = { ...tournament, battleFormat: value }\r\n    //         setTournament(updatedTournament);\r\n    //         dispatch(\r\n    //             changeTournamentBattleFormat({ id: tournament.id, battleFormat: value })\r\n    //         )\r\n    //     }\r\n    // )\r\n    // EventEmitter.subscribe(\r\n    //     Events.TOTAL_PRIZE_CHANGED,\r\n    //     (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    //         const intValue = +event.currentTarget.value;\r\n    //         const value = isNaN(intValue) ? 0 : intValue;\r\n    //         const updatedTournament = { ...tournament, totalPrize: value }\r\n    //         setTournament(updatedTournament);\r\n    //         dispatch(\r\n    //             changeTournamentTotalPrize({ id: tournament.id, totalPrize: value })\r\n    //         )\r\n    //     }\r\n    // )\r\n    // EventEmitter.subscribe(\r\n    //     Events.NUMBER_OF_PLAYERS_CHANGED,\r\n    //     (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    //         const intValue = +event.currentTarget.value;\r\n    //         const value = isNaN(intValue) ? 0 : intValue;\r\n    //         const updatedTournament = { ...tournament, numberOfPlayers: isNaN(value) ? 0 : value }\r\n    //         setTournament(updatedTournament)\r\n    //         dispatch(\r\n    //             changeTournamentNumberOfPlayers({ id: tournament.id, numberOfPlayers: value })\r\n    //         )\r\n    //     }\r\n    // )\r\n\r\n    const isFormValid: () => boolean = () => {\r\n        return Boolean(tournament.battleFormat) &&\r\n            Boolean(tournament.description) &&\r\n            tournament.numberOfPlayers > 0 &&\r\n            tournament.totalPrize > 0;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={\r\n                useCallback(() => history.push('/tournaments'), [history])\r\n            }>\r\n                Go to Tournament List\r\n            </Button>\r\n            <form onSubmit={ev => {\r\n                ev.preventDefault();\r\n            }}\r\n            >\r\n                <input\r\n                    style={{ width: 450 }}\r\n                    type=\"text\"\r\n                    placeholder=\"description\"\r\n                    value={tournament.description}\r\n                    onChange={(event) => onDescriptionChange(event)}\r\n                />\r\n                <input\r\n                    style={{ width: 450 }}\r\n                    type=\"text\"\r\n                    placeholder=\"Enter new item\"\r\n                    value={tournament.battleFormat}\r\n                    onChange={(event) => onBattleFormatChange(event)}\r\n                />\r\n                <input\r\n                    style={{ width: 450 }}\r\n                    type=\"text\"\r\n                    placeholder=\"Enter new item\"\r\n                    value={tournament.totalPrize}\r\n                    onChange={(event) => onTotalPrizeChange(event)}\r\n                />\r\n                <input\r\n                    style={{ width: 450 }}\r\n                    type=\"text\"\r\n                    placeholder=\"Enter new item\"\r\n                    value={tournament.numberOfPlayers}\r\n                    onChange={(event) => onPlayersNumberChange(event)\r\n                        // EventEmitter.dispatch(Events.NUMBER_OF_PLAYERS_CHANGED, event)\r\n                    }\r\n                />\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={(event) => {\r\n                        try {\r\n                            dispatch(addTournament(tournament))\r\n                            // setTournament(createDefaultTournament())\r\n                            history.push('/tournaments');\r\n                        } catch (e) {\r\n                            console.error(e)\r\n                        }\r\n                    }}\r\n                    disabled={!isFormValid()}\r\n                >\r\n                    <AddIcon />\r\n                </Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AddTournament;\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\Clan.tsx",["330"],"import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport React, { memo, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { clanDetailsFetchSelector, fetchClanDetailsThunk, fetchPhoenixClanDetailsThunk } from '../../slices/clanSlice';\r\nimport { User } from '../vehicles/types';\r\nimport ClanMember from './ClanMember';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        content: {\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n            justifyContent: \"space-around\"\r\n        }\r\n    })\r\n);\r\n\r\nconst Clan = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const { clanDetails, clanDetailsFetchErrors, clanDetailsFetchStatus } = useSelector(clanDetailsFetchSelector);\r\n    const clanMembers: User[] = clanDetails.members;\r\n\r\n    useEffect(() => {\r\n        if (clanDetailsFetchStatus === 'idle') {\r\n            dispatch(fetchPhoenixClanDetailsThunk())\r\n        }\r\n    }, [dispatch, clanDetailsFetchStatus])\r\n\r\n    const renderClanMembers = () => {\r\n        switch (clanDetailsFetchStatus) {\r\n            case \"idle\":\r\n                return <div></div>;\r\n            case \"loading\":\r\n                return <p>Loading clan members ...</p>;\r\n            case \"succeeded\":\r\n                return clanMembers.map(clanMember => <ClanMember key={clanMember.account_id} {...clanMember} />);\r\n            case \"failed\":\r\n                console.error({ clanDetailsFetchErrors })\r\n                return <p>Could not connect server to get info</p>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h1>Clan Details</h1>\r\n            <div className={classes.content}>\r\n                {renderClanMembers()}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default memo(Clan);","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\TournamentSection.tsx",["331","332","333"],"import { Button } from '@material-ui/core';\r\nimport * as React from 'react';\r\nimport { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\nimport TournamentList from './TournamentList';\r\n\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const handleOnClick = useCallback(() => history.push('/add-tournament'), [history]);\r\n    // const handleOnClick = () => history.push('/sample');\r\n    return (\r\n        <section>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleOnClick}>\r\n                {/* <Redirect to={{\r\n                    pathname: '/history',\r\n                    state: { id: '123' }\r\n                }} />*/}\r\n                Add tournaments\r\n            </Button>\r\n            <TournamentList />\r\n        </section >\r\n    )\r\n};\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\TeamForm.tsx",["334","335"],"import { FormGroup, FormControl, TextField, createStyles, makeStyles, Theme, Button } from '@material-ui/core';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { cancelTeamChanges, changeSelectedTeam, changeTeamName, DEFAULT_NEW_TEAM_ID, saveTeam, selectedTeamSelector, Team } from '../../slices/teamSlice';\r\nimport AddPlayer from './components/AddPlayer';\r\nimport PlayerList from './components/PlayerList';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        teamName: {\r\n\r\n        }\r\n    }),\r\n);\r\n\r\n\r\nconst TeamForm = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const params = useParams<{ teamId: string }>();\r\n    const teamId = params.teamId === \"add\" ? DEFAULT_NEW_TEAM_ID : params.teamId; // TODO - to be refactored in the future\r\n    const editMode = teamId !== DEFAULT_NEW_TEAM_ID;\r\n    const team: Team = useSelector(selectedTeamSelector);\r\n    const [teamName, setTeamName] = useState(team.teamName);\r\n\r\n    const onChangeTeamName = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        const teamName = event.target.value;\r\n        dispatch(changeTeamName({ teamId: teamId, teamName }))\r\n    }\r\n\r\n    const onClickCancelEdit = useCallback(() => {\r\n        dispatch(cancelTeamChanges(team))\r\n        dispatch(changeSelectedTeam(DEFAULT_NEW_TEAM_ID));\r\n        history.push('/teams');\r\n    }, [history, team])\r\n\r\n    useEffect(() => {\r\n        if (team == null) {\r\n            setTeamName(\"\")\r\n        } else {\r\n            setTeamName(team.teamName);\r\n        }\r\n    }, [team])\r\n\r\n    const onSaveTeam = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        dispatch(saveTeam(team))\r\n        history.push('/teams');\r\n    }\r\n\r\n    const isSaveTeamButtonEnabled = () => {\r\n        const editMode = team.teamId !== DEFAULT_NEW_TEAM_ID\r\n        const teamIsValid = team.players.length === 3 && !!team.teamName;\r\n        return editMode ? (teamIsValid && team.changes.length > 0) : teamIsValid;\r\n    }\r\n\r\n    return <div>\r\n        <FormGroup>\r\n            <FormControl className={classes.teamName}>\r\n                <TextField\r\n                    required\r\n                    label=\"Team Name\"\r\n                    value={teamName}\r\n                    onChange={(event) => onChangeTeamName(event)}\r\n                />\r\n            </FormControl>\r\n        </FormGroup>\r\n        <p>Add players</p>\r\n        <AddPlayer />\r\n        <hr />\r\n        <p>Player List</p>\r\n        <PlayerList />\r\n        <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={event => onSaveTeam(event)}\r\n            disabled={!isSaveTeamButtonEnabled()}\r\n        >\r\n            SAVE TEAM\r\n        </Button>\r\n        <Button\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            onClick={onClickCancelEdit}\r\n        >\r\n            Cancel\r\n        </Button>\r\n    </div>\r\n}\r\n\r\nexport default TeamForm;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\Teams.tsx",["336","337","338","339","340","341","342","343","344"],"import { makeStyles, Theme, createStyles, Button } from '@material-ui/core';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BrowserRouter, Route, Switch, useHistory, useParams, useRouteMatch } from 'react-router-dom';\r\nimport { changeSelectedTeam, DEFAULT_NEW_TEAM_ID, teamsSelector } from '../../../slices/teamSlice';\r\nimport TeamForm from '../TeamForm';\r\nimport TeamCard from './TeamCard';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        mainSection: {\r\n            padding: '1rem',\r\n            display: 'flex',\r\n            alignItems: 'flex-start',\r\n            justifyContent: 'space-between'\r\n        },\r\n        teams: {\r\n            display: 'flex'\r\n        }\r\n    }),\r\n);\r\n\r\nconst Teams = () => {\r\n    const dispatch = useDispatch();\r\n    const teams = useSelector(teamsSelector);\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const onAddTeam = useCallback(() => {\r\n        dispatch(changeSelectedTeam(DEFAULT_NEW_TEAM_ID))\r\n        history.push('/teams/add')\r\n    }, [history])\r\n\r\n\r\n    const renderTeams = useCallback(() => {\r\n        if (teams.length > 1) {\r\n            return teams.map(team => {\r\n                if (team.teamId === DEFAULT_NEW_TEAM_ID) {\r\n                    return;\r\n                }\r\n                return <TeamCard key={team.teamId} {...team} />\r\n            })\r\n        }\r\n    }, [teams])\r\n\r\n    return <section className={classes.mainSection}>\r\n        <div className={classes.teams}>\r\n            {renderTeams()}\r\n        </div>\r\n        <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={onAddTeam}\r\n        >\r\n            Add Team\r\n            </Button>\r\n    </section>\r\n}\r\n\r\nexport default Teams; \r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\AddTactic.tsx",["345","346","347","348","349"],"import { Button, createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport React, { useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { cancelTacticChanges, DEFAULT_NEW_TACTIC_ID, saveTactic, selectedTacticSelector } from '../store/tacticsSlice';\r\nimport { Tactic } from '../../../store/types/interfaces/TacticMetadata.interface';\r\nimport TacticMetadataForm from './tactic-metadata/TacticMetadataForm';\r\nimport TacticRoleForm from './tactic-role/TacticRoleForm';\r\nimport TacticRoles from './tactic-role/TacticRoles';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport InteractiveMap from './interactive-map/InteractiveMap';\r\n\r\nconst AddTactic = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const params = useParams<{ tacticId: string }>();\r\n    const tactic: Tactic = useSelector(selectedTacticSelector);\r\n\r\n    // TODO - use tacticId to dispactch change of the selected tactic\r\n    const tacticId = params.tacticId === \"add\" ? DEFAULT_NEW_TACTIC_ID : params.tacticId; // TODO - to be refactored in the future\r\n    \r\n\r\n    const onClickAddTactic = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        dispatch(saveTactic(tactic))\r\n    }, [dispatch, tactic])\r\n\r\n    const onClickCancelEdit = useCallback(() => {\r\n        dispatch(cancelTacticChanges(tactic))\r\n        history.push('/tactics');\r\n    }, [dispatch, history, tactic])\r\n\r\n    const isFormValid: () => boolean = () => {\r\n        return true\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* <InteractiveMap /> */}\r\n            <TacticMetadataForm />\r\n            <TacticRoleForm />\r\n            <hr />\r\n            <DndProvider backend={HTML5Backend}>\r\n                <TacticRoles />\r\n            </DndProvider>\r\n            <hr />\r\n\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={onClickAddTactic}\r\n                disabled={!isFormValid()}\r\n            >\r\n                Save Tactic\r\n            </Button>\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                onClick={onClickCancelEdit}\r\n                disabled={!isFormValid()}\r\n            >\r\n                Cancel\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddTactic;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\clan-details\\ClanMember.tsx",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\TournamentList.tsx",["350","351"],"import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RootState } from \"../../slices\";\r\nimport { removeTournament, selectTournaments } from '../../slices/tournamentSlice';\r\nimport Tournament from './Tournament';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        tournaments: {\r\n\r\n        },\r\n        tournamentsContainer: {\r\n            border: '1px solid green',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            marginTop: '5%',\r\n        },\r\n    }),\r\n);\r\n\r\nconst TournamentList = () => {\r\n    const { tournamentList } = useSelector(\r\n        (state: RootState) => state.tournamentState\r\n    )\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const editTournament = useCallback(\r\n        (tournament) => history.push('/edit-tournament', { state: tournament }),\r\n        [history]\r\n    )\r\n\r\n    return (\r\n        <div className={classes.tournaments}>\r\n            {/* <span>{tournamentList.length} Tournaments</span> */}\r\n            <div className={classes.tournamentsContainer}>\r\n                {tournamentList.map((tournament, key) => (\r\n                    <Tournament key={key}\r\n                        {...tournament}\r\n                        onRemoveClick={() => removeTournament(tournament)}\r\n                        onEditClick={() => editTournament(tournament)}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TournamentList;\r\n\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\PlayerList.tsx",["352","353","354","355","356","357","358"],"import React from 'react';\r\nimport Player from './Player';\r\nimport { RootState } from '../../../slices';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { makeStyles, Theme, createStyles, Button } from '@material-ui/core';\r\nimport { DEFAULT_NEW_TEAM_NAME, saveTeam, selectedTeamIdSelector, selectedTeamSelector } from '../../../slices/teamSlice';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        playerList: {\r\n            display: 'flex',\r\n            flexDirection: 'column'\r\n        },\r\n    }),\r\n);\r\n\r\nconst PlayerList = () => {\r\n    const classes = useStyles();\r\n    \r\n    const selectedTeamId = useSelector(selectedTeamIdSelector)\r\n    const team = useSelector(selectedTeamSelector)\r\n    \r\n    const players = team?.players ?? []; // ?\r\n\r\n    return <div className={classes.playerList}>\r\n        <span>{players.length} players selected</span>\r\n        {players.map(player => (\r\n            <Player key={player.account_id} teamId={team.teamId} user={player} />\r\n        ))}\r\n    </div>\r\n}\r\n\r\nexport default PlayerList;\r\n\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\AddPlayer.tsx",["359","360"],"import {\r\n    Button,\r\n    createStyles,\r\n    FormControl,\r\n    InputLabel,\r\n    makeStyles,\r\n    MenuItem,\r\n    Select,\r\n    Theme\r\n} from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { FormGroup } from '@material-ui/core';\r\nimport { clanDetailsFetchSelector, fetchClanDetailsThunk, fetchPhoenixClanDetailsThunk } from '../../../slices/clanSlice';\r\nimport { User } from '../../vehicles/types';\r\nimport {\r\n    createDefaultUser,\r\n    addPlayer,\r\n    AddPlayerToTeamAction,\r\n    selectedTeamIdSelector\r\n} from '../../../slices/teamSlice';\r\n\r\n\r\n// TODO - this is duplicate with AddTactic.tsx styles, extract\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n);\r\n\r\nconst AddPlayer = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const defaultUser = createDefaultUser()\r\n    const [player, setPlayer] = useState(defaultUser);\r\n\r\n    const { clanDetails, clanDetailsFetchErrors, clanDetailsFetchStatus } = useSelector(clanDetailsFetchSelector);\r\n    const selectedTeamId = useSelector(selectedTeamIdSelector);\r\n\r\n    const onChangePlayer = (event: any) => {\r\n        const playerId = event.target.value;\r\n        const playerIndex = clanDetails.members.findIndex(clanMember => clanMember.account_id === playerId)\r\n        const updatedPlayer = clanDetails.members[playerIndex];\r\n        setPlayer(updatedPlayer);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (clanDetailsFetchStatus === 'idle') {\r\n            dispatch(fetchPhoenixClanDetailsThunk())\r\n        }\r\n    }, [clanDetailsFetchStatus])\r\n\r\n    const onAddPlayer = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        dispatch(addPlayer({ teamId: selectedTeamId, user: player } as AddPlayerToTeamAction));\r\n        setPlayer(defaultUser);\r\n    }\r\n\r\n    const buildPlayerList = () => {\r\n        switch (clanDetailsFetchStatus) {\r\n            case \"idle\":\r\n                return <MenuItem key=''></MenuItem>;\r\n            case \"loading\":\r\n                return <MenuItem key=''></MenuItem>;\r\n            case \"succeeded\":\r\n                const members = clanDetails.members;\r\n                return members.map((clanMember: User) => {\r\n                    return <MenuItem key={clanMember.account_id} value={clanMember.account_id}>\r\n                        {clanMember.account_name}\r\n                    </MenuItem>\r\n                });\r\n            case \"failed\":\r\n                console.error({ clanDetailsFetchErrors })\r\n                return <p>Could not connect server to get info</p>\r\n        }\r\n    }\r\n\r\n    const buildFormControls = () => {\r\n        return (\r\n            <FormGroup>\r\n                <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"player-form-control\">Player</InputLabel>\r\n                    <Select\r\n                        labelId=\"player-form-control\"\r\n                        id=\"player-select\"\r\n                        value={player.account_id}\r\n                        onChange={event => onChangePlayer(event)}\r\n                    >\r\n                        {buildPlayerList()}\r\n                    </Select>\r\n                </FormControl>\r\n            </FormGroup>\r\n\r\n        )\r\n    }\r\n\r\n    const isAddPlayerButtonEnabled = () => {\r\n        return !!player.account_id\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {buildFormControls()}\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={onAddPlayer}\r\n                disabled={!isAddPlayerButtonEnabled()}\r\n            >\r\n                <AddIcon />\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AddPlayer;\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\TeamCard.tsx",["361","362"],"import {\r\n    makeStyles,\r\n    Theme,\r\n    createStyles,\r\n    Card,\r\n    CardHeader,\r\n    Avatar,\r\n    CardMedia,\r\n    CardContent,\r\n    Typography,\r\n    CardActions,\r\n    Button\r\n} from '@material-ui/core';\r\nimport { red } from '@material-ui/core/colors';\r\nimport React, { useCallback } from 'react';\r\nimport { changeSelectedTeam, deleteTeam, Team } from '../../../slices/teamSlice';\r\n\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            maxWidth: 345,\r\n        },\r\n        media: {\r\n            height: 0,\r\n            paddingTop: \"56.25%\" // 16:9\r\n        },\r\n        avatar: {\r\n            backgroundColor: red[500]\r\n        }\r\n    })\r\n);\r\n\r\nconst TeamCard = (team: Team) => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const onRemoveClick = useCallback(() => {\r\n        dispatch(deleteTeam(team))\r\n    }, [team]);\r\n\r\n    const onEditClick = useCallback(() => {\r\n        dispatch(changeSelectedTeam(team.teamId))\r\n        history.push(`/teams/${team.teamId}`)\r\n    }, [team]);\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                avatar={<Avatar aria-label=\"creator\" className={classes.avatar} />}\r\n                title={team.teamName}\r\n                subheader=\"\"\r\n            />\r\n            <CardMedia\r\n                className={classes.media}\r\n                image=\"/static/images/cards/paella.jpg\"\r\n                title=\"Paella dish\"\r\n            />\r\n            <CardContent>\r\n                {team.players.length > 0 && team.players.map(player =>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {player.account_name}\r\n                    </Typography>)}\r\n            </CardContent>\r\n            <CardActions disableSpacing>\r\n                <Button variant=\"outlined\" color=\"secondary\" onClick={onEditClick}>\r\n                    <EditIcon />\r\n                </Button>\r\n                <Button variant=\"outlined\" color=\"secondary\" onClick={onRemoveClick}>\r\n                    <RemoveIcon />\r\n                </Button>\r\n            </CardActions>\r\n        </Card >\r\n    );\r\n}\r\n\r\n\r\nexport default TeamCard;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-metadata\\TacticMetadataForm.tsx",["363","364","365","366"],"import {\r\n    makeStyles,\r\n    Theme,\r\n    createStyles,\r\n    FormGroup,\r\n    FormControl,\r\n    TextField,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    Button\r\n} from '@material-ui/core';\r\nimport React, { useCallback, useContext, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    allMapsSelector,\r\n    changeTacticBaseNumber,\r\n    changeTacticMapName,\r\n    changeTacticReference,\r\n    ChangeTacticReferenceAction,\r\n    saveTacticMetadata,\r\n    selectedTacticIdSelector,\r\n    selectedTacticMetadataSelector\r\n} from '../../store/tacticsSlice';\r\nimport { MapBaseNumber } from '../../../../store/types/enums/MapBaseNumber.enum';\r\nimport { WoTMap } from '../../../../store/types/interfaces/WoTMap.interface';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formGroup: {\r\n            // display: \"flex\",\r\n            flexDirection: \"row\"\r\n        },\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n    }),\r\n);\r\n\r\n\r\nconst TacticMetadataForm = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const maps = useSelector(allMapsSelector);\r\n    const selectedTacticId = useSelector(selectedTacticIdSelector);\r\n    const tacticMetadata = useSelector(selectedTacticMetadataSelector);\r\n\r\n    const buildBaseNumberOptions = () => {\r\n        return Object.keys(MapBaseNumber).map(baseNumberKey =>\r\n            <MenuItem key={baseNumberKey} value={baseNumberKey}>\r\n                {MapBaseNumber[baseNumberKey as MapBaseNumber]}\r\n            </MenuItem>\r\n        )\r\n    }\r\n\r\n    const buildMapList = () => {\r\n        return maps.map((map: WoTMap) => {\r\n            return <MenuItem key={map.arena_id} value={map.name_i18n}>\r\n                {map.name_i18n}\r\n            </MenuItem>\r\n        })\r\n    }\r\n\r\n    const isFormValid = () => {\r\n        return Boolean(tacticMetadata.baseNumber) && Boolean(tacticMetadata.tacticReference) && Boolean(tacticMetadata.mapName)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!!selectedTacticId) {\r\n        }\r\n        if (!!tacticMetadata) {\r\n        }\r\n    }, [tacticMetadata, selectedTacticId])\r\n\r\n\r\n    const onChangeMapName = useCallback((event: React.ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        const mapName = event.target.value as string;\r\n        dispatch(changeTacticMapName({ mapName }))\r\n    }, [dispatch, tacticMetadata])\r\n\r\n    const onChangeTacticReference = useCallback((event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const tacticReference = event.target.value as string;\r\n        dispatch(changeTacticReference({ tacticReference } as ChangeTacticReferenceAction))\r\n    }, [dispatch, tacticMetadata])\r\n\r\n    const onChangeBaseNumber = useCallback((event: React.ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        const baseNumber = MapBaseNumber[event.target.value as MapBaseNumber];\r\n        dispatch(changeTacticBaseNumber({ baseNumber }))\r\n    }, [dispatch, tacticMetadata])\r\n\r\n    const onClickSaveForm = useCallback((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        dispatch(saveTacticMetadata(tacticMetadata))\r\n    }, [dispatch, tacticMetadata])\r\n\r\n\r\n\r\n\r\n    const buildTacticMetadataFormGroup = () => {\r\n        return <FormGroup className={classes.formGroup}>\r\n            <FormControl className={classes.formControl}>\r\n                <TextField\r\n                    required\r\n                    label=\"Tactic Name\"\r\n                    value={tacticMetadata.tacticReference}\r\n                    onChange={onChangeTacticReference}\r\n                />\r\n            </FormControl>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"map-form-control\">Map</InputLabel>\r\n                <Select\r\n                    labelId=\"map-form-control\"\r\n                    id=\"map-select\"\r\n                    value={tacticMetadata.mapName}\r\n                    onChange={onChangeMapName}\r\n                >\r\n                    {buildMapList()}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"base-number-form-control\">Base Number</InputLabel>\r\n                <Select\r\n                    labelId=\"base-number-form-control\"\r\n                    id=\"base-number-select\"\r\n                    value={tacticMetadata.baseNumber}\r\n                    onChange={onChangeBaseNumber}\r\n                >\r\n                    {buildBaseNumberOptions()}\r\n                </Select>\r\n            </FormControl>\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={onClickSaveForm}\r\n                disabled={!isFormValid()}\r\n            >\r\n                Save Metadata\r\n            </Button>\r\n        </FormGroup>\r\n    }\r\n\r\n    return <div>\r\n        {buildTacticMetadataFormGroup()}\r\n    </div>\r\n}\r\n\r\nexport default TacticMetadataForm;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-role\\TacticRoleForm.tsx",["367","368","369","370","371","372","373","374"],"import {\r\n    Button,\r\n    createStyles,\r\n    FormControl,\r\n    FormGroup,\r\n    InputLabel,\r\n    makeStyles,\r\n    MenuItem,\r\n    Select,\r\n    Theme\r\n} from '@material-ui/core';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { tanksFetchSelector, clanDetailsFetchSelector, fetchClanDetailsThunk, fetchTanksThunk, fetchPhoenixClanDetailsThunk } from '../../../../slices/clanSlice';\r\nimport { mapFetchDetailsSelector, selectedTacticIdSelector, fetchMapsThunk, addTacticRole } from '../../store/tacticsSlice';\r\nimport { PlayerTacticRole } from '../../../../store/types/interfaces/TacticMetadata.interface';\r\nimport { User, Vehicle } from '../../../vehicles/types';\r\n\r\nconst createDefaultTacticRole = () => {\r\n    return {\r\n        playerId: \"\",\r\n        tankId: \"\"\r\n    } as PlayerTacticRole;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formGroup: {\r\n            // display: \"flex\",\r\n            flexDirection: \"row\"\r\n        },\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n    }),\r\n);\r\n\r\nconst TacticRoleForm = () => {\r\n    const dispatch = useDispatch();\r\n    const { mapFetchError, mapFetchStatus, maps } = useSelector(mapFetchDetailsSelector)\r\n    const { tanksFetchErrors, tanksFetchStatus, tanks } = useSelector(tanksFetchSelector)\r\n    const { clanDetailsFetchErrors, clanDetailsFetchStatus, clanDetails } = useSelector(clanDetailsFetchSelector);\r\n    const [tacticRole, setTacticRole] = useState(createDefaultTacticRole())\r\n    const tacticId = useSelector(selectedTacticIdSelector);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (mapFetchStatus === 'idle') {\r\n            dispatch(fetchMapsThunk())\r\n        }\r\n    }, [mapFetchStatus])\r\n\r\n    useEffect(() => {\r\n        if (clanDetailsFetchStatus === 'idle') {\r\n            dispatch(fetchPhoenixClanDetailsThunk())\r\n        }\r\n    }, [clanDetailsFetchStatus])\r\n\r\n    useEffect(() => {\r\n        if (tanksFetchStatus === 'idle') {\r\n            dispatch(fetchTanksThunk())\r\n        }\r\n    }, [tanksFetchStatus])\r\n\r\n    const onChangePlayer = useCallback((event: any) => {\r\n        const playerId = event.target.value;\r\n        setTacticRole({ ...tacticRole, playerId });\r\n    }, [tacticRole])\r\n\r\n    const onChangeTank = useCallback((event: any) => {\r\n        const tankId = event.target.value as string;\r\n        setTacticRole({ ...tacticRole, tankId })\r\n    }, [tacticRole])\r\n\r\n    const onClickAddTacticRole = useCallback(() => {\r\n        dispatch(addTacticRole(tacticRole))\r\n        setTacticRole(createDefaultTacticRole())\r\n    }, [tacticRole])\r\n\r\n    const isTacticRoleValid: () => boolean = () => {\r\n        return !!tacticRole.playerId && !!tacticRole.tankId\r\n    }\r\n\r\n    const buildPlayerList = () => {\r\n        switch (clanDetailsFetchStatus) {\r\n            case \"idle\":\r\n                return <MenuItem></MenuItem>;\r\n            case \"loading\":\r\n                return <MenuItem></MenuItem>;\r\n            case \"succeeded\":\r\n                const members = clanDetails.members;\r\n                return members.map((clanMember: User) => {\r\n                    return <MenuItem key={clanMember.account_id} value={clanMember.account_id}>\r\n                        {clanMember.account_name}\r\n                    </MenuItem>\r\n                });\r\n            case \"failed\":\r\n                console.error({ clanDetailsFetchErrors })\r\n                return <p>Could not connect server to get info</p>\r\n        }\r\n    }\r\n\r\n    const buildTankList = () => {\r\n        switch (tanksFetchStatus) {\r\n            case \"idle\":\r\n                return <MenuItem></MenuItem>\r\n            case \"loading\":\r\n                return <MenuItem></MenuItem>\r\n            case \"succeeded\":\r\n                return Object.keys(tanks).map((key: string) => {\r\n                    return <MenuItem key={key} value={key}>{(tanks[+key] as Vehicle).name}</MenuItem>\r\n                });\r\n            case \"failed\":\r\n                console.error({ tanksFetchErrors })\r\n                return <p> could not connect server to get info</p>\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const buildTacticRolesFormGroup = () => {\r\n        return (\r\n            <FormGroup className={classes.formGroup}>\r\n                <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"player-form-control\">Player</InputLabel>\r\n                    <Select\r\n                        labelId=\"player-form-control\"\r\n                        id=\"player-select\"\r\n                        value={tacticRole.playerId}\r\n                        onChange={onChangePlayer}\r\n                    >\r\n                        {buildPlayerList()}\r\n                    </Select>\r\n                </FormControl>\r\n                <FormControl className={classes[\"formControl\"]}>\r\n                    <InputLabel id=\"player-form-control\">Tank</InputLabel>\r\n                    <Select\r\n                        labelId=\"player-form-control\"\r\n                        id=\"player-select\"\r\n                        value={tacticRole.tankId}\r\n                        onChange={onChangeTank}\r\n                    >\r\n                        {buildTankList()}\r\n                    </Select>\r\n                </FormControl>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={onClickAddTacticRole}\r\n                    disabled={!isTacticRoleValid()}\r\n                >\r\n                    <AddIcon />\r\n                </Button>\r\n            </FormGroup >\r\n\r\n        )\r\n    }\r\n\r\n    return <div>\r\n        {buildTacticRolesFormGroup()}\r\n    </div>\r\n}\r\n\r\nexport default TacticRoleForm;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-role\\TacticRoles.tsx",["375","376"],"import React from 'react';\r\nimport { DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from 'react-dnd';\r\nimport { useSelector } from 'react-redux';\r\nimport { PlayerTacticRole } from '../../../../store/types/interfaces/TacticMetadata.interface';\r\nimport { tacticRolesSelector } from '../../store/tacticsSlice';\r\nimport TacticRole from './TacticRole';\r\n\r\n\r\nconst TacticRoles = (props: ReturnType<typeof collect>) => {\r\n    const tacticRoles = useSelector(tacticRolesSelector);\r\n    const { canDrop, isOver, connectDropTarget } = props;\r\n    const renderTacticRoles = (tacticRole: PlayerTacticRole, index: number) => <TacticRole key={tacticRole.playerId} {...tacticRole} />\r\n\r\n    return connectDropTarget(\r\n        <div className=\"tactic-roles\">\r\n            {tacticRoles.map(renderTacticRoles)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst dropTargetSpec: DropTargetSpec<PlayerTacticRole> = {\r\n    drop(props: PlayerTacticRole, monitor: DropTargetMonitor) {\r\n        console.log(\"dropping\", { props })\r\n        return props\r\n    },\r\n    canDrop(props: PlayerTacticRole) {\r\n        // You can disallow drag based on props\r\n        // return props.isReady\r\n        console.log(\"can drop: \", true)\r\n        return true;\r\n    }\r\n}\r\n\r\nlet collect = (connect: DropTargetConnector, monitor: DropTargetMonitor, props: unknown) => {\r\n    return {\r\n        connectDropTarget: connect.dropTarget(),\r\n        isOver: monitor.isOver(),\r\n        canDrop: monitor.canDrop()\r\n    };\r\n}\r\nexport default DropTarget(\"tacticRole\", dropTargetSpec, collect)(TacticRoles);","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tournament\\Tournament.tsx",["377","378","379"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardActionArea,\r\n    CardActions,\r\n    CardContent,\r\n    CardMedia,\r\n    createStyles,\r\n    Icon,\r\n    makeStyles,\r\n    Theme,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport AccessibleIcon from \"@material-ui/icons/Accessible\"\r\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\"\r\n\r\ninterface TournamentProps {\r\n    id: string;\r\n    description: string;\r\n    numberOfPlayers: number; // number of players/teams depending on format\r\n    battleFormat: string; // replace with a type\r\n    totalPrize: number;\r\n\r\n    onRemoveClick: () => void;\r\n    onEditClick: () => void;\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        tournament: {\r\n            border: '1px solid beige',\r\n            // color: 'darkred',\r\n            float: 'right',\r\n            cursor: 'pointer',\r\n            fill: '#f7c6pc',\r\n        },\r\n        button: {\r\n            overflowX: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n        },\r\n        media: {\r\n            height: 140,\r\n        },\r\n        gold: {\r\n            fill: '#f7c6pc'\r\n        }\r\n    }),\r\n);\r\n\r\nconst Tournament = ({\r\n    id,\r\n    description,\r\n    numberOfPlayers,\r\n    battleFormat,\r\n    totalPrize,\r\n    onRemoveClick,\r\n    onEditClick,\r\n}: TournamentProps) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.tournament}>\r\n            <CardActionArea>\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image=\"/static/images/cards/contemplative-reptile.jpg\"\r\n                    title=\"Contemplative Reptile\"\r\n                />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {battleFormat} with a total prize of {totalPrize} gold\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {numberOfPlayers} <AccessibleIcon /> registered\r\n                    </Typography>\r\n                    {/* <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {description}\r\n                    </Typography> */}\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button size=\"small\" variant=\"outlined\" color=\"primary\" onClick={onEditClick}>\r\n                    <EditIcon />\r\n                </Button>\r\n                <Button size=\"small\" variant=\"outlined\" color=\"secondary\" onClick={onRemoveClick}>\r\n                    <RemoveIcon />\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n\r\nTournament.propTypes = {\r\n    // name: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Tournament;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\team\\components\\Player.tsx",["380","381","382"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Button, createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { removePlayer, RemovePlayerFromTeamAction, SelectedTeamIdAction, UserAction } from '../../../slices/teamSlice';\r\nimport { User } from '../../vehicles/types';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        player: {\r\n            overflowX: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            // margin: '1rem 2rem'\r\n        },\r\n    }),\r\n);\r\n\r\nconst Player = ({ user, teamId }: UserAction) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const onRemoveClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (user) {\r\n            dispatch(removePlayer({ teamId, user } as RemovePlayerFromTeamAction));\r\n        }\r\n    };\r\n    return <div className={classes.player}>\r\n        <span>{user?.account_name}</span>\r\n        {/* style={{ color: 'darkred', float: 'right', cursor: 'pointer' } */}\r\n        <Button variant=\"outlined\" color=\"secondary\" onClick={event => onRemoveClick(event)}>\r\n            <RemoveIcon />\r\n        </Button>\r\n    </div >\r\n\r\n}\r\n\r\nexport default Player;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\tactic-role\\TacticRole.tsx",["383","384","385","386","387","388","389","390","391","392","393"],"import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { Button, createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport { clanDetailsFetchSelector, clanMembersSelector, fetchClanDetailsThunk, fetchPhoenixClanDetailsThunk, tanksFetchSelector } from '../../../../slices/clanSlice';\r\nimport { PlayerTacticRole } from '../../../../store/types/interfaces/TacticMetadata.interface';\r\nimport { getProperty } from '../../../../slices/teamSlice';\r\nimport { DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec, useDrag, useDrop } from 'react-dnd';\r\nimport { removeTacticRole } from '../../store/tacticsSlice';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        tacticRole: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\"\r\n        },\r\n        actions: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\"\r\n        }\r\n    })\r\n);\r\n\r\ntype TacticRoleProps = PlayerTacticRole & ReturnType<typeof collect>\r\nconst TacticRole = (props: TacticRoleProps) => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const tacticRole = {\r\n        tankId: props.tankId,\r\n        playerId: props.playerId,\r\n        index: props.index\r\n    } as PlayerTacticRole\r\n    const { isDragging, connectDragSource } = props;\r\n    const { clanDetailsFetchErrors, clanDetailsFetchStatus, clanDetails } = useSelector(clanDetailsFetchSelector);\r\n    const { tanksFetchErrors, tanksFetchStatus, tanks } = useSelector(tanksFetchSelector);\r\n    const { clanMembers } = useSelector(clanMembersSelector)\r\n\r\n\r\n\r\n    const [name, setName] = useState(\"\")\r\n    const [tank, setTank] = useState(\"\")\r\n\r\n    const onEditClick = useCallback(() => {}, [tacticRole, tank, name]);\r\n\r\n    const onRemoveClick = useCallback(() => {\r\n        dispatch(removeTacticRole(tacticRole))\r\n    }, [tacticRole, tank, name])\r\n\r\n    useEffect(() => {\r\n        if (clanDetailsFetchStatus === 'idle') {\r\n            dispatch(fetchPhoenixClanDetailsThunk())\r\n        }\r\n\r\n        if (clanDetailsFetchStatus === \"succeeded\" && clanMembers.length > 0) {\r\n            const playerId = tacticRole.playerId\r\n            const newPlayer = clanMembers.find(member => member.account_id === playerId);\r\n            if (newPlayer != null) {\r\n                setName(newPlayer.account_name)\r\n            }\r\n        }\r\n\r\n        if (tanksFetchStatus === \"succeeded\") {\r\n            const tankId = tacticRole.tankId\r\n            const newTank = getProperty(tanks, +tankId)\r\n            setTank(newTank.name)\r\n        }\r\n\r\n    }, [tacticRole, clanDetailsFetchStatus, tanksFetchStatus, clanMembers])\r\n\r\n    return connectDragSource(\r\n        <div className={classes.tacticRole}>\r\n            <p>{name}</p>\r\n            <p>{tank}</p>\r\n            {/* some button actions */}\r\n            <div className={classes.actions}>\r\n                <Button variant=\"outlined\" color=\"secondary\" onClick={onEditClick}>\r\n                    <EditIcon />\r\n                </Button>\r\n                <Button variant=\"outlined\" color=\"secondary\" onClick={onRemoveClick}>\r\n                    <RemoveIcon />\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst tacticRoleSpec: DragSourceSpec<PlayerTacticRole, any> = {\r\n    beginDrag(props, monitor: DragSourceMonitor) {\r\n        console.log(\"begin drag\", { props })\r\n        return props\r\n    },\r\n    endDrag(props: PlayerTacticRole, monitor, component) {\r\n        if (!monitor.didDrop()) {\r\n            return;\r\n        }\r\n        console.log(\"ending drag: \", { props })\r\n        // When dropped on a compatible target, do something.\r\n        // Read the original dragged item from getItem():\r\n        const dragItem = monitor.getItem()\r\n        console.log({ dragItem })\r\n\r\n        // You may also read the drop result from the drop target\r\n        // that handled the drop, if it returned an object from\r\n        // its drop() method.\r\n        const dropResult = monitor.getDropResult()\r\n        console.log({ dropResult })\r\n        // This is a good place to call some Flux action\r\n        // TODO - dispatch change index\r\n        // changeTacticRoleIndex(dragItem.index, dropResult.)\r\n    },\r\n    isDragging(props: PlayerTacticRole, monitor) {\r\n        console.log(\"dragging item\", monitor.getItem(), { props })\r\n        if (monitor.getItem().id !== props.index) {\r\n\r\n        }\r\n        return monitor.getItem().id === props.index\r\n    },\r\n    canDrag(props: PlayerTacticRole) {\r\n        // You can disallow drag based on props\r\n        // return props.isReady\r\n        console.log(\"can drag: \", true)\r\n        return true;\r\n    }\r\n}\r\n\r\nconst collect = (connect: DragSourceConnector, monitor: DragSourceMonitor, props: unknown) => {\r\n    return {\r\n        // Call this function inside render()\r\n        // to let React DnD handle the drag events:\r\n        connectDragSource: connect.dragSource(),\r\n        // You can ask the monitor about the current drag state:\r\n        isDragging: monitor.isDragging()\r\n    }\r\n}\r\nexport default DragSource(\"tacticRole\", tacticRoleSpec, collect)(TacticRole);","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\store\\tacticsSlice.ts",["394","395","396"],"\r\nimport { createAsyncThunk, createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { BaseId, FetchStatus, RootState } from '../../../slices';\r\nimport APPLICATION_ID from '../../../api/config';\r\nimport { MapBaseNumber } from '../../../store/types/enums/MapBaseNumber.enum';\r\nimport { TacticType } from '../../../store/types/enums/TacticType.enum';\r\nimport { PlayerTacticRole, Tactic, TacticMetadata } from '../../../store/types/interfaces/TacticMetadata.interface';\r\nimport { WoTMap } from '../../../store/types/interfaces/WoTMap.interface';\r\nimport { buildParamStr, redirectTo } from '../../../utils/url/urlUtils';\r\nimport { applyChanges, Change, ChangeType } from '../../../store/decorators/PropertyChanged';\r\nimport { MapMarker, MarkerType } from '../../../slices/mapInteractionSlice';\r\n\r\nconst MAP_API = 'https://api.worldoftanks.ru/wot/encyclopedia/arenas/'\r\nconst MAP_IMAGES_API = \"https://stratsketch.com/maps/wot/thumb/\"\r\n\r\nexport const DEFAULT_NEW_TACTIC_ID = '0';\r\nexport const TACTICS_STATE_STORAGE_KEY = 'tacticsState';\r\nexport const TACTICS_PAGE = '/tactics'; // TODO - extract\r\n\r\ninterface TacticsState {\r\n    tactics: Tactic[];\r\n    selectedTacticId: string;\r\n\r\n    mapFetchError: any,\r\n    mapFetchStatus: FetchStatus,\r\n    maps: WoTMap[];\r\n\r\n    selectedMap: WoTMap;\r\n}\r\n\r\nconst loadState = () => {\r\n    const storage = localStorage.getItem(TACTICS_STATE_STORAGE_KEY)\r\n    if (storage !== null) {\r\n        return JSON.parse(storage) as TacticsState;\r\n    }\r\n}\r\n\r\nconst saveTacticsState = (state: TacticsState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(TACTICS_STATE_STORAGE_KEY, serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\nexport const createDefaultTacticMetadata = () => {\r\n    return {\r\n        tacticReference: '',\r\n        mapName: '',\r\n        tacticType: TacticType.NONE,\r\n        baseNumber: MapBaseNumber.NONE\r\n    } as TacticMetadata\r\n}\r\nexport const createDefaultTactic = () => {\r\n    return {\r\n        id: DEFAULT_NEW_TACTIC_ID,\r\n        metadata: createDefaultTacticMetadata(),\r\n        playerTacticRoles: [],\r\n        activeTool: {\r\n            cursorTool: true\r\n        },\r\n        positionList: [],\r\n        cursorPosition: { x: 0, y: 0, markerType: MarkerType.MEDIUM_TANK } as MapMarker,\r\n        changes: []\r\n    } as Tactic\r\n}\r\nconst createDefaultTacticsState = () => {\r\n    return {\r\n        tactics: [createDefaultTactic()] as Tactic[],\r\n        selectedTacticId: DEFAULT_NEW_TACTIC_ID,\r\n        mapFetchStatus: 'idle',\r\n        mapFetchError: null,\r\n        maps: [] as WoTMap[],\r\n        selectedMap: null as any as WoTMap\r\n    } as TacticsState;\r\n}\r\nconst initialState: TacticsState = loadState() || createDefaultTacticsState();\r\n\r\n\r\nexport type ChangeTacticReferenceAction = {\r\n    tacticReference: string;\r\n}\r\nexport type ChangeTacticMapName = {\r\n    mapName: string;\r\n}\r\nexport type ChangeTacticBaseNumber = {\r\n    baseNumber: MapBaseNumber;\r\n}\r\n\r\nconst buildMapsQueryUrl: (url: string, params: any) => string = (url, params: any) => {\r\n    const queryParamStr = buildParamStr(params);\r\n    return `${url}?application_id=${APPLICATION_ID}&${queryParamStr}`;\r\n}\r\nconst url = buildMapsQueryUrl(MAP_API, { language: \"en\" })\r\n\r\nexport const createMapImageUrl = (mapName: string) => `${MAP_IMAGES_API}${mapName}.jpg`\r\nexport const fetchMapsThunk = createAsyncThunk('maps/fetchMaps', async () => {\r\n    const response: Response = await fetch(url);\r\n    const json = await response.json();\r\n    return json.data;\r\n})\r\n\r\n\r\n// TODO - remove any maps api logic from here (separate slice)\r\nexport const tacticsSlice = createSlice({\r\n    name: 'tactics',\r\n    initialState,\r\n    reducers: {\r\n        saveTactic: (state, action: PayloadAction<Tactic>) => {\r\n            const updatedTactic = action.payload;\r\n            const tacticsNumber = state.tactics.length;\r\n            const defaultTacticIndex = state.tactics.findIndex(tactic => tactic.id === DEFAULT_NEW_TACTIC_ID)\r\n\r\n            if (updatedTactic.id === DEFAULT_NEW_TACTIC_ID) {\r\n                // ADD tactic\r\n                const newTacticWithId: Tactic = { ...updatedTactic, id: `${tacticsNumber}`, changes: [] }\r\n                state.tactics.push(newTacticWithId);\r\n                state.tactics[defaultTacticIndex] = createDefaultTactic();\r\n            } else {\r\n                // UPDATE tactic\r\n                const teamIndex = state.tactics.findIndex(tactic => tactic.id === updatedTactic.id);\r\n                if (teamIndex !== -1) {\r\n                    const changesAppliedTactic = applyChanges<Tactic>(updatedTactic, ChangeType.APPLY);\r\n                    state.tactics[teamIndex] = changesAppliedTactic;\r\n                } else {\r\n                    state.tactics.push({ ...updatedTactic, changes: [] });\r\n                    state.tactics[defaultTacticIndex] = createDefaultTactic();\r\n                }\r\n            }\r\n            state.selectedTacticId = DEFAULT_NEW_TACTIC_ID;\r\n            saveTacticsState(state);\r\n            redirectTo(TACTICS_PAGE)\r\n        },\r\n        removeTactic: (state, action: PayloadAction<BaseId>) => {\r\n            const deletableTacticId = action.payload.id;\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === deletableTacticId)\r\n            if (tacticIndex !== -1) {\r\n                state.tactics.splice(tacticIndex, 1);\r\n                if (deletableTacticId === state.selectedTacticId) {\r\n                    state.selectedTacticId = DEFAULT_NEW_TACTIC_ID;\r\n                }\r\n            }\r\n            saveTacticsState(state);\r\n        },\r\n        cancelTacticChanges: (state, action: PayloadAction<Tactic>) => {\r\n            const tactic = action.payload;\r\n            if (tactic.id === DEFAULT_NEW_TACTIC_ID) {\r\n                redirectTo(TACTICS_PAGE);\r\n            }\r\n\r\n            const updatedTactic = applyChanges(tactic, ChangeType.REVERT);\r\n\r\n            const defaultTacticIndex = state.tactics.findIndex(tactic => tactic.id === DEFAULT_NEW_TACTIC_ID);\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === updatedTactic.id);\r\n            if (tacticIndex !== -1) {\r\n                state.tactics[tacticIndex] = { ...updatedTactic };\r\n            } else {\r\n                state.tactics.push({ ...updatedTactic, changes: [] });\r\n                state.tactics[defaultTacticIndex] = createDefaultTactic();\r\n            }\r\n            state.selectedTacticId = DEFAULT_NEW_TACTIC_ID;\r\n            saveTacticsState(state);\r\n            redirectTo(TACTICS_PAGE);\r\n        },\r\n        // moveCursor: (state, action: PayloadAction<Point>) => {\r\n        //     const point = action.payload;\r\n        //     // console.log({ point }, state.selectedTacticId)\r\n        //     const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId)\r\n        //     if (tacticIndex !== -1) {\r\n        //         state.tactics[tacticIndex].cursorPosition = point;\r\n        //     }\r\n        // },\r\n        // addTacticPosition: (state, action: PayloadAction<Point>) => {\r\n        //     const point = action.payload;\r\n        //     // console.log({ point })\r\n        //     const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId)\r\n        //     if (tacticIndex !== -1) {\r\n        //         const tactic = state.tactics[tacticIndex];\r\n        //         const updatedPositionList = [...tactic.positionList]\r\n        //         updatedPositionList.push(point);\r\n        //         if (updatedPositionList.length > 100) {\r\n        //             updatedPositionList.splice(0, 1)\r\n        //         }\r\n        //         tactic.positionList = [...updatedPositionList]\r\n        //     }\r\n        // },\r\n        // saveTacticPositions: (state, action: PayloadAction<Point[]>) => {\r\n        //     const positionList = action.payload;\r\n        //     const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId)\r\n        //     if (tacticIndex !== -1) {\r\n        //         state.tactics[tacticIndex].positionList = [...positionList]\r\n        //     }\r\n        // },\r\n        clearTacticPositions: (state) => {\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId)\r\n            if (tacticIndex !== -1) {\r\n                state.tactics[tacticIndex].positionList = []\r\n            }\r\n        },\r\n        changeSelectedTactic: (state, action: PayloadAction<BaseId>) => {\r\n            state.selectedTacticId = action.payload.id;\r\n            saveTacticsState(state); // TODO - why ?\r\n        },\r\n        saveTacticMetadata: (state: TacticsState, action: PayloadAction<TacticMetadata>) => {\r\n            const selectedTactic = state.tactics[state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId)]\r\n            selectedTactic.metadata = { ...action.payload }\r\n            // todo .. apply partial changes only ?? or better delete this as it doesnt bring too much value, section is small and doesnt need partial save\r\n            saveTacticsState(state);\r\n        },\r\n        changeTacticReference: (state: TacticsState, action: PayloadAction<ChangeTacticReferenceAction>) => {\r\n            const tacticReference = action.payload.tacticReference;\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId);\r\n            const isTacticInList = tacticIndex !== -1;\r\n\r\n            if (!isTacticInList) {\r\n                throw new Error();\r\n            }\r\n\r\n            const updatedTactic = { ...state.tactics[tacticIndex] };\r\n            const metadataBefore = { ...updatedTactic.metadata }\r\n            updatedTactic.metadata.tacticReference = tacticReference\r\n            const metadataAfter = { ...updatedTactic.metadata }\r\n\r\n            state.tactics[tacticIndex] = { ...updatedTactic };\r\n            state.tactics[tacticIndex].changes.push({\r\n                key: 'metadata',\r\n                initialValue: metadataBefore,\r\n                newValue: metadataAfter\r\n            } as Change<Tactic>)\r\n        },\r\n        changeTacticMapName: (state: TacticsState, action: PayloadAction<ChangeTacticMapName>) => {\r\n            const payload = action.payload;\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId);\r\n            const isTacticInList = tacticIndex !== -1;\r\n            if (isTacticInList) {\r\n                const map = state.maps.find(map => map.name_i18n === payload.mapName);\r\n                state.selectedMap = { ...map } as WoTMap;\r\n\r\n                const updatedTactic = { ...state.tactics[tacticIndex] };\r\n                updatedTactic.metadata.mapName = payload.mapName\r\n                state.tactics[tacticIndex] = { ...updatedTactic };\r\n            }\r\n        },\r\n        changeTacticBaseNumber: (state: TacticsState, action: PayloadAction<ChangeTacticBaseNumber>) => {\r\n            const payload = action.payload;\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId);\r\n            const isTacticInList = tacticIndex !== -1;\r\n            if (isTacticInList) {\r\n                const updatedTactic = { ...state.tactics[tacticIndex] };\r\n                const beforeMetadata = { ...updatedTactic.metadata }\r\n                updatedTactic.metadata.baseNumber = payload.baseNumber\r\n                const afterMetadata = { ...updatedTactic.metadata }\r\n                state.tactics[tacticIndex] = { ...updatedTactic };\r\n                state.tactics[tacticIndex].changes.push({\r\n                    key: 'metadata',\r\n                    initialValue: beforeMetadata,\r\n                    newValue: afterMetadata\r\n                } as Change<Tactic>)\r\n            }\r\n        },\r\n        changeTacticType: (state: TacticsState, action: PayloadAction<any>) => {\r\n        },\r\n        addTacticRole: (state: TacticsState, action: PayloadAction<PlayerTacticRole>) => {\r\n            const tacticRole = action.payload;\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId);\r\n            const tactic = state.tactics[tacticIndex];\r\n            const tacticRoles = tactic.playerTacticRoles;\r\n            const existingRoleIndex = tacticRoles.findIndex(role => role.playerId === tacticRole.playerId)\r\n            const beforeTacticRoles = [...tactic.playerTacticRoles]\r\n            if (existingRoleIndex !== -1) {\r\n                tacticRoles[existingRoleIndex].tankId = tacticRole.tankId\r\n            } else {\r\n                tacticRoles.push({ ...tacticRole, index: tacticRoles.length })\r\n            }\r\n            const afterTacticRoles = [...tactic.playerTacticRoles]\r\n            tactic.changes.push({\r\n                key: 'playerTacticRoles',\r\n                initialValue: beforeTacticRoles,\r\n                newValue: afterTacticRoles\r\n            } as Change<Tactic>)\r\n        },\r\n        removeTacticRole: (state: TacticsState, action: PayloadAction<PlayerTacticRole>) => {\r\n            const tacticRole = action.payload;\r\n            const tacticIndex = state.tactics.findIndex(tactic => tactic.id === state.selectedTacticId);\r\n            const tactic = state.tactics[tacticIndex];\r\n            const tacticRoles = tactic.playerTacticRoles;\r\n            const existingRoleIndex = tacticRoles.findIndex(role => role.playerId === tacticRole.playerId)\r\n            const beforeTacticRoles = [...tactic.playerTacticRoles]\r\n            if (existingRoleIndex !== -1) {\r\n                tacticRoles.splice(existingRoleIndex, 1);\r\n            }\r\n            const afterTacticRoles = [...tactic.playerTacticRoles]\r\n            tactic.changes.push({\r\n                key: 'playerTacticRoles',\r\n                initialValue: beforeTacticRoles,\r\n                newValue: afterTacticRoles\r\n            } as Change<Tactic>)\r\n        },\r\n        changeTacticRoleIndex: (state: TacticsState, action: PayloadAction<{ previousIndex: number, currentIndex: number }>) => {\r\n        }\r\n    },\r\n    extraReducers: {\r\n        ['maps/fetchMaps/pending']: (state: TacticsState, action) => {\r\n            state.mapFetchStatus = 'loading'\r\n        },\r\n        ['maps/fetchMaps/rejected']: (state: TacticsState, action) => {\r\n            state.mapFetchStatus = 'failed'\r\n            state.mapFetchError = action.error.message\r\n        },\r\n        ['maps/fetchMaps/fulfilled']: (state: TacticsState, action) => {\r\n            state.mapFetchStatus = 'succeeded'\r\n            const payload = action.payload;\r\n            Object.keys(payload).forEach(key => state.maps.push(payload[key]));\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    saveTactic,\r\n    removeTactic,\r\n    cancelTacticChanges,\r\n    // moveCursor,\r\n    // addTacticPosition,\r\n    // saveTacticPositions,\r\n    clearTacticPositions,\r\n    changeTacticRoleIndex,\r\n    changeSelectedTactic,\r\n    saveTacticMetadata,\r\n    changeTacticReference,\r\n    changeTacticMapName,\r\n    changeTacticBaseNumber,\r\n    changeTacticType,\r\n    addTacticRole,\r\n    removeTacticRole\r\n} = tacticsSlice.actions;\r\n\r\nexport const tacticsStateSelector = (state: RootState) => state.tacticsState;\r\nexport const selectedTacticIdSelector = (state: RootState) => state.tacticsState.selectedTacticId as string;\r\nexport const allTacticsSelector = (state: RootState) => state.tacticsState.tactics as Tactic[];\r\n\r\nexport const allMapsSelector = (state: RootState) => state.tacticsState.maps as WoTMap[];\r\nexport const selectedMapSelector = (state: RootState) => state.tacticsState.selectedMap as WoTMap;\r\nexport const mapFetchDetailsSelector = createSelector(\r\n    [tacticsStateSelector, allMapsSelector],\r\n    (tacticsState, allMaps) => {\r\n        return {\r\n            mapFetchStatus: tacticsState.mapFetchStatus,\r\n            mapFetchError: tacticsState.mapFetchError,\r\n            maps: allMaps\r\n        }\r\n    }\r\n)\r\n\r\nexport const selectedTacticSelector = createSelector(\r\n    [selectedTacticIdSelector, tacticsStateSelector],\r\n    (selectedTacticId, tacticsState) => {\r\n        return tacticsState.tactics.find(tactic => tactic.id === selectedTacticId) ?? createDefaultTactic()\r\n    }\r\n)\r\nexport const selectedTacticMetadataSelector = createSelector(\r\n    [selectedTacticSelector],\r\n    (selectedTactic) => {\r\n        return selectedTactic ? selectedTactic.metadata : createDefaultTactic().metadata\r\n    }\r\n)\r\nexport const tacticRolesSelector = createSelector(\r\n    [selectedTacticSelector],\r\n    (selectedTactic) => {\r\n        return selectedTactic ? selectedTactic.playerTacticRoles : [] as PlayerTacticRole[]\r\n    }\r\n)\r\n\r\nexport const activeToolSelector = createSelector([selectedTacticSelector], (selectedTactic) => { return selectedTactic.activeTool })\r\nexport const positionListSelector = createSelector([selectedTacticSelector], (selectedTactic) => { return selectedTactic.positionList })\r\n\r\nexport default tacticsSlice.reducer;\r\n\r\n// export type TacticsStateReducerReturnType = ReturnType<typeof tacticsSlice.reducer>;\r\n// export const selectTactics = (state: TacticsStateReducerReturnType) => state.tactics;\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\Tactics.tsx",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\TacticCard.tsx",["397","398"],"import React, { useCallback } from 'react';\r\n\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { red } from \"@material-ui/core/colors\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { Button } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Tactic } from '../../../store/types/interfaces/TacticMetadata.interface';\r\nimport { removeTactic, changeSelectedTactic } from '../store/tacticsSlice';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      maxWidth: 345,\r\n    },\r\n    media: {\r\n      height: 0,\r\n      paddingTop: \"56.25%\" // 16:9\r\n    },\r\n    avatar: {\r\n      backgroundColor: red[500]\r\n    }\r\n  })\r\n);\r\n\r\nconst TacticCard = (tactic: Tactic) => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const onRemoveClick = useCallback(() => {\r\n    dispatch(removeTactic(tactic))\r\n  }, [tactic]);\r\n\r\n  const onEditClick = useCallback(() => {\r\n    dispatch(changeSelectedTactic({ id: tactic.id }))\r\n    history.push(`/tactics/${tactic.id}`)\r\n  }, [tactic]);\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={<Avatar aria-label=\"creator\" className={classes.avatar} />}\r\n        title={tactic.metadata.tacticReference}\r\n        subheader=\"\"\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        src=\"\"\r\n        image=\"/static/images/cards/paella.jpg\"\r\n        title=\"Paella dish\"\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {tactic.metadata.baseNumber}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {tactic.metadata.mapName}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {tactic.metadata.tacticType}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions disableSpacing>\r\n        <Button variant=\"outlined\" color=\"secondary\" onClick={onEditClick}>\r\n          <EditIcon />\r\n        </Button>\r\n        <Button variant=\"outlined\" color=\"secondary\" onClick={onRemoveClick}>\r\n          <RemoveIcon />\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\nexport default TacticCard;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\store\\decorators\\PropertyChanged.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\InteractiveMap.tsx",["399","400","401","402","403","404","405","406","407","408","409","410","411"],"import { makeStyles, Theme, createStyles, MenuItem } from '@material-ui/core';\r\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n    createMapImageUrl,\r\n    allMapsSelector,\r\n} from '../../store/tacticsSlice';\r\nimport MapTools, { MapTool } from './MapTools';\r\nimport { WebSocketContext } from '../../../../WebSocketContext';\r\nimport { addMarker, cursorPositionSelector, MapMarker, markersSelector, Point, selectedToolSelector } from '../../../../slices/mapInteractionSlice';\r\nimport useCanvas from './useCanvas';\r\nimport { WoTMap } from '../../../../store/types/interfaces/WoTMap.interface';\r\nimport { fetchMapsThunk, mapsApiStateSelector, selectedInteractiveMapSelector } from '../../../../slices/mapsApiSlice';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        mapContainer: {\r\n            display: \"flex\",\r\n            cursor: (props: any) => props[\"isCursorDisplayed\"] ? \"inherit\" : \"none\"\r\n        },\r\n        map: {\r\n            display: \"block\",\r\n            width: 400,\r\n            height: 400,\r\n            margin: \"0 0\",\r\n            backgroundSize: 400,\r\n            backgroundImage: (props: any) => props[\"image\"] ?? \"\",\r\n            backgroundRepeat: (props: any) => props[\"repeat\"] ?? \"\",\r\n        }\r\n    }),\r\n);\r\n\r\n\r\nconst InteractiveMap = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { mapFetchError, mapFetchStatus, maps } = useSelector(mapsApiStateSelector)\r\n    const cursorPosition = useSelector(cursorPositionSelector);\r\n    const markers = useSelector(markersSelector);\r\n    const webSocketContext = useContext(WebSocketContext);\r\n    const selectedMap = useSelector(selectedInteractiveMapSelector);\r\n    const activeTool = useSelector(selectedToolSelector);\r\n\r\n    const SIZE = 400;\r\n    const MARGIN_PROCENT = 10; // TODO - how you keep this with container's 10%? it should remain as is, but connect the values somehow\r\n\r\n    const [isCursorDisplayed, setIsCursorDisplayed] = useState(true)\r\n    const [mapImageUrl, setMapImageUrl] = useState(\"\");\r\n    const [isMovingEnabled, setIsMovingEnabled] = useState(false);\r\n\r\n    const classes = useStyles({\r\n        image: `url('${mapImageUrl}')`,\r\n        repeat: \"no-repeat\",\r\n        isCursorDisplayed\r\n    })\r\n\r\n    const getOffsetAndScaleFactor = () => {\r\n        const bodyWidth = document.body.clientWidth\r\n        const bodyHeight = document.body.clientHeight\r\n        const OFFSET_TOP = (bodyHeight / MARGIN_PROCENT)\r\n        const OFFSET_LEFT = (bodyWidth / MARGIN_PROCENT)//  + (CONTAINER_WIDTH - SIZE) / 2  ----- this is for center alignment on X-axis\r\n        const SCALE_FACTOR = bodyWidth / bodyHeight\r\n\r\n        return {\r\n            OFFSET_TOP,\r\n            OFFSET_LEFT,\r\n            SCALE_FACTOR\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (mapFetchStatus === 'idle') {\r\n            dispatch(fetchMapsThunk())\r\n        }\r\n    }, [dispatch, mapFetchStatus])\r\n\r\n    useEffect(() => {\r\n        if (selectedMap != null) {\r\n            const newMapImg = createMapImageUrl(selectedMap.arena_id);\r\n            setMapImageUrl(newMapImg);\r\n        }\r\n    }, [selectedMap, mapImageUrl])\r\n\r\n    const onMouseLeave = useCallback((event) => {\r\n        setIsCursorDisplayed(true)\r\n    }, [isCursorDisplayed])\r\n\r\n    const onMouseEnter = useCallback((event) => {\r\n        if (isMovingEnabled) {\r\n            setIsCursorDisplayed(false)\r\n        }\r\n    }, [isCursorDisplayed, isMovingEnabled])\r\n\r\n    useEffect(() => {\r\n        if (!activeTool) {\r\n            return\r\n        }\r\n\r\n        if (activeTool.cursorTool) {\r\n            setIsMovingEnabled(true)\r\n        }\r\n\r\n        if (activeTool.tankTool) {\r\n            setIsMovingEnabled(false)\r\n        }\r\n    }, [activeTool])\r\n\r\n    const onMouseMove = useCallback((event) => {\r\n        if (!isMovingEnabled) {\r\n            return\r\n        }\r\n\r\n        const { OFFSET_TOP, OFFSET_LEFT, SCALE_FACTOR } = getOffsetAndScaleFactor()\r\n        const x = event.clientX - OFFSET_LEFT;\r\n        const y = event.clientY - SCALE_FACTOR * OFFSET_TOP;\r\n        const coord = { x, y } as Point;\r\n\r\n        console.log(`emitted x-${x}, y-${y}`)\r\n        webSocketContext.socket.emit(\"cursorPositionChanged\", JSON.stringify(coord))\r\n    }, [dispatch, isMovingEnabled]);\r\n\r\n    const onMouseDown = useCallback((event) => {\r\n        if (!activeTool) {\r\n            return;\r\n        }\r\n\r\n        if (activeTool.cursorTool) {\r\n            if (!isMovingEnabled) {\r\n                setIsMovingEnabled(true);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (activeTool.tankTool) {\r\n            const { OFFSET_TOP, OFFSET_LEFT, SCALE_FACTOR } = getOffsetAndScaleFactor()\r\n            const x = event.clientX - OFFSET_LEFT;\r\n            const y = event.clientY - SCALE_FACTOR * OFFSET_TOP;\r\n            const marker = { x, y, markerType: activeTool.tankTool } as MapMarker;\r\n            // dispatch(addMarker(marker))\r\n            webSocketContext.socket.emit(\"markerAdded\", JSON.stringify(marker))\r\n        }\r\n\r\n    }, [dispatch, isMovingEnabled, setIsMovingEnabled, activeTool]);\r\n\r\n    const onMouseUp = useCallback((event) => {\r\n        setIsMovingEnabled(false);\r\n    }, [setIsMovingEnabled]);\r\n\r\n    const canvasRef = useCanvas({ cursorPosition, markers, onMouseMove, onMouseDown, onMouseUp, activeTool })\r\n\r\n    return <div className={classes.mapContainer}>\r\n        <canvas\r\n            className={classes.map}\r\n            ref={canvasRef}\r\n            onMouseLeave={onMouseLeave}\r\n            onMouseEnter={onMouseEnter}\r\n            onMouseUp={onMouseUp}\r\n            onMouseDown={onMouseDown}\r\n            onMouseMove={onMouseMove}\r\n        ></canvas>\r\n        {/* <MapCanvas\r\n            positionList={positionList}\r\n            cursorPosition={cursorPosition}\r\n            draw={() => { }}\r\n            styles={classes.map}\r\n            preDraw={() => { }}\r\n            postDraw={() => { }}\r\n            onMouseDown={onMouseDown}\r\n            onMouseMove={onMouseMove}\r\n            activeTool={activeTool}\r\n            onMouseUp={onMouseUp}\r\n        /> */}\r\n        <MapTools />\r\n    </div>\r\n}\r\n\r\nexport default InteractiveMap;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\MapTools.tsx",["412","413","414","415","416","417","418"],"import {\r\n    makeStyles,\r\n    MenuItem,\r\n    Theme,\r\n    createStyles,\r\n    Button,\r\n    FormControl,\r\n    FormGroup,\r\n    InputLabel,\r\n    Select\r\n} from '@material-ui/core';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport NearMeIcon from '@material-ui/icons/NearMe';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { MarkerType, setActiveTool } from '../../../../slices/mapInteractionSlice';\r\nimport { WoTMap } from '../../../../store/types/interfaces/WoTMap.interface';\r\nimport { mapsApiStateSelector } from '../../../../slices/mapsApiSlice';\r\nimport { WebSocketContext } from '../../../../WebSocketContext';\r\n\r\nexport interface MapTool {\r\n    tankTool?: MarkerType,\r\n    cursorTool?: boolean\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        tools: {\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"flex-start\"\r\n        },\r\n        tool: {\r\n            color: (props: any) => props[\"cursorActive\"] ? theme.palette.secondary.dark : theme.palette.primary.dark,\r\n        },\r\n        iconMedium: {\r\n            height: 60,\r\n            width: 60,\r\n            color: (props: any) => props[\"activeTool\"] === \"mediumTank\" ? theme.palette.secondary.dark : theme.palette.primary.dark,\r\n        },\r\n        iconHeavy: {\r\n            height: 60,\r\n            width: 60,\r\n            color: (props: any) => props[\"activeTool\"] === \"heavyTank\" ? theme.palette.secondary.dark : theme.palette.primary.dark,\r\n        },\r\n        buttonHeavy: {\r\n            disabled: (props: any) => props[\"activeTool\"] === \"heavyTank\" ? \"true\" : \"false\",\r\n            color: (props: any) => props[\"activeTool\"] === \"heavyTank\" ? theme.palette.secondary.dark : theme.palette.primary.dark,\r\n        },\r\n        buttonMedium: {\r\n            disabled: (props: any) => props[\"activeTool\"] === \"mediumTank\" ? \"true\" : \"false\",\r\n            color: (props: any) => props[\"activeTool\"] === \"heavyTank\" ? theme.palette.secondary.dark : theme.palette.primary.dark,\r\n        }\r\n    }),\r\n);\r\n\r\nconst MapTools = () => {\r\n    const webSocketContext = useContext(WebSocketContext)\r\n    const { maps, mapFetchError, mapFetchStatus, selectedMap } = useSelector(mapsApiStateSelector)\r\n    const classes = useStyles({ activeTool: \"\", cursorActive: true });\r\n\r\n    const createMapDropdownOptions = () => {\r\n        if (mapFetchStatus === \"failed\") {\r\n            console.error({ mapFetchError })\r\n            return <p>Could not connect server to get info</p>\r\n        }\r\n\r\n        if (mapFetchStatus === \"idle\") {\r\n            return <MenuItem></MenuItem>;;\r\n        }\r\n\r\n        if (mapFetchStatus === \"loading\") {\r\n            return <MenuItem></MenuItem>;\r\n        }\r\n\r\n        if (mapFetchStatus === \"succeeded\") {\r\n            const mapOptions = maps.map((map: WoTMap) => {\r\n                return <MenuItem key={map.arena_id} value={map.name_i18n}>\r\n                    {map.name_i18n}\r\n                </MenuItem>\r\n            })\r\n\r\n            mapOptions.push(<MenuItem key={\"NONE-map\"} value={\"NONE\"}>\r\n                {\"NONE\"}\r\n            </MenuItem>)\r\n            return mapOptions\r\n        }\r\n    }\r\n\r\n    const onClickHeavyTankTool = useCallback((event) => {\r\n        webSocketContext.socket.emit(\"selectedToolChanged\", JSON.stringify({tankTool: MarkerType.HEAVY_TANK } as MapTool))\r\n    }, [])\r\n\r\n    const onClickMediumTankTool = useCallback((event) => {\r\n        webSocketContext.socket.emit(\"selectedToolChanged\", JSON.stringify({tankTool: MarkerType.MEDIUM_TANK } as MapTool))\r\n    }, [])\r\n\r\n    const onClickCursorTool = useCallback((event) => {\r\n        webSocketContext.socket.emit(\"selectedToolChanged\", JSON.stringify({cursorTool: true } as MapTool))\r\n    }, [])\r\n\r\n    const onClearMap = useCallback((event) => {\r\n        webSocketContext.socket.emit(\"clearedMarkers\")\r\n    }, [webSocketContext])\r\n\r\n    const onClickSavePositions = useCallback((event) => {\r\n        // dispatch(saveTacticPositions(positionList));\r\n    }, []);\r\n\r\n    const onChangeMap = useCallback((event: React.ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        webSocketContext.socket.emit(\"mapChanged\", JSON.stringify(event.target.value))\r\n    }, [webSocketContext])\r\n\r\n\r\n\r\n    const renderFormGroup = () => {\r\n        return <FormGroup>\r\n            <FormControl>\r\n                <InputLabel id=\"map-form-control\">Map</InputLabel>\r\n                <Select\r\n                    labelId=\"map-form-control\"\r\n                    id=\"map-select\"\r\n                    value={selectedMap.name_i18n}\r\n                    onChange={onChangeMap}\r\n                >\r\n                    {createMapDropdownOptions()}\r\n                </Select>\r\n            </FormControl>\r\n        </FormGroup>\r\n    }\r\n\r\n    return <div className={classes.tools}>\r\n        {/* TODO - create actions enum and create html dynamically*/}\r\n        {renderFormGroup()}\r\n        <Button className={classes.tool} variant=\"outlined\" onClick={onClickCursorTool}>\r\n            <NearMeIcon />\r\n        </Button>\r\n        <Button className={classes.tool} variant=\"outlined\" onClick={onClickSavePositions}>\r\n            Save\r\n            </Button>\r\n        <Button className={classes.tool} variant=\"outlined\" onClick={onClearMap}>\r\n            Clear\r\n        </Button>\r\n        <Button className={classes.buttonHeavy} variant=\"outlined\" onClick={onClickHeavyTankTool}>\r\n            <img className={classes.iconHeavy} src=\"https://na-wotp.wgcdn.co/dcont/fb/image/heavy_tank_icon_s.png\" />\r\n        </Button>\r\n        <Button className={classes.buttonMedium} variant=\"outlined\" onClick={onClickMediumTankTool}>\r\n            <img className={classes.iconMedium} src=\"https://na-wotp.wgcdn.co/dcont/fb/image/medium_tank_icon_s.png\" />\r\n        </Button>\r\n    </div>\r\n}\r\n\r\nexport default MapTools;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\WebSocketContext.tsx",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\mapInteractionSlice.ts",["419"],"import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '.';\r\nimport { MapTool } from '../screens/tactics/components/interactive-map/MapTools';\r\n\r\nconst MAP_STATE_STORAGE_KEY = 'mapState'\r\n\r\nexport enum MarkerType {\r\n    CURSOR = \"CURSOR\",\r\n    MEDIUM_TANK = \"MEDIUM_TANK\",\r\n    HEAVY_TANK = \"HEAVY_TANK\",\r\n    LIGHT_TANK = \"LIGHT_TANK\",\r\n    SPG = \"SPG\",\r\n    TD = \"TD\"\r\n}\r\n\r\nexport type Point = {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nexport type MapMarker = Point & {\r\n    markerType: MarkerType\r\n}\r\n\r\ninterface MapState {\r\n    room: number,\r\n    markers: MapMarker[],\r\n    cursorPosition: Point,\r\n    usersInRoom: any[], // User[]\r\n    selectedTool: MapTool\r\n}\r\n\r\nconst loadState = () => {\r\n    const storage = localStorage.getItem(MAP_STATE_STORAGE_KEY)\r\n    if (storage !== null) {\r\n        return JSON.parse(storage) as MapState;\r\n    }\r\n}\r\n\r\nexport const saveMapState = (state: MapState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(MAP_STATE_STORAGE_KEY, serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\nconst createDefaultMapState = () => {\r\n    return {\r\n        room: 0,\r\n        markers: [],\r\n        usersInRoom: [],\r\n        cursorPosition: { x: 0, y: 0 },\r\n        selectedTool: {\r\n            cursorTool: true\r\n        } as MapTool,\r\n    } as unknown as MapState\r\n}\r\n\r\nconst initialState = loadState() || createDefaultMapState()\r\n\r\nexport const mapInteractionSlice = createSlice({\r\n    name: 'map',\r\n    initialState,\r\n    reducers: {\r\n        savePositionList: (state, action: PayloadAction<any>) => {\r\n            const positionList = action.payload;\r\n            //  roomSlice.actions.sendMessage({\r\n            //     eventType: NEW_CHAT_MESSAGE_EVENT,\r\n            //     roomId: 1,\r\n            //     message: positionList\r\n            // })\r\n            saveMapState(state);\r\n        },\r\n        moveCursor: (state, action: PayloadAction<Point>) => {\r\n            console.log(\"dispatching cursor position:\", action.payload)\r\n            const point = action.payload\r\n            // if (Math.abs(state.cursorPosition.x - point.x) > 10 || Math.abs(state.cursorPosition.y - point.y) > 10) {\r\n                state.cursorPosition = point\r\n            // }\r\n        },\r\n        addMarker: (state, action: PayloadAction<MapMarker>) => {\r\n            console.log(\"adding marker\", action.payload)\r\n            state.markers.push(action.payload)\r\n        },\r\n        clearMarkers: (state) => {\r\n            console.log(\"clearing markers\")\r\n            state.markers = [];\r\n        },\r\n        setActiveTool: (state, action: PayloadAction<MapTool>) => {\r\n            const tool = action.payload\r\n            state.selectedTool = tool;\r\n        },\r\n    },\r\n    extraReducers: {}\r\n});\r\n\r\nexport const mapInteractionStateSelector = (state: RootState) => state.mapInteractionState\r\nexport const cursorPositionSelector = createSelector([mapInteractionStateSelector], (state) => state.cursorPosition)\r\nexport const selectedToolSelector = createSelector([mapInteractionStateSelector], (state) => state.selectedTool)\r\nexport const markersSelector = createSelector([mapInteractionStateSelector], (state) => state.markers)\r\n\r\n\r\nexport const { savePositionList, setActiveTool, moveCursor, addMarker, clearMarkers } = mapInteractionSlice.actions;\r\nexport default mapInteractionSlice.reducer;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\MapCanvas.tsx",["420","421","422","423","424","425"],"import React from 'react'\r\nimport { TankType } from '../../../vehicles/types'\r\nimport { Point } from './InteractiveMap'\r\nimport { MapTool } from './MapTools'\r\nimport useCanvas from './useCanvas'\r\n\r\nexport interface MapCanvasProps {\r\n    draw: Function,\r\n    preDraw: Function,\r\n    postDraw: Function,\r\n    onMouseDown: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void,\r\n    onMouseUp: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void,\r\n    onMouseMove: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void,\r\n    positionList: Point[],\r\n    cursorPosition: Point,\r\n    activeTool: MapTool,\r\n    styles: string\r\n}\r\n\r\nconst _predraw = (context: CanvasRenderingContext2D) => { }\r\nconst _postdraw = () => { }\r\n\r\nconst MapCanvas = (props: MapCanvasProps) => {\r\n    const { draw, preDraw = _predraw, postDraw = _postdraw, styles, onMouseDown, onMouseMove, onMouseUp, positionList, cursorPosition } = props\r\n    const canvasRef = useCanvas(props)\r\n\r\n    return <canvas\r\n        className={styles}\r\n        ref={canvasRef}\r\n        onMouseUp={onMouseUp}\r\n        onMouseDown={onMouseDown}\r\n        onMouseMove={onMouseMove}\r\n    ></canvas>\r\n}\r\n\r\nexport default MapCanvas",["426","427"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\useCanvas.ts",["428","429","430","431","432"],"import { useRef, useEffect } from 'react'\r\nimport { MapMarker, MarkerType, Point } from '../../../../slices/mapInteractionSlice'\r\nimport { MapTool } from './MapTools'\r\n\r\nexport interface UseCanvasProps {\r\n    draw?: Function,\r\n    preDraw?: Function,\r\n    postDraw?: Function,\r\n    onMouseDown: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void,\r\n    onMouseUp: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void,\r\n    onMouseMove: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void,\r\n    markers?: MapMarker[],\r\n    cursorPosition?: Point,\r\n    activeTool: MapTool,\r\n    styles?: string\r\n}\r\n\r\n\r\nconst useCanvas = (props: UseCanvasProps) => {\r\n    console.log(\"canvas init with props: \", props)\r\n    const MARGIN_PROCENT = 10;\r\n    const SIZE = 400;\r\n    const canvasElement = document.createElement(\"canvas\")\r\n    canvasElement.width = SIZE;\r\n    canvasElement.height = SIZE;\r\n    const canvasRef = useRef<HTMLCanvasElement>(canvasElement)\r\n    const { markers, cursorPosition, activeTool } = props\r\n\r\n    let currentRadius = 5;\r\n    const endRadius = 20;\r\n\r\n    const drawMarkers = (context: CanvasRenderingContext2D) => {\r\n        // const canvas = canvasRef.current as HTMLCanvasElement;\r\n        // canvas.height = canvas.width = SIZE;\r\n        console.log(\"drawing markers \", { markers })\r\n        if (context) {\r\n            // if (markers?.length === 0) {\r\n            //     context.clearRect(0, 0, SIZE, SIZE);\r\n            //     return;\r\n            // }\r\n\r\n            markers?.forEach((marker: MapMarker) => {\r\n                const img = document.createElement(\"img\") as HTMLImageElement;\r\n                img.width = 5;\r\n                img.height = 5;\r\n\r\n                if (marker.markerType === MarkerType.MEDIUM_TANK) {\r\n                    img.src = 'https://na-wotp.wgcdn.co/dcont/fb/image/medium_tank_icon_s.png';\r\n                }\r\n                if (marker.markerType === MarkerType.HEAVY_TANK) {\r\n                    img.src = 'https://na-wotp.wgcdn.co/dcont/fb/image/heavy_tank_icon_s.png';\r\n                    img.style.zIndex = \"0\";\r\n                }\r\n                context.beginPath();\r\n                context.fillStyle = \"#FF0000\";\r\n                context.drawImage(img, marker.x-12, marker.y-10, 20, 20);\r\n                // context.fillRect(marker.x, marker.y, 5, 5);\r\n                context.fill();\r\n                context.stroke();\r\n            })\r\n        }\r\n    }\r\n\r\n    const drawPoint = (context: CanvasRenderingContext2D) => {\r\n        if (context) {\r\n            context.clearRect(0, 0, SIZE, SIZE);\r\n\r\n            if (cursorPosition && cursorPosition.x && cursorPosition.y) {\r\n                context.beginPath();\r\n                context.fillStyle = \"#FF0000\";\r\n                context.arc(cursorPosition.x, cursorPosition.y, 10, 0 * Math.PI, 2 * Math.PI)\r\n                context.fill();\r\n                context.stroke()\r\n\r\n                // animate(context, cursorPosition, currentRadius)\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    // const animate = (context: CanvasRenderingContext2D, cursorPosition: Point, radius: number) => {\r\n    //     currentRadius += 5;\r\n\r\n    //     if (currentRadius < endRadius) {\r\n    //         context.clearRect(cursorPosition.x - currentRadius, cursorPosition.y - currentRadius, cursorPosition.x + currentRadius, cursorPosition.y + currentRadius)\r\n    //         context.arc(cursorPosition.x, cursorPosition.y, currentRadius, 0 * Math.PI, 2 * Math.PI)\r\n    //         context.stroke();\r\n    //         requestAnimationFrame(() => {\r\n    //             animate(context, cursorPosition, currentRadius)\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current\r\n        canvas.width = 400;\r\n        canvas.height = 400;\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(canvasRef.current.width, canvasRef.current.height)\r\n        const context = canvasRef.current.getContext('2d')\r\n\r\n        const render = (context: CanvasRenderingContext2D) => {\r\n            context.clearRect(0, 0, SIZE, SIZE)\r\n\r\n            drawMarkers(context)\r\n\r\n            if (activeTool.cursorTool) {\r\n                drawPoint(context)\r\n            }\r\n        }\r\n\r\n        if (context) {\r\n            render(context)\r\n        }\r\n    }, [drawPoint, drawMarkers, canvasRef, markers, cursorPosition, activeTool])\r\n\r\n\r\n    return canvasRef\r\n}\r\n\r\nexport default useCanvas\r\n\r\n// const resizeCanvasToDisplaySize = (canvas: HTMLCanvasElement) => {\r\n//     const { width, height } = canvas.getBoundingClientRect()\r\n\r\n//     if (canvas.width !== width || canvas.height !== height) {\r\n//         const { devicePixelRatio: ratio = 1 } = window\r\n//         const context = canvas.getContext('2d')\r\n//         canvas.width = width\r\n//         canvas.height = height\r\n//         if (context) {\r\n//             context.scale(ratio, ratio)\r\n//         }\r\n//         return true\r\n//         // here you can return some usefull information like delta width and delta height instead of just true\r\n//         // this information can be used in the next redraw...\r\n//     }\r\n\r\n//     return false\r\n// }","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\vehicles\\types.ts",[],["433","434"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\useLiveMapInteraction.ts",["435","436","437","438"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\mapsApiSlice.ts",["439","440","441","442","443"],"import { createAsyncThunk, createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { FetchStatus, RootState } from \".\";\r\nimport APPLICATION_ID from \"../api/config\";\r\nimport { WoTMap } from \"../store/types/interfaces/WoTMap.interface\";\r\nimport { buildParamStr } from \"../utils/url/urlUtils\";\r\n\r\nconst MAP_API = 'https://api.worldoftanks.ru/wot/encyclopedia/arenas/'\r\nconst MAP_IMAGES_API = \"https://stratsketch.com/maps/wot/thumb/\"\r\n\r\nexport const MAPS_API_STATE_STORAGE_KEY = 'mapsApiState';\r\n\r\ninterface MapsApiState {\r\n    mapFetchError: any,\r\n    mapFetchStatus: FetchStatus,\r\n    maps: WoTMap[],\r\n    selectedMap: WoTMap\r\n}\r\n\r\nconst loadState = () => {\r\n    const storage = localStorage.getItem(MAPS_API_STATE_STORAGE_KEY)\r\n    if (storage !== null) {\r\n        return JSON.parse(storage) as MapsApiState;\r\n    }\r\n}\r\n\r\nconst saveState = (state: MapsApiState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem(MAPS_API_STATE_STORAGE_KEY, serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n\r\nconst createDefaultMapsApiState = () => {\r\n    return {\r\n        mapFetchStatus: 'idle',\r\n        mapFetchError: null,\r\n        maps: [{ arena_id: \"NONE\", name_i18n: \"NONE\" }] as WoTMap[],\r\n        selectedMap: { arena_id: \"NONE\", name_i18n: \"NONE\" } as WoTMap\r\n    } as MapsApiState;\r\n}\r\nconst initialState: MapsApiState = loadState() || createDefaultMapsApiState();\r\n\r\nconst buildMapsQueryUrl: (url: string, params: any) => string = (url, params: any) => {\r\n    const queryParamStr = buildParamStr(params);\r\n    return `${url}?application_id=${APPLICATION_ID}&${queryParamStr}`;\r\n}\r\nconst url = buildMapsQueryUrl(MAP_API, { language: \"en\" })\r\n\r\nexport const fetchMapsThunk = createAsyncThunk('maps/fetchMaps', async () => {\r\n    const response: Response = await fetch(url);\r\n    const json = await response.json();\r\n    return json.data;\r\n})\r\n\r\nexport const mapsApiSlice = createSlice({\r\n    name: 'tactics',\r\n    initialState,\r\n    reducers: {\r\n        changeMap: (state, action: PayloadAction<string>) => {\r\n            const mapId = action.payload\r\n            const mapIndex = state.maps.findIndex((map: WoTMap) => {\r\n                return map.name_i18n === mapId\r\n            })\r\n\r\n            if (mapIndex !== -1) {\r\n                state.selectedMap = { ...state.maps[mapIndex] }\r\n            }\r\n        },\r\n    },\r\n    extraReducers: {\r\n        ['maps/fetchMaps/pending']: (state: MapsApiState, action) => {\r\n            state.mapFetchStatus = 'loading'\r\n        },\r\n        ['maps/fetchMaps/rejected']: (state: MapsApiState, action) => {\r\n            state.mapFetchStatus = 'failed'\r\n            state.mapFetchError = action.error.message\r\n        },\r\n        ['maps/fetchMaps/fulfilled']: (state: MapsApiState, action) => {\r\n            state.mapFetchStatus = 'succeeded'\r\n            const payload = action.payload;\r\n            Object.keys(payload).forEach(key => state.maps.push(payload[key]));\r\n        }\r\n    }\r\n});\r\n\r\nexport default mapsApiSlice.reducer;\r\n\r\nexport const { changeMap } = mapsApiSlice.actions\r\n\r\nexport const mapsApiStateSelector = (state: RootState) => state.mapsApiState;\r\nexport const selectedInteractiveMapSelector = createSelector([mapsApiStateSelector], (state) => state.selectedMap)\r\n","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\tactics\\components\\interactive-map\\useAnimationFrame.ts",["444"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\provinces\\Provinces.tsx",["445","446","447","448","449","450","451","452","453","454","455"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\slices\\globalMapSlice.ts",["456","457","458"],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\provinces\\ProvinceComponent.tsx",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\utils\\generic-table\\genericTableUtils.ts",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\components\\GenericTableToolbar.tsx",[],"F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\components\\GenericTableHead.tsx",["459","460"],"import { TableHead, TableRow, TableCell, Checkbox, TableSortLabel } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport React, { ReactNode, useCallback } from \"react\"\r\nimport { Order } from \"../utils/generic-table/genericTableUtils\";\r\n\r\ninterface GenericTableHeadProps<T> {\r\n    classes: any; //ReturnType<typeof useStyles>;\r\n    numSelected: number;\r\n    onRequestSort: (event: React.MouseEvent<unknown>, property: keyof T) => void;\r\n    onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    order: Order;\r\n    orderBy: string;\r\n    rowCount: number;\r\n    headCells: HeadCell<T>[]\r\n}\r\n\r\nexport interface HeadCell<T> {\r\n    disablePadding: boolean;\r\n    id: keyof T;\r\n    label: string;\r\n    numeric: boolean;\r\n}\r\n\r\n\r\nconst GenericTableHead = function <T>(props: GenericTableHeadProps<T> & { children?: ReactNode }) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property: keyof T) => (event: React.MouseEvent<unknown>) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    const buildCheckboxCell = () => {\r\n        return <TableCell padding=\"checkbox\">\r\n            <Checkbox\r\n                indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                checked={rowCount > 0 && numSelected === rowCount}\r\n                onChange={onSelectAllClick}\r\n                inputProps={{ 'aria-label': 'select all desserts' }}\r\n            />\r\n        </TableCell>\r\n    }\r\n\r\n    const buildCells = () => {\r\n        return props.headCells.map((headCell) => (\r\n            <TableCell\r\n                key={headCell.label}\r\n                align={headCell.numeric ? 'right' : 'left'}\r\n                padding={headCell.disablePadding ? 'none' : 'default'}\r\n                sortDirection={orderBy === headCell.id ? order : false}\r\n            >\r\n                <TableSortLabel\r\n                    active={orderBy === headCell.id}\r\n                    direction={orderBy === headCell.id ? order : 'asc'}\r\n                    onClick={createSortHandler(headCell.id)}\r\n                >\r\n                    {headCell.label}\r\n                    {orderBy === headCell.id ? (\r\n                        <span className={classes.visuallyHidden}>\r\n                            {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                        </span>\r\n                    ) : null}\r\n                </TableSortLabel>\r\n            </TableCell>\r\n        ))\r\n    }\r\n\r\n    const buildTableHead = useCallback(() => {\r\n        return <TableHead>\r\n            <TableRow>\r\n                {buildCheckboxCell()}\r\n                {buildCells()}\r\n            </TableRow>\r\n        </TableHead>\r\n    }, [props])\r\n\r\n\r\n    return buildTableHead();\r\n}\r\n\r\n\r\nexport default GenericTableHead;","F:\\proiecte\\wot-data\\wot-data-react\\wot-data-react\\src\\screens\\provinces\\CompetitorsTooltip.tsx",["461","462"],{"ruleId":"463","replacedBy":"464"},{"ruleId":"465","replacedBy":"466"},{"ruleId":"467","severity":1,"message":"468","line":8,"column":10,"nodeType":"469","messageId":"470","endLine":8,"endColumn":21},{"ruleId":"467","severity":1,"message":"471","line":8,"column":23,"nodeType":"469","messageId":"470","endLine":8,"endColumn":36},{"ruleId":"467","severity":1,"message":"472","line":9,"column":8,"nodeType":"469","messageId":"470","endLine":9,"endColumn":13},{"ruleId":"463","replacedBy":"473"},{"ruleId":"465","replacedBy":"474"},{"ruleId":"463","replacedBy":"475"},{"ruleId":"465","replacedBy":"476"},{"ruleId":"463","replacedBy":"477"},{"ruleId":"465","replacedBy":"478"},{"ruleId":"467","severity":1,"message":"479","line":15,"column":11,"nodeType":"469","messageId":"470","endLine":15,"endColumn":31},{"ruleId":"463","replacedBy":"480"},{"ruleId":"465","replacedBy":"481"},{"ruleId":"463","replacedBy":"482"},{"ruleId":"465","replacedBy":"483"},{"ruleId":"484","severity":1,"message":"485","line":176,"column":33,"nodeType":"486","messageId":"487","endLine":176,"endColumn":66},{"ruleId":"484","severity":1,"message":"485","line":178,"column":31,"nodeType":"486","messageId":"487","endLine":178,"endColumn":64},{"ruleId":"488","severity":1,"message":"489","line":107,"column":9,"nodeType":"490","messageId":"491","endLine":113,"endColumn":10,"fix":"492"},{"ruleId":"488","severity":1,"message":"493","line":114,"column":9,"nodeType":"490","messageId":"491","endLine":117,"endColumn":10,"fix":"494"},{"ruleId":"488","severity":1,"message":"495","line":118,"column":9,"nodeType":"490","messageId":"491","endLine":120,"endColumn":10,"fix":"496"},{"ruleId":"488","severity":1,"message":"497","line":121,"column":9,"nodeType":"490","messageId":"491","endLine":127,"endColumn":10,"fix":"498"},{"ruleId":"488","severity":1,"message":"499","line":128,"column":9,"nodeType":"490","messageId":"491","endLine":133,"endColumn":10,"fix":"500"},{"ruleId":"488","severity":1,"message":"501","line":134,"column":9,"nodeType":"490","messageId":"491","endLine":141,"endColumn":10,"fix":"502"},{"ruleId":"488","severity":1,"message":"503","line":142,"column":9,"nodeType":"490","messageId":"491","endLine":146,"endColumn":10,"fix":"504"},{"ruleId":"488","severity":1,"message":"505","line":147,"column":9,"nodeType":"490","messageId":"491","endLine":150,"endColumn":10,"fix":"506"},{"ruleId":"488","severity":1,"message":"507","line":151,"column":9,"nodeType":"490","messageId":"491","endLine":153,"endColumn":10,"fix":"508"},{"ruleId":"488","severity":1,"message":"509","line":154,"column":9,"nodeType":"490","messageId":"491","endLine":158,"endColumn":10,"fix":"510"},{"ruleId":"488","severity":1,"message":"511","line":159,"column":9,"nodeType":"490","messageId":"491","endLine":162,"endColumn":10,"fix":"512"},{"ruleId":"488","severity":1,"message":"513","line":163,"column":9,"nodeType":"490","messageId":"491","endLine":165,"endColumn":10,"fix":"514"},{"ruleId":"515","severity":1,"message":"516","line":38,"column":1,"nodeType":"517","endLine":38,"endColumn":18},{"ruleId":"467","severity":1,"message":"518","line":11,"column":5,"nodeType":"469","messageId":"470","endLine":11,"endColumn":15},{"ruleId":"467","severity":1,"message":"519","line":14,"column":10,"nodeType":"469","messageId":"470","endLine":14,"endColumn":22},{"ruleId":"467","severity":1,"message":"520","line":14,"column":24,"nodeType":"469","messageId":"470","endLine":14,"endColumn":30},{"ruleId":"467","severity":1,"message":"521","line":20,"column":13,"nodeType":"469","messageId":"470","endLine":20,"endColumn":28},{"ruleId":"467","severity":1,"message":"522","line":4,"column":36,"nodeType":"469","messageId":"470","endLine":4,"endColumn":57},{"ruleId":"467","severity":1,"message":"523","line":5,"column":10,"nodeType":"469","messageId":"470","endLine":5,"endColumn":18},{"ruleId":"515","severity":1,"message":"524","line":9,"column":1,"nodeType":"517","endLine":26,"endColumn":3},{"ruleId":"467","severity":1,"message":"525","line":10,"column":11,"nodeType":"469","messageId":"470","endLine":10,"endColumn":19},{"ruleId":"467","severity":1,"message":"526","line":25,"column":11,"nodeType":"469","messageId":"470","endLine":25,"endColumn":19},{"ruleId":"527","severity":1,"message":"528","line":38,"column":8,"nodeType":"529","endLine":38,"endColumn":23,"suggestions":"530"},{"ruleId":"467","severity":1,"message":"531","line":2,"column":30,"nodeType":"469","messageId":"470","endLine":2,"endColumn":38},{"ruleId":"467","severity":1,"message":"532","line":4,"column":10,"nodeType":"469","messageId":"470","endLine":4,"endColumn":23},{"ruleId":"467","severity":1,"message":"533","line":4,"column":25,"nodeType":"469","messageId":"470","endLine":4,"endColumn":30},{"ruleId":"467","severity":1,"message":"534","line":4,"column":32,"nodeType":"469","messageId":"470","endLine":4,"endColumn":38},{"ruleId":"467","severity":1,"message":"535","line":4,"column":52,"nodeType":"469","messageId":"470","endLine":4,"endColumn":61},{"ruleId":"467","severity":1,"message":"536","line":4,"column":63,"nodeType":"469","messageId":"470","endLine":4,"endColumn":76},{"ruleId":"467","severity":1,"message":"537","line":6,"column":8,"nodeType":"469","messageId":"470","endLine":6,"endColumn":16},{"ruleId":"527","severity":1,"message":"528","line":32,"column":8,"nodeType":"529","endLine":32,"endColumn":17,"suggestions":"538"},{"ruleId":"539","severity":1,"message":"540","line":39,"column":21,"nodeType":"541","messageId":"542","endLine":39,"endColumn":28},{"ruleId":"467","severity":1,"message":"543","line":1,"column":18,"nodeType":"469","messageId":"470","endLine":1,"endColumn":30},{"ruleId":"467","severity":1,"message":"544","line":1,"column":32,"nodeType":"469","messageId":"470","endLine":1,"endColumn":42},{"ruleId":"467","severity":1,"message":"545","line":1,"column":44,"nodeType":"469","messageId":"470","endLine":1,"endColumn":49},{"ruleId":"467","severity":1,"message":"546","line":12,"column":8,"nodeType":"469","messageId":"470","endLine":12,"endColumn":22},{"ruleId":"467","severity":1,"message":"547","line":21,"column":11,"nodeType":"469","messageId":"470","endLine":21,"endColumn":19},{"ruleId":"467","severity":1,"message":"548","line":3,"column":10,"nodeType":"469","messageId":"470","endLine":3,"endColumn":21},{"ruleId":"467","severity":1,"message":"549","line":6,"column":28,"nodeType":"469","messageId":"470","endLine":6,"endColumn":45},{"ruleId":"467","severity":1,"message":"550","line":3,"column":10,"nodeType":"469","messageId":"470","endLine":3,"endColumn":19},{"ruleId":"467","severity":1,"message":"548","line":4,"column":10,"nodeType":"469","messageId":"470","endLine":4,"endColumn":21},{"ruleId":"467","severity":1,"message":"551","line":5,"column":43,"nodeType":"469","messageId":"470","endLine":5,"endColumn":49},{"ruleId":"467","severity":1,"message":"552","line":6,"column":10,"nodeType":"469","messageId":"470","endLine":6,"endColumn":31},{"ruleId":"467","severity":1,"message":"553","line":6,"column":33,"nodeType":"469","messageId":"470","endLine":6,"endColumn":41},{"ruleId":"467","severity":1,"message":"554","line":7,"column":10,"nodeType":"469","messageId":"470","endLine":7,"endColumn":20},{"ruleId":"467","severity":1,"message":"555","line":21,"column":11,"nodeType":"469","messageId":"470","endLine":21,"endColumn":25},{"ruleId":"467","severity":1,"message":"522","line":15,"column":36,"nodeType":"469","messageId":"470","endLine":15,"endColumn":57},{"ruleId":"527","severity":1,"message":"556","line":58,"column":8,"nodeType":"529","endLine":58,"endColumn":32,"suggestions":"557"},{"ruleId":"527","severity":1,"message":"528","line":46,"column":8,"nodeType":"529","endLine":46,"endColumn":14,"suggestions":"558"},{"ruleId":"527","severity":1,"message":"559","line":51,"column":8,"nodeType":"529","endLine":51,"endColumn":14,"suggestions":"560"},{"ruleId":"467","severity":1,"message":"561","line":13,"column":30,"nodeType":"469","messageId":"470","endLine":13,"endColumn":40},{"ruleId":"527","severity":1,"message":"562","line":80,"column":8,"nodeType":"529","endLine":80,"endColumn":34,"suggestions":"563"},{"ruleId":"527","severity":1,"message":"562","line":85,"column":8,"nodeType":"529","endLine":85,"endColumn":34,"suggestions":"564"},{"ruleId":"527","severity":1,"message":"562","line":90,"column":8,"nodeType":"529","endLine":90,"endColumn":34,"suggestions":"565"},{"ruleId":"467","severity":1,"message":"522","line":15,"column":56,"nodeType":"469","messageId":"470","endLine":15,"endColumn":77},{"ruleId":"467","severity":1,"message":"566","line":42,"column":13,"nodeType":"469","messageId":"470","endLine":42,"endColumn":26},{"ruleId":"467","severity":1,"message":"567","line":42,"column":44,"nodeType":"469","messageId":"470","endLine":42,"endColumn":48},{"ruleId":"467","severity":1,"message":"547","line":46,"column":11,"nodeType":"469","messageId":"470","endLine":46,"endColumn":19},{"ruleId":"527","severity":1,"message":"556","line":53,"column":8,"nodeType":"529","endLine":53,"endColumn":24,"suggestions":"568"},{"ruleId":"527","severity":1,"message":"556","line":59,"column":8,"nodeType":"529","endLine":59,"endColumn":32,"suggestions":"569"},{"ruleId":"527","severity":1,"message":"556","line":65,"column":8,"nodeType":"529","endLine":65,"endColumn":26,"suggestions":"570"},{"ruleId":"527","severity":1,"message":"528","line":80,"column":8,"nodeType":"529","endLine":80,"endColumn":20,"suggestions":"571"},{"ruleId":"467","severity":1,"message":"572","line":11,"column":13,"nodeType":"469","messageId":"470","endLine":11,"endColumn":20},{"ruleId":"467","severity":1,"message":"573","line":11,"column":22,"nodeType":"469","messageId":"470","endLine":11,"endColumn":28},{"ruleId":"467","severity":1,"message":"574","line":2,"column":8,"nodeType":"469","messageId":"470","endLine":2,"endColumn":17},{"ruleId":"467","severity":1,"message":"575","line":11,"column":5,"nodeType":"469","messageId":"470","endLine":11,"endColumn":9},{"ruleId":"467","severity":1,"message":"576","line":19,"column":8,"nodeType":"469","messageId":"470","endLine":19,"endColumn":29},{"ruleId":"467","severity":1,"message":"574","line":2,"column":8,"nodeType":"469","messageId":"470","endLine":2,"endColumn":17},{"ruleId":"467","severity":1,"message":"577","line":6,"column":52,"nodeType":"469","messageId":"470","endLine":6,"endColumn":72},{"ruleId":"467","severity":1,"message":"578","line":7,"column":10,"nodeType":"469","messageId":"470","endLine":7,"endColumn":14},{"ruleId":"467","severity":1,"message":"579","line":1,"column":41,"nodeType":"469","messageId":"470","endLine":1,"endColumn":47},{"ruleId":"467","severity":1,"message":"522","line":8,"column":57,"nodeType":"469","messageId":"470","endLine":8,"endColumn":78},{"ruleId":"467","severity":1,"message":"580","line":11,"column":78,"nodeType":"469","messageId":"470","endLine":11,"endColumn":85},{"ruleId":"467","severity":1,"message":"581","line":11,"column":87,"nodeType":"469","messageId":"470","endLine":11,"endColumn":94},{"ruleId":"467","severity":1,"message":"582","line":38,"column":13,"nodeType":"469","messageId":"470","endLine":38,"endColumn":23},{"ruleId":"467","severity":1,"message":"583","line":39,"column":13,"nodeType":"469","messageId":"470","endLine":39,"endColumn":35},{"ruleId":"467","severity":1,"message":"584","line":39,"column":61,"nodeType":"469","messageId":"470","endLine":39,"endColumn":72},{"ruleId":"467","severity":1,"message":"585","line":40,"column":13,"nodeType":"469","messageId":"470","endLine":40,"endColumn":29},{"ruleId":"527","severity":1,"message":"586","line":48,"column":47,"nodeType":"529","endLine":48,"endColumn":71,"suggestions":"587"},{"ruleId":"527","severity":1,"message":"528","line":52,"column":8,"nodeType":"529","endLine":52,"endColumn":32,"suggestions":"588"},{"ruleId":"527","severity":1,"message":"589","line":73,"column":8,"nodeType":"529","endLine":73,"endColumn":75,"suggestions":"590"},{"ruleId":"488","severity":1,"message":"591","line":304,"column":9,"nodeType":"490","messageId":"491","endLine":306,"endColumn":10,"fix":"592"},{"ruleId":"488","severity":1,"message":"593","line":307,"column":9,"nodeType":"490","messageId":"491","endLine":310,"endColumn":10,"fix":"594"},{"ruleId":"488","severity":1,"message":"595","line":311,"column":9,"nodeType":"490","messageId":"491","endLine":315,"endColumn":10,"fix":"596"},{"ruleId":"527","severity":1,"message":"528","line":42,"column":6,"nodeType":"529","endLine":42,"endColumn":14,"suggestions":"597"},{"ruleId":"527","severity":1,"message":"559","line":47,"column":6,"nodeType":"529","endLine":47,"endColumn":14,"suggestions":"598"},{"ruleId":"467","severity":1,"message":"599","line":1,"column":43,"nodeType":"469","messageId":"470","endLine":1,"endColumn":51},{"ruleId":"467","severity":1,"message":"579","line":2,"column":53,"nodeType":"469","messageId":"470","endLine":2,"endColumn":59},{"ruleId":"467","severity":1,"message":"600","line":7,"column":5,"nodeType":"469","messageId":"470","endLine":7,"endColumn":20},{"ruleId":"467","severity":1,"message":"601","line":9,"column":20,"nodeType":"469","messageId":"470","endLine":9,"endColumn":27},{"ruleId":"467","severity":1,"message":"602","line":11,"column":10,"nodeType":"469","messageId":"470","endLine":11,"endColumn":19},{"ruleId":"467","severity":1,"message":"603","line":13,"column":10,"nodeType":"469","messageId":"470","endLine":13,"endColumn":16},{"ruleId":"467","severity":1,"message":"566","line":38,"column":13,"nodeType":"469","messageId":"470","endLine":38,"endColumn":26},{"ruleId":"467","severity":1,"message":"567","line":38,"column":44,"nodeType":"469","messageId":"470","endLine":38,"endColumn":48},{"ruleId":"467","severity":1,"message":"604","line":45,"column":11,"nodeType":"469","messageId":"470","endLine":45,"endColumn":15},{"ruleId":"527","severity":1,"message":"605","line":87,"column":8,"nodeType":"529","endLine":87,"endColumn":27,"suggestions":"606"},{"ruleId":"527","severity":1,"message":"605","line":93,"column":8,"nodeType":"529","endLine":93,"endColumn":44,"suggestions":"607"},{"ruleId":"527","severity":1,"message":"608","line":121,"column":8,"nodeType":"529","endLine":121,"endColumn":35,"suggestions":"609"},{"ruleId":"527","severity":1,"message":"608","line":144,"column":8,"nodeType":"529","endLine":144,"endColumn":67,"suggestions":"610"},{"ruleId":"467","severity":1,"message":"548","line":14,"column":10,"nodeType":"469","messageId":"470","endLine":14,"endColumn":21},{"ruleId":"467","severity":1,"message":"611","line":15,"column":22,"nodeType":"469","messageId":"470","endLine":15,"endColumn":35},{"ruleId":"527","severity":1,"message":"608","line":91,"column":8,"nodeType":"529","endLine":91,"endColumn":10,"suggestions":"612"},{"ruleId":"527","severity":1,"message":"608","line":95,"column":8,"nodeType":"529","endLine":95,"endColumn":10,"suggestions":"613"},{"ruleId":"527","severity":1,"message":"608","line":99,"column":8,"nodeType":"529","endLine":99,"endColumn":10,"suggestions":"614"},{"ruleId":"615","severity":1,"message":"616","line":144,"column":13,"nodeType":"617","endLine":144,"endColumn":118},{"ruleId":"615","severity":1,"message":"616","line":147,"column":13,"nodeType":"617","endLine":147,"endColumn":120},{"ruleId":"467","severity":1,"message":"618","line":68,"column":19,"nodeType":"469","messageId":"470","endLine":68,"endColumn":31},{"ruleId":"467","severity":1,"message":"619","line":2,"column":10,"nodeType":"469","messageId":"470","endLine":2,"endColumn":18},{"ruleId":"467","severity":1,"message":"620","line":24,"column":13,"nodeType":"469","messageId":"470","endLine":24,"endColumn":17},{"ruleId":"467","severity":1,"message":"621","line":24,"column":19,"nodeType":"469","messageId":"470","endLine":24,"endColumn":26},{"ruleId":"467","severity":1,"message":"622","line":24,"column":39,"nodeType":"469","messageId":"470","endLine":24,"endColumn":47},{"ruleId":"467","severity":1,"message":"618","line":24,"column":106,"nodeType":"469","messageId":"470","endLine":24,"endColumn":118},{"ruleId":"467","severity":1,"message":"623","line":24,"column":120,"nodeType":"469","messageId":"470","endLine":24,"endColumn":134},{"ruleId":"463","replacedBy":"624"},{"ruleId":"465","replacedBy":"625"},{"ruleId":"467","severity":1,"message":"626","line":21,"column":11,"nodeType":"469","messageId":"470","endLine":21,"endColumn":25},{"ruleId":"467","severity":1,"message":"627","line":29,"column":9,"nodeType":"469","messageId":"470","endLine":29,"endColumn":22},{"ruleId":"467","severity":1,"message":"628","line":30,"column":11,"nodeType":"469","messageId":"470","endLine":30,"endColumn":20},{"ruleId":"527","severity":1,"message":"629","line":32,"column":11,"nodeType":"630","endLine":62,"endColumn":6},{"ruleId":"527","severity":1,"message":"631","line":64,"column":11,"nodeType":"630","endLine":79,"endColumn":6},{"ruleId":"463","replacedBy":"632"},{"ruleId":"465","replacedBy":"633"},{"ruleId":"467","severity":1,"message":"634","line":1,"column":10,"nodeType":"469","messageId":"470","endLine":1,"endColumn":19},{"ruleId":"467","severity":1,"message":"579","line":1,"column":21,"nodeType":"469","messageId":"470","endLine":1,"endColumn":27},{"ruleId":"467","severity":1,"message":"531","line":1,"column":29,"nodeType":"469","messageId":"470","endLine":1,"endColumn":37},{"ruleId":"515","severity":1,"message":"516","line":65,"column":1,"nodeType":"517","endLine":65,"endColumn":19},{"ruleId":"467","severity":1,"message":"635","line":8,"column":7,"nodeType":"469","messageId":"470","endLine":8,"endColumn":21},{"ruleId":"467","severity":1,"message":"636","line":26,"column":7,"nodeType":"469","messageId":"470","endLine":26,"endColumn":16},{"ruleId":"488","severity":1,"message":"591","line":73,"column":9,"nodeType":"490","messageId":"491","endLine":75,"endColumn":10,"fix":"637"},{"ruleId":"488","severity":1,"message":"593","line":76,"column":9,"nodeType":"490","messageId":"491","endLine":79,"endColumn":10,"fix":"638"},{"ruleId":"488","severity":1,"message":"595","line":80,"column":9,"nodeType":"490","messageId":"491","endLine":84,"endColumn":10,"fix":"639"},{"ruleId":"527","severity":1,"message":"640","line":24,"column":8,"nodeType":"529","endLine":24,"endColumn":10,"suggestions":"641"},{"ruleId":"467","severity":1,"message":"642","line":1,"column":52,"nodeType":"469","messageId":"470","endLine":1,"endColumn":62},{"ruleId":"467","severity":1,"message":"643","line":5,"column":8,"nodeType":"469","messageId":"470","endLine":5,"endColumn":25},{"ruleId":"467","severity":1,"message":"551","line":19,"column":8,"nodeType":"469","messageId":"470","endLine":19,"endColumn":14},{"ruleId":"644","severity":1,"message":"645","line":95,"column":42,"nodeType":"646","messageId":"647","endLine":95,"endColumn":44},{"ruleId":"644","severity":1,"message":"645","line":95,"column":68,"nodeType":"646","messageId":"647","endLine":95,"endColumn":70},{"ruleId":"467","severity":1,"message":"648","line":135,"column":35,"nodeType":"469","messageId":"470","endLine":135,"endColumn":55},{"ruleId":"467","severity":1,"message":"649","line":136,"column":36,"nodeType":"469","messageId":"470","endLine":136,"endColumn":61},{"ruleId":"467","severity":1,"message":"650","line":138,"column":44,"nodeType":"469","messageId":"470","endLine":138,"endColumn":63},{"ruleId":"527","severity":1,"message":"651","line":148,"column":8,"nodeType":"529","endLine":148,"endColumn":10,"suggestions":"652"},{"ruleId":"527","severity":1,"message":"653","line":200,"column":8,"nodeType":"529","endLine":200,"endColumn":14,"suggestions":"654"},{"ruleId":"527","severity":1,"message":"655","line":204,"column":8,"nodeType":"529","endLine":204,"endColumn":27,"suggestions":"656"},{"ruleId":"488","severity":1,"message":"657","line":147,"column":9,"nodeType":"490","messageId":"491","endLine":153,"endColumn":10,"fix":"658"},{"ruleId":"488","severity":1,"message":"659","line":154,"column":9,"nodeType":"490","messageId":"491","endLine":157,"endColumn":10,"fix":"660"},{"ruleId":"488","severity":1,"message":"661","line":158,"column":9,"nodeType":"490","messageId":"491","endLine":160,"endColumn":10,"fix":"662"},{"ruleId":"467","severity":1,"message":"544","line":2,"column":10,"nodeType":"469","messageId":"470","endLine":2,"endColumn":20},{"ruleId":"527","severity":1,"message":"663","line":73,"column":8,"nodeType":"529","endLine":73,"endColumn":15,"suggestions":"664"},{"ruleId":"467","severity":1,"message":"665","line":11,"column":23,"nodeType":"469","messageId":"470","endLine":11,"endColumn":35},{"ruleId":"527","severity":1,"message":"666","line":49,"column":8,"nodeType":"529","endLine":49,"endColumn":38,"suggestions":"667"},"no-native-reassign",["668"],"no-negated-in-lhs",["669"],"@typescript-eslint/no-unused-vars","'CssBaseline' is defined but never used.","Identifier","unusedVar","'ThemeProvider' is defined but never used.","'theme' is defined but never used.",["668"],["669"],["668"],["669"],["668"],["669"],"'loginData' is assigned a value but never used.",["668"],["669"],["668"],["669"],"no-new-wrappers","Do not use String as a constructor.","NewExpression","noConstructor","no-useless-computed-key","Unnecessarily computed property ['clanDetails/fetchClanDetails/fulfilled'] found.","Property","unnecessarilyComputedProperty",{"range":"670","text":"671"},"Unnecessarily computed property ['clanDetails/fetchClanDetails/rejected'] found.",{"range":"672","text":"673"},"Unnecessarily computed property ['clanDetails/fetchClanDetails/pending'] found.",{"range":"674","text":"675"},"Unnecessarily computed property ['clanDetails/fetchClanDetailsById/rejected'] found.",{"range":"676","text":"677"},"Unnecessarily computed property ['clanDetails/fetchClanDetailsById/pending'] found.",{"range":"678","text":"679"},"Unnecessarily computed property ['clanDetails/fetchClanDetailsById/fulfilled'] found.",{"range":"680","text":"681"},"Unnecessarily computed property ['tanks/fetchTanks/fulfilled'] found.",{"range":"682","text":"683"},"Unnecessarily computed property ['tanks/fetchTanks/rejected'] found.",{"range":"684","text":"685"},"Unnecessarily computed property ['tanks/fetchTanks/pending'] found.",{"range":"686","text":"687"},"Unnecessarily computed property ['clanList/fetchClanList/fulfilled'] found.",{"range":"688","text":"689"},"Unnecessarily computed property ['clanList/fetchClanList/rejected'] found.",{"range":"690","text":"691"},"Unnecessarily computed property ['clanList/fetchClanList/pending'] found.",{"range":"692","text":"693"},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Tournament' is defined but never used.","'EventEmitter' is defined but never used.","'Events' is defined but never used.","'tournamentState' is assigned a value but never used.","'fetchClanDetailsThunk' is defined but never used.","'Redirect' is defined but never used.","Assign arrow function to a variable before exporting as module default","'dispatch' is assigned a value but never used.","'editMode' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["694"],"'useState' is defined but never used.","'BrowserRouter' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'useParams' is defined but never used.","'useRouteMatch' is defined but never used.","'TeamForm' is defined but never used.",["695"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'createStyles' is defined but never used.","'makeStyles' is defined but never used.","'Theme' is defined but never used.","'InteractiveMap' is defined but never used.","'tacticId' is assigned a value but never used.","'useDispatch' is defined but never used.","'selectTournaments' is defined but never used.","'RootState' is defined but never used.","'Button' is defined but never used.","'DEFAULT_NEW_TEAM_NAME' is defined but never used.","'saveTeam' is defined but never used.","'useHistory' is defined but never used.","'selectedTeamId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["696"],["697"],"React Hook useCallback has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["698"],"'useContext' is defined but never used.","React Hook useCallback has an unnecessary dependency: 'tacticMetadata'. Either exclude it or remove the dependency array.",["699"],["700"],["701"],"'mapFetchError' is assigned a value but never used.","'maps' is assigned a value but never used.",["702"],["703"],["704"],["705"],"'canDrop' is assigned a value but never used.","'isOver' is assigned a value but never used.","'PropTypes' is defined but never used.","'Icon' is defined but never used.","'FiberManualRecordIcon' is defined but never used.","'SelectedTeamIdAction' is defined but never used.","'User' is defined but never used.","'useRef' is defined but never used.","'useDrag' is defined but never used.","'useDrop' is defined but never used.","'isDragging' is assigned a value but never used.","'clanDetailsFetchErrors' is assigned a value but never used.","'clanDetails' is assigned a value but never used.","'tanksFetchErrors' is assigned a value but never used.","React Hook useCallback has unnecessary dependencies: 'name', 'tacticRole', and 'tank'. Either exclude them or remove the dependency array.",["706"],["707"],"React Hook useEffect has missing dependencies: 'dispatch' and 'tanks'. Either include them or remove the dependency array.",["708"],"Unnecessarily computed property ['maps/fetchMaps/pending'] found.",{"range":"709","text":"710"},"Unnecessarily computed property ['maps/fetchMaps/rejected'] found.",{"range":"711","text":"712"},"Unnecessarily computed property ['maps/fetchMaps/fulfilled'] found.",{"range":"713","text":"714"},["715"],["716"],"'MenuItem' is defined but never used.","'allMapsSelector' is defined but never used.","'MapTool' is defined but never used.","'addMarker' is defined but never used.","'WoTMap' is defined but never used.","'SIZE' is assigned a value but never used.","React Hook useCallback has an unnecessary dependency: 'isCursorDisplayed'. Either exclude it or remove the dependency array.",["717"],["718"],"React Hook useCallback has a missing dependency: 'webSocketContext.socket'. Either include it or remove the dependency array.",["719"],["720"],"'setActiveTool' is defined but never used.",["721"],["722"],["723"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'positionList' is assigned a value but never used.","'TankType' is defined but never used.","'draw' is assigned a value but never used.","'preDraw' is assigned a value but never used.","'postDraw' is assigned a value but never used.","'cursorPosition' is assigned a value but never used.",["668"],["669"],"'MARGIN_PROCENT' is assigned a value but never used.","'currentRadius' is assigned a value but never used.","'endRadius' is assigned a value but never used.","The 'drawMarkers' function makes the dependencies of useEffect Hook (at line 117) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'drawMarkers' in its own useCallback() Hook.","VariableDeclarator","The 'drawPoint' function makes the dependencies of useEffect Hook (at line 117) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'drawPoint' in its own useCallback() Hook.",["668"],["669"],"'useEffect' is defined but never used.","'MAP_IMAGES_API' is assigned a value but never used.","'saveState' is assigned a value but never used.",{"range":"724","text":"710"},{"range":"725","text":"712"},{"range":"726","text":"714"},"React Hook useEffect has a missing dependency: 'animate'. Either include it or remove the dependency array.",["727"],"'Typography' is defined but never used.","'ProvinceComponent' is defined but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'provincesFetchErrors' is assigned a value but never used.","'setProvinceTableHeadCells' is assigned a value but never used.","'clanListFetchErrors' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clanListFetchStatus', 'dispatch', and 'provincesFetchStatus'. Either include them or remove the dependency array.",["728"],"React Hook useCallback has an unnecessary dependency: 'page'. Either exclude it or remove the dependency array.",["729"],"React Hook useCallback has unnecessary dependencies: 'page' and 'rowsPerPage'. Either exclude them or remove the dependency array.",["730"],"Unnecessarily computed property ['globalMap/fetchProvinces/fulfilled'] found.",{"range":"731","text":"732"},"Unnecessarily computed property ['globalMap/fetchProvinces/rejected'] found.",{"range":"733","text":"734"},"Unnecessarily computed property ['globalMap/fetchProvinces/pending'] found.",{"range":"735","text":"736"},"React Hook useCallback has missing dependencies: 'buildCells' and 'buildCheckboxCell'. Either include them or remove the dependency array.",["737"],"'setClanNames' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clansInSearch' and 'dispatch'. Either include them or remove the dependency array.",["738"],"no-global-assign","no-unsafe-negation",[3657,3699],"'clanDetails/fetchClanDetails/fulfilled'",[3992,4033],"'clanDetails/fetchClanDetails/rejected'",[4179,4219],"'clanDetails/fetchClanDetails/pending'",[4318,4363],"'clanDetails/fetchClanDetailsById/rejected'",[4772,4816],"'clanDetails/fetchClanDetailsById/pending'",[5140,5186],"'clanDetails/fetchClanDetailsById/fulfilled'",[5719,5749],"'tanks/fetchTanks/fulfilled'",[5942,5971],"'tanks/fetchTanks/rejected'",[6104,6132],"'tanks/fetchTanks/pending'",[6223,6259],"'clanList/fetchClanList/fulfilled'",[6440,6475],"'clanList/fetchClanList/rejected'",[6616,6650],"'clanList/fetchClanList/pending'",{"desc":"739","fix":"740"},{"desc":"741","fix":"742"},{"desc":"743","fix":"744"},{"desc":"745","fix":"746"},{"desc":"747","fix":"748"},{"desc":"749","fix":"750"},{"desc":"749","fix":"751"},{"desc":"749","fix":"752"},{"desc":"753","fix":"754"},{"desc":"743","fix":"755"},{"desc":"756","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"758","fix":"762"},{"desc":"763","fix":"764"},[14093,14119],"'maps/fetchMaps/pending'",[14223,14250],"'maps/fetchMaps/rejected'",[14409,14437],"'maps/fetchMaps/fulfilled'",{"desc":"765","fix":"766"},{"desc":"767","fix":"768"},{"desc":"760","fix":"769"},{"desc":"770","fix":"771"},{"desc":"772","fix":"773"},{"desc":"774","fix":"775"},{"desc":"776","fix":"777"},{"desc":"776","fix":"778"},{"desc":"776","fix":"779"},[2449,2475],[2579,2606],[2765,2793],{"desc":"780","fix":"781"},{"desc":"782","fix":"783"},{"desc":"760","fix":"784"},{"desc":"760","fix":"785"},[4431,4469],"'globalMap/fetchProvinces/fulfilled'",[4755,4792],"'globalMap/fetchProvinces/rejected'",[4934,4970],"'globalMap/fetchProvinces/pending'",{"desc":"786","fix":"787"},{"desc":"788","fix":"789"},"Update the dependencies array to be: [dispatch, history, team]",{"range":"790","text":"791"},"Update the dependencies array to be: [dispatch, history]",{"range":"792","text":"793"},"Update the dependencies array to be: [clanDetailsFetchStatus, dispatch]",{"range":"794","text":"795"},"Update the dependencies array to be: [dispatch, team]",{"range":"796","text":"797"},"Update the dependencies array to be: [dispatch, history, team.teamId]",{"range":"798","text":"799"},"Update the dependencies array to be: [dispatch]",{"range":"800","text":"801"},{"range":"802","text":"801"},{"range":"803","text":"801"},"Update the dependencies array to be: [dispatch, mapFetchStatus]",{"range":"804","text":"805"},{"range":"806","text":"795"},"Update the dependencies array to be: [dispatch, tanksFetchStatus]",{"range":"807","text":"808"},"Update the dependencies array to be: [dispatch, tacticRole]",{"range":"809","text":"810"},"Update the dependencies array to be: []",{"range":"811","text":"812"},{"range":"813","text":"810"},"Update the dependencies array to be: [tacticRole, clanDetailsFetchStatus, tanksFetchStatus, clanMembers, dispatch, tanks]",{"range":"814","text":"815"},"Update the dependencies array to be: [dispatch, tactic]",{"range":"816","text":"817"},"Update the dependencies array to be: [dispatch, history, tactic.id]",{"range":"818","text":"819"},{"range":"820","text":"812"},"Update the dependencies array to be: [isMovingEnabled]",{"range":"821","text":"822"},"Update the dependencies array to be: [isMovingEnabled, webSocketContext.socket]",{"range":"823","text":"824"},"Update the dependencies array to be: [activeTool, isMovingEnabled, webSocketContext.socket]",{"range":"825","text":"826"},"Update the dependencies array to be: [webSocketContext.socket]",{"range":"827","text":"828"},{"range":"829","text":"828"},{"range":"830","text":"828"},"Update the dependencies array to be: [animate]",{"range":"831","text":"832"},"Update the dependencies array to be: [clanListFetchStatus, dispatch, provincesFetchStatus]",{"range":"833","text":"834"},{"range":"835","text":"812"},{"range":"836","text":"812"},"Update the dependencies array to be: [buildCells, buildCheckboxCell]",{"range":"837","text":"838"},"Update the dependencies array to be: [clanList, clanIds, clanNames, clansInSearch, dispatch]",{"range":"839","text":"840"},[1575,1590],"[dispatch, history, team]",[1114,1123],"[dispatch, history]",[1849,1873],"[clanDetailsFetchStatus, dispatch]",[1124,1130],"[dispatch, team]",[1286,1292],"[dispatch, history, team.teamId]",[2428,2454],"[dispatch]",[2743,2769],[3043,3069],[1876,1892],"[dispatch, mapFetchStatus]",[2042,2066],[2197,2215],"[dispatch, tanksFetchStatus]",[2741,2753],"[dispatch, tacticRole]",[2000,2024],"[]",[2132,2156],[2845,2912],"[tacticRole, clanDetailsFetchStatus, tanksFetchStatus, clanMembers, dispatch, tanks]",[1431,1439],"[dispatch, tactic]",[1591,1599],"[dispatch, history, tactic.id]",[3320,3339],[3486,3522],"[isMovingEnabled]",[4305,4332],"[isMovingEnabled, webSocketContext.socket]",[5093,5152],"[activeTool, isMovingEnabled, webSocketContext.socket]",[3371,3373],"[webSocketContext.socket]",[3570,3572],[3749,3751],[815,817],"[animate]",[5836,5838],"[clanListFetchStatus, dispatch, provincesFetchStatus]",[7603,7609],[7799,7818],[2768,2775],"[buildCells, buildCheckboxCell]",[1828,1858],"[clanList, clanIds, clanNames, clansInSearch, dispatch]"]